{"0": {
    "doc": "üìÜ Calendar",
    "title": "üìÜ Calendar",
    "content": "Page under construction! . ",
    "url": "/calendar/",
    "relUrl": "/calendar/"
  },"1": {
    "doc": "Final Project",
    "title": "Final Project",
    "content": " ",
    "url": "/projects/final_project/#final-project",
    "relUrl": "/projects/final_project/#final-project"
  },"2": {
    "doc": "Final Project",
    "title": "Table of contents",
    "content": ". | Overview | Theme: Explorable Explanations | Project Milestones | Project Deliverables . | Online Visualization | Video Presentation | . | Rubric . | Initial Prototype | Demo Video | Final Deliverables | . | . ",
    "url": "/projects/final_project/#table-of-contents",
    "relUrl": "/projects/final_project/#table-of-contents"
  },"3": {
    "doc": "Final Project",
    "title": "Overview",
    "content": "The final project will provide hands-on experience designing, implementing, and deploying interactive visualizations. Your project should address a concrete visualization challenge and should propose a novel, creative solution. The final deliverable will take the form of an explorable explanation, deployed as an interactive web page. Project teams should consist of 2-3 people. In addition to your webpage, you will be responsible for presenting your final results. At the end of the quarter we will have a video showcase for you to share your work. Prior to diving in, it is helpful to gain a sense of what goes into formulating a successful visualization project and to beware of common pitfalls. We encourage you to read A Nested Model for Visualization Design and Validation by Tamara Munzner. ",
    "url": "/projects/final_project/#overview",
    "relUrl": "/projects/final_project/#overview"
  },"4": {
    "doc": "Final Project",
    "title": "Theme: Explorable Explanations",
    "content": "Your task is to create an Explorable Explanation: an interactive article that explains a complex subject to the reader. The topic could be a scientific phenomenon, a computer science algorithm, a mathematical concept, a sociological theory, or some other topic that you‚Äôre passionate about. Focus on creating one or more interactive diagrams interlinked with explanatory text or annotations. We urge you to focus on a highly visual and/or interactive experience, as opposed to expecting a viewer to read large amounts of article text. Some useful references are: . | Harry Stevens‚Äô simulitis visualizations | Visualizations of the Boston subway system | Explorables Site | Idyll Gallery | Bret Victor | Explorable Explanations | . ",
    "url": "/projects/final_project/#theme-explorable-explanations",
    "relUrl": "/projects/final_project/#theme-explorable-explanations"
  },"5": {
    "doc": "Final Project",
    "title": "Project Milestones",
    "content": "The final project consists of the following milestones: . | Proposal (Fri 02/23, 11:59pm, Can Use Slip Days). Propose your chosen topic, dataset(s), and team members. Complete the registration form (one per team, Registration Link). We need the following information in the project proposal: . | Project Title | Dataset | Brief writeup of what you intend to do (5-10 lines). | . | Initial Prototype (Fri 03/01, 11:59pm, Can Use Slip Days). Develop an initial prototype of your project and, similar to Project 3, publish it using GitHub pages. This prototype will be used by the course staff to provide feedback on your designs. It is expected that your project will not yet be in a ‚Äúcomplete‚Äù state; however, by this point you should have the structure of your project laid out, rough prototypes of your main visualization(s) and interactions, and at least basic descriptive text. Each team should submit the URL for their project on Gradescope. | Demo Video (Fri 03/08, 11:59pm, Can Use Slip Days). You must produce a demo video (not to exceed 2 minutes in length) that introduces and explains your project. Your video can take the form of a narrated demo of your project, and may include additional content as you see fit. We will share the videos in class on 03/14. More information about preparing the video is available in the project deliverables section. | Deliverables (Sat 03/16, 11:59pm). Publish your final project web page. You may make final touches to your page after any feedback from our video session. More information about preparing the final deliverables is available in the project deliverables section. | . Your video should be posted to YouTube, and a URL to your video must be submitted via Gradescope by Fri 03/08. The links for the complete version of your final project webpage should be submitted on Gradescope by Sat 03/16. ",
    "url": "/projects/final_project/#project-milestones",
    "relUrl": "/projects/final_project/#project-milestones"
  },"6": {
    "doc": "Final Project",
    "title": "Project Deliverables",
    "content": "To complete your final project, you must provide two primary deliverables: . | A demonstration video (&lt;= 2 minutes in length) that communicates your project goals and visualizations. YouTube URL due on Gradescope by 11:59pm, Fri 03/08. | An interactive visualization web page for your chosen topic. Code and website due on Gradescope by 11:59pm, Sat 03/16. | . Online Visualization . Your final project visualizations must be published on GitHub pages. For your visualizations you need to utilize D3.js. Keep your source code (HTML markup, visualization JavaScript code, etc.) in the top-level of your GitLab repo. When ready to publish, place all necessary files in the ‚Äúdocs‚Äù subfolder to publish on GitHub pages. Video Presentation . In addition to your interactive web page, each team must produce a short demonstration video (no longer than 2 minutes!) introducing your project. Your video must communicate the specific topic and goals of your project along with your visualization designs. We expect most videos will use a mixture of static slides and interactive screen capture with overlaid narration. You might consider showing your web page as published on the web. Alternatively, you might create a stripped down version that removes text in favor of spoken narration, bringing more focus and screen space to your visualizations. The initial frame of your video should include your project name and the team members‚Äô names. Be sure that your video communicates how your visualization designs enable a better understanding of your chosen data. Do not simply enumerate the various features you implemented: focus on what viewers can learn from your visualization(s). Please carefully read the video production guide for details on how to design and record your video. Your videos should be in MPEG4 (.mp4, .m4v) format. Use appropriate compression to ensure your video file is not unnecessarily large. You will post videos online, so we encourage you to put your best face forward to the world! . Your demo video must be published on YouTube. In addition you must submit a URL linking to your video via Gradescope by Fri 03/08, 11:59pm. We will have a video showcase during our last lecture session on Thu 03/14. ",
    "url": "/projects/final_project/#project-deliverables",
    "relUrl": "/projects/final_project/#project-deliverables"
  },"7": {
    "doc": "Final Project",
    "title": "Rubric",
    "content": "Initial Prototype . | Webpage: 1 Point | GitHub Repo: 1 Point | Visualization: 3 Points | Writeup: 2 Points | . | Component | Complete | Incomplete | Missing | . | Webpage | The submitted URL leads to a web page. | ¬† | The URL is missing or leads to a 404 error. | . | ¬† | (+1 point) | ¬† | (+0 points) | . | Github Repo | The project has a public-facing GitHub repo. | ¬† | No GitHub repo available. | . | ¬† | (+1 point) | ¬† | (+0 points) | . | Visualization | The page has at least 1 visualization on the screen with at least 1 working interaction. | The page has at least one visualization, but the visualization doesn‚Äôt have an interaction. | No visualization is working on the page. | . | ¬† | (+3 points) | (+1.5 points) | (+0 points) | . | Writeup | The web page writeup contains at least 4 sentences for each of the following questions (‚â•8 sentences total): 1. What have you done so far? 2. What will be the most challenging of your project to design and why? | The description answered one out of two questions, or didn‚Äôt provide at least 4 sentences for each question. | The description is missing. | . | ¬† | (+2 points) | (+1 point) | (+0 points) | . Demo Video . The assignment is out of 15 points possible. Submissions that squarely meet the project requirements (Satisfactory column) will get 12/15 points. | Component | Excellent | Satisfactory | Not Satisfactory | . | Video URL and Length | ¬† | The video is uploaded as a public video on YouTube, and its length is 2 minutes or less. | The submitted video URL is broken, or it goes substantially over 2 minutes. | . | ¬† | ¬† | (+2 point) | (+1 points) | . | Hook | ¬† | The video opens with a hook ‚Äì an interesting research question or attention-grabbing statement. | The video doesn‚Äôt open with a hook (e.g. it immediately starts describing the visualization). | . | ¬† | ¬† | (+2 point) | (+1 points) | . | Motivation | The video explains the motivation for your project ‚Äì why do you think your visualization is better than other explanations? E.g. for algorithm explorables, what does your visualization allow that other explorables don‚Äôt? | The video explains the motivation for your project but doesn‚Äôt explain what your project does better than other explanations. | The video does not contain motivation for the project. | . | ¬† | (+3 points) | (+2 points) | (+1 point) | . | Explanation of the visualization | The video clearly demonstrates all relevant features of the visualization, including its interactions and design choices. The video explains the most interesting features, surprising features, or most challenging features to implement. | The video clearly demonstrates all relevant features of the visualization, including its interactions and design choices, but doesn‚Äôt mention its most interesting or surprising features. | The explanation of the visualization does not sufficiently demonstrate its features. | . | ¬† | (+3 points) | (+2 points) | (+1 point) | . | Takeaways | The video ends with an interesting takeaway and explains why your visualization demonstrates this takeaway effectively. What is the one thing that everyone should learn from your visualization? And why does your visualization succeed at explaining it? | The video ends with a takeaway message but the presentation could be improved (e.g. the takeaway isn‚Äôt surprising, or focuses too much on the implementation of the visualization). | The video does not end with a takeaway message. | . | ¬† | (+3 points) | (+2 points) | (+1 point) | . | Viewing experience | ¬† | The video is easy to view: all images are clearly visible and all text is legible. | The video is difficult to view (e.g. some images and text are too small to see clearly). | . | ¬† | ¬† | (+2 points) | (+1 points) | . | Creativity and Originality | The submission exceeds the assignment requirements, with original insights or a particularly engaging presentation. | The submission meets the assignment requirements. | ¬† | . | ¬† | (+1 bonus point) | (+0 points) | ¬† | . Final Deliverables . The assignment is out of 15 points possible. Submissions that squarely meet the project requirements (Satisfactory column) will get 12/15 points. | Component | Excellent | Satisfactory | Poor | . | Web page URL, video URL, and Repo | ¬† | The web page is publicly viewable on GitHub pages, the project video is linked (or embedded) within the web page, and the repository is publicly available. | The submitted web page URL, project video, or repository URL is broken. | . | ¬† | ¬† | (+1 point) | (+0 points) | . | Hook | ¬† | The project opens with a hook ‚Äì an interesting research question or attention-grabbing statement. | The project doesn‚Äôt open with a hook (e.g. it immediately shows a visualization without explanation). | . | ¬† | ¬† | (+1 point) | (+0 points) | . | Storytelling | The project tells a compelling story. It follows the and-but-therefore structure and also incorporates elements of surprise, personalization, or emotion. | The project tells a story ‚Äì it follows the and-but-therefore structure. | The project does not tell a story (e.g. it doesn‚Äôt follow the and-but-therefore structure or something similar). | . | ¬† | (+3 points) | (+2 points) | (+1 point) | . | Visual Encodings | The project visualizations do not violate the expressiveness criteria and the design choices (marks and encoding channels) are clear, evocative, and effective. | The project visualizations do not violate the expressiveness criteria, but another set of design choices (marks and encoding channels) could have been more effective (e.g. using the area visual channel instead of position when possible). | The project visualizations violate the expressiveness criteria (e.g. heavy overplotting, encodings that imply incorrect readings, etc.), and these violations are not addressed using the available interactions (e.g. overplotting that cannot be filtered or zoomed into). | . | ¬† | (+3 points) | (+2 points) | (+1 point) | . | Interaction | The interactive elements of the project are polished, bug-free, and enable the reader to discover interesting patterns in the data or the concept being explored. | The interactive elements of the project are functional and enable the reader to discover interesting patterns, but a static plot (perhaps with a different encoding) could have conveyed the same information just as effectively. | The plot would have been substantially more effective as a static plot without the interaction; or, the interaction has major bugs that preclude use. | . | ¬† | (+3 points) | (+2 points) | (+1 point) | . | Annotations | ¬† | The visualizations contain helpful annotations (e.g. text, coloring, shading) that draw attention to interesting findings. | The visualizations contain no annotations. | . | ¬† | ¬† | (+1 point) | (+0 points) | . | Takeaways | ¬† | The project ends with an interesting takeaway and explains why your visualization demonstrates this takeaway effectively. What is the one thing that everyone should learn from your project? And why does your project succeed at explaining it? | The project is missing a takeaway, or ends with a takeaway message but the presentation could be improved (e.g. the takeaway isn‚Äôt surprising, or focuses too much on the implementation of the visualization). | . | ¬† | ¬† | (+2 point) | (+1 point) | . | Viewing experience | ¬† | The project is easy to view: all images are clearly visible and all text is legible on a typical laptop screen size. | The project is difficult to view (e.g. some images and text are too small to see clearly). | . | ¬† | ¬† | (+1 point) | (+0 points) | . | Creativity and Originality | The submission exceeds the assignment requirements, with original insights or a particularly engaging presentation. | The submission meets the assignment requirements. | ¬† | . | ¬† | (+1 bonus point) | (+0 points) | ¬† | . ",
    "url": "/projects/final_project/#rubric",
    "relUrl": "/projects/final_project/#rubric"
  },"8": {
    "doc": "Final Project",
    "title": "Final Project",
    "content": " ",
    "url": "/projects/final_project/",
    "relUrl": "/projects/final_project/"
  },"9": {
    "doc": "Lab 5: Svelte II (Loading Data & Reactivity)",
    "title": "Lab 5: Svelte II (Loading Data &amp; Reactivity)",
    "content": "In this lab, we will learn: . | How to leverage Svelte‚Äôs reactivity to build interactive UIs | How to load data from an API and display it in a Svelte app | . | Lab 5: Svelte II (Loading Data &amp; Reactivity) . | Check-off | Questions Doc | Slides | Step 0: Creating a layout for UI shared across pages | Step 1: Port the theme switcher to Svelte . | Step 1.1: Porting the theme switcher HTML and CSS to our layout | Step 1.2: Bind color scheme to a variable | Step 1.3: Apply the color scheme to the &lt;html&gt; element | Step 1.4: Reading the color scheme from local storage | Step 1.5: Saving the color scheme to local storage | Step 1.6: Preventing FOUC (Optional) | . | Step 2: Loading data from an API . | Step 2.0: Follow some of your classmates! | Step 2.1: Viewing the data in our browser | Step 2.2: Fetching the data in Svelte | Step 2.3: Displaying the data in a more useful way | . | Step 3: Update your project data | Resources | . | . ",
    "url": "/labs/lab05/#lab-5-svelte-ii-loading-data--reactivity",
    "relUrl": "/labs/lab05/#lab-5-svelte-ii-loading-data--reactivity"
  },"10": {
    "doc": "Lab 5: Svelte II (Loading Data & Reactivity)",
    "title": "Check-off",
    "content": "You need to come to TA Office Hours to get checked off for this lab (any of them, no appointment needed). Please fill in the check-off form at labs/5/checkoff before your check-off. Ideally you should fill in the form right before your check-off, but it‚Äôs ok if you fill it out in advance. Filling out the form is a necessary but not sufficient condition to get checked-off. You still need to come to office hours in person for your check-off to be processed. You could even fill it out before you finish the lab, since we won‚Äôt look at it until your check-off, but the closer to the end of the lab you fill it out, the more meaningful your feedback will be. ",
    "url": "/labs/lab05/#check-off",
    "relUrl": "/labs/lab05/#check-off"
  },"11": {
    "doc": "Lab 5: Svelte II (Loading Data & Reactivity)",
    "title": "Questions Doc",
    "content": "Add questions to the questions doc throughout the lecture and lab! After lab, come to office hours or ask on Discourse for futher questions! . ",
    "url": "/labs/lab05/#questions-doc",
    "relUrl": "/labs/lab05/#questions-doc"
  },"12": {
    "doc": "Lab 5: Svelte II (Loading Data & Reactivity)",
    "title": "Slides",
    "content": "Make sure to read the notes on each slide as well! . ",
    "url": "/labs/lab05/#slides",
    "relUrl": "/labs/lab05/#slides"
  },"13": {
    "doc": "Lab 5: Svelte II (Loading Data & Reactivity)",
    "title": "Step 0: Creating a layout for UI shared across pages",
    "content": "This was optional in Lab 4, but we will need it for this lab. If you haven‚Äôt done it yet, create a layout component that will be shared across all pages. You can ignore steps 6.2 to 6.4 or do them at home, all we need for this lab is the layout component, i.e. up to step 6.1. ",
    "url": "/labs/lab05/#step-0-creating-a-layout-for-ui-shared-across-pages",
    "relUrl": "/labs/lab05/#step-0-creating-a-layout-for-ui-shared-across-pages"
  },"14": {
    "doc": "Lab 5: Svelte II (Loading Data & Reactivity)",
    "title": "Step 1: Port the theme switcher to Svelte",
    "content": "Step 1.1: Porting the theme switcher HTML and CSS to our layout . Copy the HTML that your JS was generating for the theme switcher and paste it in your +layout.svelte component. Delete or comment out (Cmd + /) the JS code that was generating that HTML. Add a &lt;style&gt; element to your layout component if it doesn‚Äôt already have one. Then remove the CSS that styles the theme switcher from your style.css file and paste it there. Refresh and make sure everything still works. Step 1.2: Bind color scheme to a variable . Add a &lt;script&gt; element to your layout component if it doesn‚Äôt already have one, since we‚Äôll be writing some JS in this step. Namely, we‚Äôll add a variable to hold the color scheme. Let‚Äôs call it colorScheme: . let colorScheme = 'light dark'; . The next step is to bind the colorScheme variable to the value of the &lt;select&gt; element. ‚ÄúBind‚Äù in this context means that the value of the variable will be automatically updated when the value of the &lt;select&gt; changes, and vice versa. To do this, we use a bind:value directive on the &lt;select&gt; element and set it to {colorScheme}. The syntax for directives is very similar to attributes: . &lt;select bind:value={ colorScheme }&gt; . This binds the value property of the &lt;select&gt; element to our colorScheme variable. In fact, it does what is called double binding: the value of the variable will be updated when the value of the &lt;select&gt; changes, and the value of the &lt;select&gt; will be updated when the value of the variable changes. Ensure that it works by adding a {colorScheme} expression above the &lt;select&gt; (and remove it after). Step 1.3: Apply the color scheme to the &lt;html&gt; element . Now delete or comment out all of the theme switcher code in your global.js. It‚Äôs time to move all of that logic to Svelte! . We have already seen how to use expressions in { ... } to set attributes or element contents based on variables or expressions. But here, we need to set a CSS property on the root element (&lt;html&gt;), which is not part of the Svelte component tree. If you recall, the &lt;html&gt; element is part of the skeleton in src/app.html, which is not a Svelte component and thus, cannot take expressions. What to do? Is it even possible?! . Fear not, of course it is! In fact, there are multiple ways to do this. You will find the one that seemed most straightforward and closest to our original code below, but feel free to ask about the others! . If you recall, in our original code we were doing this: . document.documentElement.style.setProperty('color-scheme', colorScheme); . Can‚Äôt we just copy this line of code wholesale? Unfortunately not. There is a bit of a wart here: Our Svelte code is first ran in Node.js to generate the static parts of our HTML, and the more dynamic parts make it to the browser. However, Node.js has no document object, let alone a document.documentElement object. Try it for yourself: add this to your &lt;script&gt; element: . console.log(document); . You will likely see something like this in your terminal: . And an error in your browser: . Does this mean we cannot access all the objects we normally have access to in the browser? Of course not; it just means we need to be a bit more careful about how we access them. All of these predefined objects are actually properties of the global object. There are many ways to access this object explicitly: . | In the browser: window, self, globalThis | In Node.js: global, globalThis | . Note that the only name that works in every context is globalThis, so let‚Äôs use that. In JS, accessing undefined variables produces an error, as we just saw. However, accessing undefined object properties on an object that exists does not produce an error; it just returns &gt; undefined. Accessing properties on undefined or null will also produce an error. To sum up, if obj is an empty object ({}), and we have defined nothing else: . | foo produces an error (ReferenceError: foo is not defined) | obj.foo does not produce an error, it just returns undefined | obj.foo.bar produces an error (TypeError: Cannot read property 'bar' of undefined) When accessing properties of objects of ‚Ä¶questionable existence, we can use the optional chaining operator ?. instead of the dot operator to avoid errors. To continue the example above, obj.foo?.bar will not produce an error, it will just return undefined. | . Therefore, we can have a variable to hold the &lt;html&gt; element, by doing this: . let root = globalThis?.document?.documentElement; . Now root will be undefined when Svelte runs in Node.js, but it will contain the object that corresponds to the &lt;html&gt; element when it runs in the browser. This means that we need to use the optional chaining operator ? when accessing properties of root to avoid errors. Therefore, to set the color-scheme CSS property, we need something like this: . root?.style.setProperty('color-scheme', colorScheme); . Try it out: does it work? You‚Äôll notice that now changing the theme in the dropdown no longer changes the color scheme of the page. Why is that? . There is one last bit to make this work. The way we‚Äôve written this, it will only be executed once, just like regular JS. To tell Svelte to re-run this every time any of its dependencies change, we need to use a reactive statement, i.e. we need to prefix that line of code with $:. $: root?.style.setProperty('color-scheme', colorScheme); . If you try it again, the theme switcher should work! . Step 1.4: Reading the color scheme from local storage . Notice that when you reload the page, the theme is reset to the default. This is because we have not yet added any code to save the color scheme to local storage. First, we‚Äôd need to read from localStorage to get the saved color scheme, if any. In a browser, any of the following would work, with decreasing levels of verbosity. if statement: . let colorScheme = 'light dark'; if (localStorage.colorScheme) { colorScheme = localStorage.colorScheme; } . Conditional operator: . let colorScheme = localStorage.colorScheme ? localStorage.colorScheme : 'light dark'; . Nullish coalescing operator: . let colorScheme = localStorage.colorScheme ?? 'light dark'; . However, if you try them in Svelte, you will get an error. This is because, just like document, localStorage is a browser-specific variable that is not defined in Node.js. We could use the same method as above, and access localStorage through the global object. However, that would get quite messy, so we‚Äôll use a different method. We‚Äôll specify a local variable that is set to localStorage if it exists, and to an empty object if it doesn‚Äôt. We can even call that local variable localStorage! . let localStorage = globalThis.localStorage ?? {}; . As long as we place this before any attempt to access localStorage, we can now use localStorage as normal. Step 1.5: Saving the color scheme to local storage . Reading from localStorage is only half the battle. We also need to save the color scheme to localStorage every time it changes. Thankfully, that is pretty simple too. Our first attempt may look something like this: . localStorage.colorScheme = colorScheme; . However, just like Step 1.3, this will only be executed once. To tell Svelte to make this a reactive statement, we need to prefix that line of code with $:, just like we did in Step 1.3. Step 1.6: Preventing FOUC (Optional) . You may have noticed that when you refresh the page, the theme changes after the page has loaded. This is because the theme switcher is only rendered after the page has loaded, and the theme is only set after the theme switcher has been rendered. This is called a Flash of Unstyled Content (FOUC). To prevent this, we can set the theme before the page has loaded. We can do this by adding a &lt;script&gt; element to the &lt;head&gt; of src/app.html and setting the theme there. This script will be executed before the rest of the page is loaded. &lt;script&gt; let root = document.documentElement; let colorScheme = localStorage.colorScheme ?? 'light dark'; root.style.setProperty('color-scheme', colorScheme); &lt;/script&gt; . We could also add this code to your global.js ‚Äî it will be executed a little later, but still before the rest of the page is loaded. ",
    "url": "/labs/lab05/#step-1-port-the-theme-switcher-to-svelte",
    "relUrl": "/labs/lab05/#step-1-port-the-theme-switcher-to-svelte"
  },"15": {
    "doc": "Lab 5: Svelte II (Loading Data & Reactivity)",
    "title": "Step 2: Loading data from an API",
    "content": "So far we have been loading data from a static JSON file in our own repository. But what fun is that? . Let‚Äôs load data from another website and display it in our app! We will use GitHub‚Äôs API to read stats about our GitHub profile and display them in our homepage. Step 2.0: Follow some of your classmates! . If you‚Äôre new to GitHub, you may not have followers yet. Since we will be printing out your number of followers from the GitHub API in this step, it will be more rewarding the more followers you have. Plus, you get to explore how quickly the API updates with new data! . Ask the people next to you, behind you, and in front of you for their GitHub usernames, and follow them. Then ask them to follow you back. When you leave the lab, you should all have at least three followers and three following. Step 2.1: Viewing the data in our browser . GitHub is one of the few APIs left that provides public data without requiring us to authenticate. We can use the /users/username API endpoint to get public data about a user. Visit https://api.github.com/users/your-username in your browser, replacing your-username with your GitHub username. For example, here is mine: https://api.github.com/users/leaverou. You should see something like this in your browser: . Step 2.2: Fetching the data in Svelte . To make an arbitrary HTTP request in JS, we can use the fetch() function. let profileData = fetch('https://api.github.com/users/your-username'); . fetch() is an example of an asynchronous function. This means that it does not return the data directly, but rather a Promise that will eventually resolve to the data. In fact, fetch() returns a Promise that resolves to a Response object, which is a representation of the response to the request. To get meaningful data from a Response object, we need to call one of its methods, such as json(), which returns a Promise that resolves to the JSON representation of the response body. You do not need to understand promises deeply for the purposes of this lab, but if you want to learn more, you can read MDN‚Äôs guide to promises. Svelte has a special syntax for working with promises in the template: the {#await} block. It allows us to show different content based on the state of the promise. The syntax is as follows: . {#await promise} Loading... {:then data} The data is {data} {:catch error} Something went wrong: {error.message} {/await} . To read data from fetch() we actually need two nested {#await} blocks: one for the response, and one for the data. It looks like this: . {#await fetch(\"https://api.github.com/users/leaverou\") } &lt;p&gt;Loading...&lt;/p&gt; {:then response} {#await response.json()} &lt;p&gt;Decoding...&lt;/p&gt; {:then data} &lt;p&gt;The data is { JSON.stringify(data) }&lt;/p&gt; {:catch error} &lt;p class=\"error\"&gt;Something went wrong: {error.message}&lt;/p&gt; {/await} {:catch error} &lt;p class=\"error\"&gt;Something went wrong: {error.message}&lt;/p&gt; {/await} . Try pasting this in your src/routes/+page.svelte component (replacing leaverou with your username) and see what happens. It would look something like this: . You may get a warning about not calling fetch() eagerly during server-side rendering. The ‚Äúproper way‚Äù to load data for your pages is via a +page.js file. You may want to experiment with this if you have time, but for now, you can ignore the warning. Step 2.3: Displaying the data in a more useful way . Ok, now that we‚Äôve made sure we can fetch the data, let‚Äôs display it in a more meaningful way. Create a &lt;section&gt; with an &lt;h2&gt; for that part of your page. Decide which stats you want to display, e.g. number of public repos (public_repos key), number of followers (followers key), etc. and display them in a &lt;dl&gt; list. It should look like this before any styling is applied: . Feel free to style it as you see fit! . Because Svelte‚Äôs local server will re-run the fetch() call every time you save (yes, even if you loaded it via a +page.js file), it‚Äôs easy to hit the rate limit as you iterate on CSS. To avoid that, you can comment out the fetch() call and use this instead while you‚Äôre experimenting with CSS: . let profileData = { ok: true, json: async () =&gt; ({ followers: 100, following: 100, public_repos: 100, public_gists: 100, }), }; . This is what I did: . In case you want a similar style, the gist of it is: . | I applied a grid on the &lt;dl&gt; with four equal-sized columns (1fr each) | I used grid-row to override the automatic grid placement and specify that every &lt;dt&gt; should be placed on the first row of the grid, and every &lt;dd&gt; on the second row | . ",
    "url": "/labs/lab05/#step-2-loading-data-from-an-api",
    "relUrl": "/labs/lab05/#step-2-loading-data-from-an-api"
  },"16": {
    "doc": "Lab 5: Svelte II (Loading Data & Reactivity)",
    "title": "Step 3: Update your project data",
    "content": "This is in preparation for the next lab. Please update your project data (src/lib/projects.json) with your assignments from the class and any other projects you can think of. Make sure you have at least 12 projects, even if you need to leave some placeholder data in. Also add a \"year\" field to each project with a number for the year you worked on it. Example: . { \"title\": \"Lorem ipsum dolor sit.\", \"year\": \"2024\", \"image\": \"https://vis-society.github.io/labs/2/images/empty.svg\", \"description\": \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Magnam dolor quos, quod assumenda explicabo odio, nobis ipsa laudantium quas eum veritatis ullam sint porro minima modi molestias doloribus cumque odit.\" }, . Make sure not all your projects have the same year, since in the next lab we‚Äôll be drawing visualizations based on it, and it would be a pretty boring visualization if they all had the same one! . ",
    "url": "/labs/lab05/#step-3-update-your-project-data",
    "relUrl": "/labs/lab05/#step-3-update-your-project-data"
  },"17": {
    "doc": "Lab 5: Svelte II (Loading Data & Reactivity)",
    "title": "Resources",
    "content": ". | Svelte {#await} block | MDN: fetch() | MDN: Promises | . ",
    "url": "/labs/lab05/#resources",
    "relUrl": "/labs/lab05/#resources"
  },"18": {
    "doc": "Lab 5: Svelte II (Loading Data & Reactivity)",
    "title": "Lab 5: Svelte II (Loading Data & Reactivity)",
    "content": " ",
    "url": "/labs/lab05/",
    "relUrl": "/labs/lab05/"
  },"19": {
    "doc": "Lab 2: Styling with CSS",
    "title": "Lab 2: Styling with CSS",
    "content": "Add questions to the questions doc throughout the lab! . In this lab, we will learn: . | What are the core concepts of CSS? | How can we use CSS selectors to target the elements we want to style? | What is the difference between absolute and relative units? | How to use CSS to customize deisgn aspects such as fonts, colors, or layout? | What happens when there are conflicting CSS declarations about the same element? | . | Lab 2: Styling with CSS . | Check-off | Prerequisites | Slides | Step 1: Prevent content from getting too wide | Step 2: Styling the navigation bar . | Step 2.1: Getting &lt;ul&gt; and &lt;li&gt; out of the way | Step 2.2: Using Flexbox to lay out the navigation | Step 2.3: Adding some style | Step 2.4: Accent color and hover styles | . | Step 3: Contact form layout . | Step 3.1: Integrate typography | Step 3.2: Top-down layout | Step 3.3: Grid layout | . | Step 4: Style your projects page . | Step 4.1: Add some dummy content | Step 4.2: Applying a responsive grid | Step 4.3: Horizontal alignment with subgrid | Step 4.4: Finishing touches | . | Step 5: Style your CV | CSS resources . | Videos | . | . | . ",
    "url": "/labs/lab02/",
    "relUrl": "/labs/lab02/"
  },"20": {
    "doc": "Lab 2: Styling with CSS",
    "title": "Check-off",
    "content": "You need to come to TA Office Hours to get checked off for this lab (any of them, no appointment needed). Please fill in the check-off form at labs/2/checkoff before your check-off (right before is fine ‚Äî even preferred). Filling out the form is not enough to get checked off. You need to come to office hours. ",
    "url": "/labs/lab02/#check-off",
    "relUrl": "/labs/lab02/#check-off"
  },"21": {
    "doc": "Lab 2: Styling with CSS",
    "title": "Prerequisites",
    "content": "This lab assumes you have already completed Lab 1, as we will use this as a starting point. You do not need to create a new repository for Lab 2, simply work on the same repository you created for Lab 1. ",
    "url": "/labs/lab02/#prerequisites",
    "relUrl": "/labs/lab02/#prerequisites"
  },"22": {
    "doc": "Lab 2: Styling with CSS",
    "title": "Slides",
    "content": "Make sure to read the notes on each slide as well! . Playgrounds: . | CSS box model | Specificity Battle | . ",
    "url": "/labs/lab02/#slides",
    "relUrl": "/labs/lab02/#slides"
  },"23": {
    "doc": "Lab 2: Styling with CSS",
    "title": "Step 1: Prevent content from getting too wide",
    "content": "In lab 1, we created a simple homepage with minimal styling (only setting the font family, and line-height). It looked a bit like this: . First, let‚Äôs stop the content from getting so wide, by applying a max-width to &lt;body&gt;. Why not simply a width? So that the content continues to adapt to smaller viewport sizes. We will specify that max-width in em, rem, or ch units, so that it scales with the font size. Experiment with the browser dev tools to find a good value for max-width. I used 100ch: . Now let‚Äôs center that content. We can do that by using the special value auto for the left and right margin. We can set both of these to the same value by using the margin-inline shorthand property. This already looks better! . But try resizing your window to be smaller than that max-width we set. Yikes! Our content is now touching the edges of the viewport, which makes it hard to read. One way to fix that is to add some padding to the content. Before and after What would be another way to solve it? We can specify a lower bound for our margin by using the max() function, but we need to specify the margin explicitly, not using the auto keyword: . margin-inline: max(1em, (100% - 100ch) / 2); . ",
    "url": "/labs/lab02/#step-1-prevent-content-from-getting-too-wide",
    "relUrl": "/labs/lab02/#step-1-prevent-content-from-getting-too-wide"
  },"24": {
    "doc": "Lab 2: Styling with CSS",
    "title": "Step 2: Styling the navigation bar",
    "content": "Our navigation bar looks more like a list than a navigation bar. Let‚Äôs fix that! . Step 2.1: Getting &lt;ul&gt; and &lt;li&gt; out of the way . If you have used a &lt;ul&gt; element within your &lt;nav&gt;, you can tell the browser to ignore that &lt;ul&gt; and its &lt;li&gt; children for stylng by applying display: contents to them both, which prevents them from having any styling of their own. Step 2.2: Using Flexbox to lay out the navigation . Now we don‚Äôt have weird list bullets, but our navigation is all scrunched up: . Flexbox to the rescue! . Before you proceed, wrap the menu item for the current page in a &lt;a&gt; as well, as that will simplify things. Give it a class=\"current\" attribute, which will allow us to style it differently. Let‚Äôs apply display: flex to the &lt;nav&gt; to enable Flexible box layout (Flexbox). You will not notice any immediate difference, but we can now use Flexbox to control the layout of the children of &lt;nav&gt;. Apply flex: 1 to each of the &lt;a&gt; elements (via a suitable CSS rule) to make them take up the same amount of space 1. Useful links for Flexbox: . | MDN: Basic concepts of flexbox | MDN: Flexbox tutorial | CSS Tricks: A Complete Guide to Flexbox | Flexbox Froggy | Flexbox Defense | Flexbox Zombies | . Step 2.3: Adding some style . This is starting to look like an actual navigation bar! . Now let‚Äôs give it some style. | Remove the underline from the links by setting text-decoration: none. | Remove the gory default link color by setting color: inherit to make links use the same text color as their parent element. | Center the text in its box by setting text-align: center | Let‚Äôs give each link some spacing by adding some padding (we recommend 0.5em) | Apply some margin-bottom to the whole &lt;nav&gt; to separate it from the content below. | . Apply a bottom border to the &lt;nav&gt; to visually separate it from the content. Give it a border-bottom-width of 1px, a border-bottom-style of solid, and a border-bottom-color of oklch(80% 3% 200) (a cool gray). You can also use the border-bottom shorthand property to specify all of these at once. Feel free to play with these values, but we recommend keeping it subtle. Now let‚Äôs style the current page link. Give it a thick bottom border (we recomend a border width of 0.4em), and either the same cool gray as the navigation bar border, or a lighter version. To counter the increase in height that the border adds, apply a reduced padding-bottom to that link. Step 2.4: Accent color and hover styles . Define an accent color for your website, and store it in an --color-accent custom property. Make this custom property available to the entire document by setting it on the &lt;html&gt; element (i.e. a selector of html or :root). I used oklch(65% 50% 0), but feel free to play with the values and pick something you like! Specify accent-color: var(--color-accent) on &lt;html&gt; or &lt;body&gt; so that all elements that use the accent color can inherit it. Now let‚Äôs use this accent color to style hovered navigation links (a:hover). Apply the same border-bottom as you did for the current page link, but with var(--color-accent) as the color. Wanna go further? Apply background-color: oklch(from var(--color-accent) 95% 5% h) that is a light color with the same hue as our accent color! . ",
    "url": "/labs/lab02/#step-2-styling-the-navigation-bar",
    "relUrl": "/labs/lab02/#step-2-styling-the-navigation-bar"
  },"25": {
    "doc": "Lab 2: Styling with CSS",
    "title": "Step 3: Contact form layout",
    "content": "In the previous lab, we created a simple contact form. It worked, but it was not very usable, since there is no alignment, nor clear proximity to distinguish what input fields the labels belong to: . Let‚Äôs use CSS to improve this. Step 3.1: Integrate typography . Inspect the form controls (&lt;input&gt;, &lt;textarea&gt;, &lt;button&gt;) and search for font-family in both the Styles and Computed tabs. What do you observe? . All we need to make these use the same font as the rest of the page is font: inherit: . Step 3.2: Top-down layout . The easiest way for that is to lay it out top-to-bottom, with each text field occuping the whole width of the form, and its label is above it. This is exactly what the optional Contact form styling step did in the previous lab. The gist was: . | Apply display: block to the form controls and labels to make them behave like block elements (such as &lt;p&gt;), i.e. insert line breaks before and after | Apply width: 100% to the form controls to make them take up the whole width of their container (in other elements display: block does this too, but form controls are special) | Apply box-sizing: border-box to the form controls to make their width of 100% include their padding and border | Apply margin-block to the labels to add spacing before and after them | . Step 3.3: Grid layout . Our form now looks much better, and it‚Äôs crystal clear which label belongs to which input field. However, it is exceedingly wide and looks a bit weird. The primitive layout method we used works, but is not very flexible. How could we make it so that the labels are on the left, and the input fields are on the right, and they are all aligned? No, you do *not* use a &lt;table&gt; for that! Repeat after me: tables are for tabular data, not for layout! . The answer is CSS Grid: the cr√®me de la cr√®me of CSS layout methods. It may take some time to fully grok, but it is well worth it. The core idea of CSS Grid is that we define a grid container (the element with display:grid), and then place its children in the grid (or descendants, through subgrid or display: contents). First, remove the CSS you applied in the previous step, since we will not need it. Everything starts by applying display: grid to the form. Note that you immediately see a change in the layout: Once you enable grid layout, the grid container‚Äôs children are automatically placed on a grid with one column and as many rows as needed to fit all of them. This is called the automatic grid placement algorithm, and it saves you a lot of time: you only need to define the actual constraints, and the browser will take care of the rest. E.g. in this case, all we need to define is columns, via grid-template-columns: auto 1fr. auto means that the column will be as wide as its content, and 1fr means that the column will take up the remaining space (similar to flex: 1). If we preview our changes at this point, the result can be quite surprising, but inspecting the &lt;form&gt; element in the browser dev tools will reveal what is happening: . As often happens, the computer is doing exactly what we told it and not what we wanted üòÄ. It is placing the child elements of &lt;form&gt; on the grid we defined, one by one, in the order they appear in the HTML. But we wanted each &lt;label&gt; to occupy two columns: one for its text, and one for the input field! Fear not, for we can do this. The quick and dirty way would be to apply display: contents to the &lt;label&gt; elements, so that stop creating boxes of their own, and their children are placed directly in the grid. But the proper way to do it is to use subgrid. The core idea is that we make the labels grid containers themselves (display: grid), but their grid is a subset of the form grid (grid-template-columns: subgrid). The last piece of the puzzle, is that we need to make the labels (and the submit button while we‚Äôre at it) to span a whole row. We can use that by grid-column: 1 / -1; which means that the element will start at the first column and end at the last (-1) column. At this point, your form should look about right. The last remaining touch is to add gap: 1em; to the form to add some spacing between the form controls. Useful links for Grid Layout: . | MDN: Basic concepts of grid layout | MDN: Subgrid | CSS Tricks: A Complete Guide to Grid | Grid Garden | . ",
    "url": "/labs/lab02/#step-3-contact-form-layout",
    "relUrl": "/labs/lab02/#step-3-contact-form-layout"
  },"26": {
    "doc": "Lab 2: Styling with CSS",
    "title": "Step 4: Style your projects page",
    "content": "Soon, you will be populating your projects page with your assignments from this class. You can start by adding some dummy content and styling it. Step 4.1: Add some dummy content . We will use Emmet to generate some dummy content. Copy the following abbreviation: .projects&gt;article*12&gt;h2&gt;lorem4^img[src=\"https://vis-society.github.io/labs/2/images/empty.svg\"]+p&gt;lorem . Paste it in your projects/index.html file under the &lt;h1&gt; element (i.e. after its closing tag &lt;/h1&gt;), and expand it with Emmet (delete and re-add the last character, then hit Tab). If it all worked well, you should have 12 articles, each with a heading, an image, and a paragraph of lorem ipsum text. Step 4.2: Applying a responsive grid . We will use Grid Layout to lay out the projects in a grid, but with a twist: rather than a fixed number of columns, we will use a flexible number of columns that adapt to the width of the page. | First, apply display: grid to .projects to make it a grid container. | Then, use repeat(auto-fill, minmax(15em, 1fr)) for grid-template-columns to make the grid have as many columns as can fit in the container, each with a minimum width of 15em and a maximum width of 1fr (i.e. the remaining space). | . When you try it, resize your window to see the grid adapt to the width of the page! . Step 4.3: Horizontal alignment with subgrid . The grid layout is looking good, but the content is not aligned. Some headings take up two lines, and the images are not aligned across columns. Use subgrid on the &lt;article&gt; elements to make their contents align across columns. Tips: . | In this case, we will set grid-template-rows to subgrid, not grid-template-columns. | We want to declare that each &lt;article&gt; should span 3 rows without having to specify the starting row. We can do that by using grid-row: span 3;. | You will likely want to set margin: 0 on the &lt;h2&gt; to avoid excessive spacing. | . Step 4.4: Finishing touches . Note that we don‚Äôt have a clear information hierarchy. The default &lt;h1&gt; size is very close to the default &lt;h2&gt; size, violating the design principle of contrast. Make it significantly larger (e.g. 400% the body text). This is not specific to the projects page, but it‚Äôs the only one that currently has &lt;h2&gt; elements. While we‚Äôre at it we can also add some good defaults for all headings (h1, h2, h3, h4, h5, h6), by applying line-height: 1.1 (we typically want their leading to be smaller than body text) and text-wrap: balance to prevent uneven lines. ",
    "url": "/labs/lab02/#step-4-style-your-projects-page",
    "relUrl": "/labs/lab02/#step-4-style-your-projects-page"
  },"27": {
    "doc": "Lab 2: Styling with CSS",
    "title": "Step 5: Style your CV",
    "content": "Now that you got your feet wet with CSS, experiment with it in a more freeform way by styling your CV/resume page! . Always remember to commit and push your changes to GitHub after you make them and preview the published website as well! . ",
    "url": "/labs/lab02/#step-5-style-your-cv",
    "relUrl": "/labs/lab02/#step-5-style-your-cv"
  },"28": {
    "doc": "Lab 2: Styling with CSS",
    "title": "CSS resources",
    "content": ". | MDN: Learn to style HTML using CSS | Khan Academy: Intro to HTML/CSS | Code Academy: Learn CSS | . Videos . | CSS in 20 Minutes | 4-hour HTML &amp; CSS crash course | . | That is not exactly what flex does. It specifies how any remaining space is distributed, after elements have taken up their normal width. This means that you could end up with elements of uneven width if there is little remaining space or one is much wider than the others.¬†&#8617; . | . ",
    "url": "/labs/lab02/#css-resources",
    "relUrl": "/labs/lab02/#css-resources"
  },"29": {
    "doc": "Help Us Help You: Things to try before asking for help",
    "title": "Help Us Help You: Things to try before asking for help",
    "content": ". | Help Us Help You: Things to try before asking for help . | Prevention . | Develop with the browser dev tools open! | Understand what code does | Use correct formatting | . | Investigation . | General advice: Reducing the issue | Problem 1: The page looks wrong | Problem 2: The code doesn‚Äôt work in the way I expect | Problem 3: 500 error | . | Debugging tools . | The Console | HTML validator | Dev tools Elements panel | Console API | debugger statement | Sources panel | . | Resolution | Conclusion | . | . Inevitably, you will run into cases where your code does not produce the expected result. These are called bugs. The process of investigating and fixing these bugs is called debugging. The vast majority of the time spent programming is actually spent debugging, especially when you are just starting out. But even seasoned programmers spend far more time debugging than writing code. Debugging consists of three steps: 0. Prevention: The things you do to minimize bugs and/or make debugging easier. | Investigation: What is the issue? What is the code supposed to do, and what is it actually doing? | Resolution: Fixing the problem | . ",
    "url": "/labs/debugging/#help-us-help-you-things-to-try-before-asking-for-help",
    "relUrl": "/labs/debugging/#help-us-help-you-things-to-try-before-asking-for-help"
  },"30": {
    "doc": "Help Us Help You: Things to try before asking for help",
    "title": "Prevention",
    "content": "Prevention consists of adopting good development habits that will either minimize the number of bugs you introduce in the first place, or stop them in their tracks. Develop with the browser dev tools open! . I really cannot stress this enough. If stuff is not working, the browser dev tools and especially the console is the first place you look for clues. In fact, most seasoned web developers have dev tools continuously open while working. If you see errors in the console, do not ignore them. Even if they don‚Äôt seem to be related to the issue you‚Äôre investigating, they could be a symptom of a larger problem. Understand what code does . Do not copy and paste code without understanding what it does. If we don‚Äôt expect you to understand it, we‚Äôll usually say so. If we give you an entire file or function to copy, it‚Äôs typically because it doesn‚Äôt matter to understand it (but it‚Äôs still beneficial to try). But in all other cases, you should understand what the code is doing and why. We give you code because it‚Äôs easier to understand existing code and tweak it than to write it from scratch, not to save you the effort of understanding it. If you don‚Äôt understand what you‚Äôre doing and why, you may still be able to guess where things go and move through the steps, but the mismatch between your mental model and what is actually happening will compound as you move through the lab making every step harder than the previous one. If there are parts of syntax you don‚Äôt understand, it can be hard to google for things. For example, suppose you get to Step 3.3 of Lab 9 and don‚Äôt understand this line: . label ??= Object.entries(wedges).find(([label, w]) =&gt; w === wedge)[0]; . Object.entries() and array.find() is easy to google for, but how do you google for ??= or the ([label, w]) syntax?! That‚Äôs what AI is excellent for! . You could blanket ask it to explain this line of code: . Asking ChatGPT to explain a specific line of code (but other AI assistants are similar). Or, you could ask about specific things you don‚Äôt understand, which tends to give you the answer faster: . Asking ChatGPT to explain a specific part of syntax (but other AI assistants are similar).. GitHub Copilot Chat even has a menu option for this: . This was the result: . Do note that every time you use AI for anything, it‚Äôs crucial to fact-check it. If you ask it to explain syntax you don‚Äôt understand, take the terms it gives you (in this case ‚Äúlogical nullish assignment operator‚Äù) and google them to see if they are correct. Use correct formatting . It‚Äôs very hard to understand what your code is doing if it‚Äôs not formatted correctly. Especially indentation is very important as it shows the structure and hiearchy of your code. | In HTML, if element contents span multiple lines, indent them (unless you have a reason not to). | In JS, indent the contents of functions, loops, and conditionals. | In CSS indent declarations (the property-value pairs inside the {...}) and nested rules. | . Formatting is meant to help readability, not hinder it. There are cases where not indenting actually improves readability, e.g. in HTML, since everything is inside &lt;html&gt;. If you find it hard to maintain good formatting manually, many developers use Prettier to automatically format their code when they save. It doesn‚Äôt give you much flexibility, but is way better than poorly formatted code. VS Code also has a built-in formatter that you can enable in the settings, or call it on a case-by-case basis by opening the Command Palette (Ctrl+Shift+P) and typing Format Document. While a lot of code formatting is a matter of personal preference, and the main rule is that it‚Äôs consistent, there is one exception: those of you who are familiar with other languages, may be used to code styles where the { is placed in a new line (Allman style): . function foo() { // code } . Don‚Äôt do this in JS. Because of semicolon insertion, this can lead to subtle bugs. If you don‚Äôt like the loss of control that automated formatters require, you should use a linter like ESLint or stylelint to ensure that the code style you prefer is followed consistently. ",
    "url": "/labs/debugging/#prevention",
    "relUrl": "/labs/debugging/#prevention"
  },"31": {
    "doc": "Help Us Help You: Things to try before asking for help",
    "title": "Investigation",
    "content": ". Quote by Filipe Fortes . Investigation can be broken down further: . | Narrowing Down: What part of the code is causing the problem? | Understanding: Why is the code not working as expected? | . Both typically involve making a series of hypotheses, and testing them to see if they are true. In this section, we will discuss strategies for both. The very first step for most issues is to look at the console and the terminal where you ran npm run dev, both of which should already be open if you followed the prevention steps and check for errors. General advice: Reducing the issue . In the next few sections, we will discuss strategies for specific types of problems. This is a strategy that works regardless of the type of issue you are debugging. Generally, the less code you‚Äôre dealing with, the easier debugging becomes. In most cases, the issue is not in the entire codebase, but in a tiny part of it. The Narrowing Down phase is about figuring out what part of the code is causing the issue. If you have a hypothesis about this, you can verify it by removing or commenting out that part of the code and seeing what happens ‚Äî or removing everything else and making sure that the bug still reproduces. If not, there is always the ‚Äúbrute force approach‚Äù, where you simply start removing parts of the code until the issue goes away. This may involve: . | Commenting out entire sections of code | Replacing API calls and computed values with hardcoded values | Removing event listeners | Replacing entire components | Using the component with the issue in isolation on a new page | . This is often called ‚ÄúCreating a reduced testcase‚Äù and is also a great process to follow when reporting a bug with one of the tools you‚Äôre using. Here are some excellent guides on this exact process: . | Test Case Reduction - WebKit | Reduced Test Cases - CSS Tricks | . Code playgrounds can be excellent for creating reduced testcases: . | Svelte REPL for Svelte | CodePen for HTML, CSS, and JS | . Problem 1: The page looks wrong . The first step if things don‚Äôt quite look right is to verify the HTML structure is what we expect. In some cases, especially if you are just getting started with HTML, and before you start using Svelte, the HTML validation can uncover a lot of issues. However, HTML that is not quite what you expect is not necessarily invalid, in which case neither Svelte, nor a validator would catch the issue. In that case, the Elements panel is the place to be. It can help you both understand the structure of the page, and see the CSS that is actually applied to each element. This will immediately resolve issues like: . | Declarations not being applied, either because the property or value is invalid, or because the property only applies to certain elements or when certain other properties have certain values | CSS selectors not matching the elements you expect | . Problem 2: The code doesn‚Äôt work in the way I expect . It‚Äôs a common misconception that we develop a website by slowly getting it to converge to the final state. Think of it instead like a building site: there is scaffolding and tools everywhere while the building is still building built. It‚Äôs ok for development to look messy while we are still building. Assuming there are no errors, the first step is to understand what the current state is. What are the values of all intermediate variables? What is each function returning? . For HTML &amp; CSS, we can use the Elements panel to see the CSS that is currently applied to each element and the current structure of the DOM tree. For transitions &amp; animations, it helps to set their duration to a very high value (e.g. 3s) as you‚Äôre developing them, so that it‚Äôs very clear what is actually happening. But for JS, the process is a bit more involved. We need to think like a computer: start from the beginning of the code and follow it through, keeping track of the values of all variables in your head. Then we want to make sure that the values are what we expect them to be at each step. If the code we are trying to inspect is not called very frequently, we can use console.log() statements with variables to see what their values are. If the value we are logging is an object, it will be logged as a reference to the object, not its value. This means we will be seeing the current value of the object, not the value at the time of the console.log() statement. To see current values, we need to log a copy of the object, e.g. console.log({...myObject}), or specific values, e.g. console.log(myObject.myProperty). VS Code allows us to just type log and then hit Tab to get a console.log() statement with the caret between the parentheses, which can be great for quickly logging things. In some cases you may need to rewrite code a bit to make this possible. For example, assume you have an arrow function that just returns a value: . let interpolator = (t) =&gt; someFunction(t); . If you want to log the return value, you‚Äôd need to do something like this: . let interpolator = (t) =&gt; { let result = someFunction(t); console.log(result); return result; }; . Or you can define a log() function that returns its first argument: . function log(...args) { console.log(...args); return args[0]; } . And then you can just wrap values with it: . let interpolator = (t) =&gt; log(someFunction(t)); . However, if the code is called very frequently, it would be hard to wade through hundreds of log messages. For example, assume we were working on Step 3.4 of Lab 9 and trying to debug why our interpolator didn‚Äôt work as we expected by logging the CSS we are applying. We‚Äôd get something like this: . Good luck wading through all these logs! . In that case, when using Svelte, we can simply print values in the HTML, by using something like { myVariable } if it‚Äôs a primitive, or something like { JSON.stringify(myVariable) } if it‚Äôs an object. The downside is that we don‚Äôt get historical values, but the upside is that we can see the value right now as it changes. Don‚Äôt forget to clean up after you‚Äôve found &amp; fixed the bug, by removing these expressions and/or log statements! . Lastly, if none of these helps zero in on the issue completely, it may be time for the big guns: the debugger statement and the Sources panel. These allow us to execute our code, see the values of all local variables at each point, and even stop it at certain points and experiment. Problem 3: 500 error . If you‚Äôre lucky, when you make a mistake with Svelte, you will get a nice error display like this: . However, other times you will only get something like this: . In that case, the first step is to look at the terminal panel where you ran npm run dev to see what the actual error is. If the issue is in the JS, it could be easy to read: . However, if the issue is in your Svelte HTML, you may have to wade through your entire component code to get to the actual error: . In this case the actual error is the red text at the top: Element with a slot='...' attribute must be a child of a component or a descendant of a custom element ",
    "url": "/labs/debugging/#investigation",
    "relUrl": "/labs/debugging/#investigation"
  },"32": {
    "doc": "Help Us Help You: Things to try before asking for help",
    "title": "Debugging tools",
    "content": "Here we describe the tools you can use to investigate and resolve issues. There are links to these in the text above, but going through this section by itself may be useful for those with more experience, or as a quick reference after you have read the whole guide. The Console . The console is is the second tab in your browser dev tools. It looks like this: . Among other things, the console will show you: . | JS errors | Failed HTTP requests (e.g. file not found) | Some HTML errors (e.g. invalid value for certain attributes) | . Why doesn‚Äôt the browser just notify me when there are errors on the page? . The browser doesn‚Äôt know you‚Äôre the website developer, and most web users don‚Äôt want to know about JS errors on websites they visit. In fact, early browsers did report them to users, but that went away as browser UIs became more user-friendly, and started targeting less technical folk. In fact, most websites you visit on a daily basis have a cornucopia of JS errors and you‚Äôd never know about them unless you open the browser console. HTML validator . The W3C HTML validator is a tool that checks your HTML for errors. You can provide your HTML to it by uploading it, giving it a URL, or perhaps most usefully when developing, pasting it in directly. Svelte markup will throw the validator off, so this becomes less useful as we start using Svelte. You can still validate Svelte‚Äôs output, but depending on how much of your code is rendered by the build process, this can be more or less useful. The silver lining is that Svelte also catches some HTML issues itself and then they become 500 errors. Dev tools Elements panel . It looks like this: . It can help you catch issues in a number of ways. First, it helps you explore the DOM structure by expanding and collapsing element contents. This can be very helpful when your elements are not nested in the way you expect, which can be hard to see in source code alone. But the elements panel is especially useful to show you the CSS currently applied, which is done in several ways: . | As you hover over each element, it is highlighted and its box model is shown (orange for margin, purple for padding). | If the element is a grid or flex container, its layout is shown as well. | The right panel shows you all the CSS rules that currently apply to the element, whether they come from your CSS or the browser‚Äôs, and which ones are overridden by others. | . The CSS panel shows a bunch of things: . | The CSS rules that apply to the element, and where they come from (your CSS, browser defaults, etc.) | The computed styles, which are the final styles that apply to the element after all the rules are applied | The box model, which shows you the padding, border, and margin of the element | Which CSS properties are being overridden by others? | Which CSS properties are inherited from ancestors? | Which CSS properties are invalid and thus ignored? | Which CSS properties are being ignored because of the values of other properties? For example, Flexbox properties like flex and flex-* have no effect if display is not flex or inline-flex. Note that the dependencies between CSS properties are more complex than the dev tools can show, so this will not uncover all such issues. | . If the issue you are investigating only happens during certain user actions (e.g. :hover), you can simulate those actions: . It also allows you to edit the CSS in real time and see the page update. This can be incredibly useful both in the investigation and resolution phases. Keep in mind that the browser cannot possibly update your source code, so if you refresh you will lose your changes ‚Äî you need to remember to copy them over! However, you can see this as a feature, not a bug: you can try out changes in a non-destructive way. In addition to editing properties and values, it allows you to quickly remove declarations to see what will happen (which is very useful in the investigation phase) . Console API . The Console API is a set of functions you can use in your JS code to log messages to the console. The one you would be using most often is console.log() which logs a message to the console. However, console.trace() can also be useful if you can‚Äôt understand why a certain function is being called. debugger statement . The debugger; statement allows you to stop execution of your code and inspect its current state, as well as the call stack, i.e. how you got there. E.g. suppose we‚Äôre working on step 3.4 of Lab 9 and want to debug why our interpolator didn‚Äôt work as we expected. We could add console.log() statements with all the local variables or print them out using Svelte expressions, but in some cases, especially when we have a lot of variables or simpler methods have failed to narrow down the issue, there is a better way: the debugger. You can add a debugger; statement to stop your code at any point and inspect its current state in the Sources panel. You can hover over any variable and see its current value. It looks like this: . The debugger; statement works like any other JS statement, meaning you can put it inside conditionals as well: . if (someCondition) { debugger; } . These statements create breakpoints in your code, which are points where the code execution stops. You can also set breakpoints manually in the Sources panel, without modifying the code. Sources panel . In the previous section we saw how to use debugger; statements to inspect the state of our code at any point in time. However, the Sources panel does a lot more than that. It also allows us to step through our code, meaning we can execute it line by line and see the state of our variables at each point. To step through our code, we use this toolbar at the top right: . Here‚Äôs what the icons mean: . | Resume execution: Continue executing the code until the next breakpoint or the end of the script. | Buttons 2-5 are all about stepping through the code, i.e. executing the current line and moving to the next one. However, there are different ways you may want to do that, mainly around how low-level you want your inspection to be: do you actually want to see the state within each function called in your code, or only the one you are currently in? . | Step over next function call: This stays within the function you are currently inspecting, without moving into other functions being called. This is the most high level of them all, and the one I suggest you start with. It helps you to get a higher level overview of what is happening in your code, without having to suffer through every single line. | Step into next function call: If the current line is a function call, move into the function and execute the first line. | Step out of current function: Execute the rest of the current function and move to the next line after the function call. This is very useful when you realize you don‚Äôt actually care about the function you‚Äôre in and you know the bug is not there, effectively helping you reverse the decision to step into. | Step: Execute the current line and move to the next one, whether that is in another function or in the current one. | . | Deactivate breakpoints: This will deactivate all breakpoints in your code, so that it will run without stopping at any of them. This is useful when you have a lot of breakpoints and you want to run the code without stopping at any of them. | . It also shows you the call stack, which is the list of functions that have been called to get to the current point. For example, suppose we‚Äôre working on step 3.4 of Lab 9 and we want to figure out if the interpolator function was called from a D3 Transition or a Svelte transition. We can look at the call stack, and click on the function that called it (css): turns out it was a Svelte transition this time! . Keep in mind that when async code is involved, the call stack may not be as useful as you‚Äôd like. ",
    "url": "/labs/debugging/#debugging-tools",
    "relUrl": "/labs/debugging/#debugging-tools"
  },"33": {
    "doc": "Help Us Help You: Things to try before asking for help",
    "title": "Resolution",
    "content": "In most cases, &gt;99% of debugging time is spent narrowing down the problem, and the resolution is typically pretty simple, and often takes seconds (e.g. changing a variable name). There is one exception: when the bug is not in our code, but in one of the tools we‚Äôre using (D3, Svelte, Mapbox, etc.) or even the browser itself (browsers have bugs too ‚Äî thousands of them!) In those cases, the right thing to do is to make sure that a bug report already exists, and if not to file one. Make sure to include a reduced testcase in your bug report (see Reducing the issue above on how to create one). Reduce very aggressively, as a rule of thumb, most testcases are less than 10 lines of (non-boilerplate) code. However, we usually cannot wait for a fix, so we need to find a workaround. This means that we need to find a way to get the same functionality, but in a different way that doesn‚Äôt trigger the bug. Finding a good workaround often involves exactly the same steps as investigating the bug in the first place: narrowing down the issue, understanding why it happens, and what exactly triggers it (make sure to include all your findings in the bug report to save the developers time and increase the odds it may be fixed soon). For example, in lab 9 we had to work around a bug in Svelte‚Äôs animate directive. A quick investigation revealed many bug reports around similar issues, so we decided not to file another one. To investigate the bug, we clicked on flip from replaced import {flip} from 'svelte/animate'; to get the flip source code, then pasted it as a plain function in our own code. Then started adding console.log() statements. We found that the problem was related to the part that is executed before each transition only getting executed once (instead of once per transition), so the positions it was capturing were getting progressively more and more out of sync. A workaround was to try and fool Svelte into thinking that every time we were transitioning, we were using a brand new function: . import { flip as originalFlip } from 'svelte/animate'; function getFlip() { return originalFlip; } // This will get called every time files changes: $: flip = getFlip(files); . Workarounds are fragile. They may break with future updates to the library, or they may not work in all cases. E.g. in this case, if Svelte updates to be smarter abound dependencies and realize that getFlip() returns the same function every time, our workaround will break. This is why it‚Äôs important to report these bugs, so they can be fixed in the long term. Workarounds should be seen as a temporary bandaid, not a long-term solution. In some cases, even the underlying technologies can be buggy! For example, when I was working on Lab 9 I reported the default SVG arc interpolation as a bug. ",
    "url": "/labs/debugging/#resolution",
    "relUrl": "/labs/debugging/#resolution"
  },"34": {
    "doc": "Help Us Help You: Things to try before asking for help",
    "title": "Conclusion",
    "content": "Debugging is the least fun part of programming, despite it also being the biggest chunk of it. Especially in the beginning, it‚Äôs absolutely normal to spend about 5% writing code and 95% debugging it. But even as you gain experience, debugging will often occupy around 70% of your time developing anything. Even seasoned programmers are _surprised_ when their code works the first time. Image source: [5 traits to go from Junior to Senior Software Engineer - DEV Community](https://dev.to/jenesh/5-traits-to-go-from-junior-to-senior-software-engineer-11ol) It‚Äôs important to remember that everyone spends a fair bit time debugging, even programmers with decades of experience. Programming is a completely different communication paradigm than anything else we do. Natural (human) languages are full of ambiguity. There is so much that is simply implied in every sentence, and the other humans can just infer it. In programming, we have to tell the computer exactly what to do, with detailed steps that leave no room for ambiguity. This can be very hard as it goes against everything we have ever learned about communication! . AI may change this in the future, there are a lot of efforts to make programming more like natural language, but we‚Äôre not there yet. Never feel like making mistakes and having to debug them is a personal failing of yours. It‚Äôs a crappy part of programming, but one that we all go though. ",
    "url": "/labs/debugging/#conclusion",
    "relUrl": "/labs/debugging/#conclusion"
  },"35": {
    "doc": "Help Us Help You: Things to try before asking for help",
    "title": "Help Us Help You: Things to try before asking for help",
    "content": " ",
    "url": "/labs/debugging/",
    "relUrl": "/labs/debugging/"
  },"36": {
    "doc": "Lab 7: Visualizing quantitative data with D3",
    "title": "Lab 7: Visualizing quantitative data with D3",
    "content": "In this lab, we will learn: . | How do we draw visualizations for quantitative data, such as bar charts and scatter plots, using D3 | How to show tooltips on hover as a way to provide more information about the data | How to compute summary statistics about our data in a structured a way | . | Lab 7: Visualizing quantitative data with D3 . | Check-off | Questions Doc | Slides (or lack thereof) | Step 0: Setting up . | Step 0.1: Adding a new page with meta-analysis of the code in our project | Step 0.2: Adding code analysis script | Step 0.3: Setting it up so that the CSV file is generated on every build | Step 0.4: Exclude CSV from committed files. | . | Step 1: Displaying summary stats . | Step 1.1: Reading the CSV file in D3 | Step 1.2: Computing commit data | Step 1.3: Displaying the stats . | Aggregates over the whole dataset | Number of distinct values | Grouped aggregates | Min/max value | . | . | Step 2: Visualizing time and day of commits in a scatterplot . | Step 2.1: Drawing the dots | Step 2.2: Adding axes | Step 2.3: Adding horizontal grid lines | . | Step 3: Adding a tooltip . | Step 3.1: Static element | Step 3.2: Making it look like a tooltip | Step 3.3: Making only appear when we are hovering over a dot | Step 3.4: Positioning the tooltip near the mouse cursor | Step 3.5: Bulletproof positioning (optional) | . | Step 4: Communicating lines edited via the size of the dots (optional) . | Step 4.1: Calculating our scale | Step 4.2: Area, not radius | Step 4.3: Paint smaller dots over larger ones | . | Step 5: Brushing . | Step 5.1: Setting up the brush | Step 5.2: Getting our tooltips back | Step 5.3: Styling the selection rectangle (optional) | Step 5.4: Making the brush actually select dots | Step 5.4: Showing count of selected commits | Step 5.5: Showing breakdown of languages across all lines edited in selected commits | Step 5.6: Drawing a pie chart of the language breakdown | . | . | . ",
    "url": "/labs/lab07/",
    "relUrl": "/labs/lab07/"
  },"37": {
    "doc": "Lab 7: Visualizing quantitative data with D3",
    "title": "Check-off",
    "content": "You need to come to TA Office Hours to get checked off for this lab (any of them, no appointment needed). Please fill in the check-off form at labs/7/checkoff before your check-off. Ideally you should fill in the form right before your check-off, but it‚Äôs ok if you fill it out in advance. Filling out the form is a necessary but not sufficient condition to get checked-off. You still need to come to office hours in person for your check-off to be processed. You could even fill it out before you finish the lab, since we won‚Äôt look at it until your check-off, but the closer to the end of the lab you fill it out, the more meaningful your feedback will be. ",
    "url": "/labs/lab07/#check-off",
    "relUrl": "/labs/lab07/#check-off"
  },"38": {
    "doc": "Lab 7: Visualizing quantitative data with D3",
    "title": "Questions Doc",
    "content": "Add questions to the questions doc throughout the lecture and lab! After lab, come to office hours or ask on Discourse for futher questions! . ",
    "url": "/labs/lab07/#questions-doc",
    "relUrl": "/labs/lab07/#questions-doc"
  },"39": {
    "doc": "Lab 7: Visualizing quantitative data with D3",
    "title": "Slides (or lack thereof)",
    "content": "Just like the previous lab, there are no slides for this lab! Since the topic was covered in last Monday‚Äôs lecture, it can be helpful for you to review the material from it. This lab is a little more involved than most of the previous labs, because it‚Äôs introducing the core technical material around data visualization. A robust understanding of these concepts will be invaluable as you work on your final projects, so spending time practicing them for the lab will be time will spent. ",
    "url": "/labs/lab07/#slides-or-lack-thereof",
    "relUrl": "/labs/lab07/#slides-or-lack-thereof"
  },"40": {
    "doc": "Lab 7: Visualizing quantitative data with D3",
    "title": "Step 0: Setting up",
    "content": "This step takes you through several prepratory steps before we can work on the main part of the lab. Step 0.1: Adding a new page with meta-analysis of the code in our project . In this lab, we will be computing and visualizing different stats about our codebase. We will display these in a new page on our website. Create a routes/meta/+page.svelte file and add some content in it (e.g. a heading, a description). Add it to your navigation menu. Step 0.2: Adding code analysis script . In this step you will install our code analysis script which will analyze the code of our app and display some statistics about it. If you‚Äôre interested in the details of how this script works, you can examine its code in its repo. It‚Äôs just some JS code that runs in Node.js :) (and it‚Äôs not that long either!) . First, open the terminal and run this, to install the package that will do the analysis: . npm install elocuent -D . Now in your terminal, run this command: . npx elocuent -d static,src -o static/loc.csv . Or this, if you‚Äôve used spaces for indentation (replace 2 with the number of spaces): . npx elocuent -d static,src -o static/loc.csv --spaces 2 . Make sure your indentation is consistent across your code! . Two very popular tools to ensure a consistent code style are ESLint (JS only) and Prettier (JS, CSS, HTML) They have different philosophies: ESLint is a linting tool: you define what rules you want to follow, and it warns you when you don‚Äôt follow them (often it can fix them too, but you need to explicitly ask it to). Prettier is a code formatter: when you hit Save it auto-formats your code based on its predefined rules. Linters give you more control, whereas code formatters are more hands-off but also less flexible. If everything went well, you should now have a file called loc.csv in the static directory. Its content should look like this (showing first 30 lines): . First 30 lines of loc.csv file,line,type,commit,author,date,time,timezone,datetime,depth,length src/app.html,1,html,7d3b906,Lea Verou,2024-02-26,01:33:51,-05:00,2024-02-26T01:33:51-05:00,0,15 src/app.html,2,html,7d3b906,Lea Verou,2024-02-26,01:33:51,-05:00,2024-02-26T01:33:51-05:00,0,16 src/app.html,3,html,7d3b906,Lea Verou,2024-02-26,01:33:51,-05:00,2024-02-26T01:33:51-05:00,1,5 src/app.html,4,html,7d3b906,Lea Verou,2024-02-26,01:33:51,-05:00,2024-02-26T01:33:51-05:00,2,22 src/app.html,5,html,7d3b906,Lea Verou,2024-02-26,01:33:51,-05:00,2024-02-26T01:33:51-05:00,2,26 src/app.html,6,html,7d3b906,Lea Verou,2024-02-26,01:33:51,-05:00,2024-02-26T01:33:51-05:00,2,55 src/app.html,7,html,7d3b906,Lea Verou,2024-02-26,01:33:51,-05:00,2024-02-26T01:33:51-05:00,2,68 src/app.html,8,html,3c2ea132,Lea Verou,2024-03-02,15:26:34,-05:00,2024-03-02T15:26:34-05:00,2,59 src/app.html,9,html,04217ac3,Lea Verou,2024-02-27,14:46:20,-05:00,2024-02-27T14:46:20-05:00,2,64 src/app.html,10,html,7d3b906,Lea Verou,2024-02-26,01:33:51,-05:00,2024-02-26T01:33:51-05:00,2,14 src/app.html,11,html,7d3b906,Lea Verou,2024-02-26,01:33:51,-05:00,2024-02-26T01:33:51-05:00,1,6 src/app.html,12,html,7d3b906,Lea Verou,2024-02-26,01:33:51,-05:00,2024-02-26T01:33:51-05:00,1,41 src/app.html,13,html,7d3b906,Lea Verou,2024-02-26,01:33:51,-05:00,2024-02-26T01:33:51-05:00,2,51 src/app.html,14,html,7d3b906,Lea Verou,2024-02-26,01:33:51,-05:00,2024-02-26T01:33:51-05:00,1,6 src/app.html,15,html,7d3b906,Lea Verou,2024-02-26,01:33:51,-05:00,2024-02-26T01:33:51-05:00,0,7 src/routes/+page.svelte,1,svelte,7d3b906,Lea Verou,2024-02-26,01:33:51,-05:00,2024-02-26T01:33:51-05:00,0,21 src/routes/+page.svelte,2,svelte,7d3b906,Lea Verou,2024-02-26,01:33:51,-05:00,2024-02-26T01:33:51-05:00,0,43 src/routes/+page.svelte,3,svelte,7d3b906,Lea Verou,2024-02-26,01:33:51,-05:00,2024-02-26T01:33:51-05:00,0,40 src/routes/+page.svelte,4,svelte,7d3b906,Lea Verou,2024-02-26,01:33:51,-05:00,2024-02-26T01:33:51-05:00,1,102 src/routes/+page.svelte,5,svelte,7d3b906,Lea Verou,2024-02-26,01:33:51,-05:00,2024-02-26T01:33:51-05:00,1,76 src/routes/+page.svelte,6,svelte,7d3b906,Lea Verou,2024-02-26,01:33:51,-05:00,2024-02-26T01:33:51-05:00,1,39 src/routes/+page.svelte,7,svelte,bdb6236e,Lea Verou,2024-02-26,03:26:16,-05:00,2024-02-26T03:26:16-05:00,0,4 src/routes/+page.svelte,8,svelte,bdb6236e,Lea Verou,2024-02-26,03:26:16,-05:00,2024-02-26T03:26:16-05:00,0,0 src/routes/+page.svelte,9,svelte,bdb6236e,Lea Verou,2024-02-26,03:26:16,-05:00,2024-02-26T03:26:16-05:00,0,8 src/routes/+page.svelte,10,js,04217ac3,Lea Verou,2024-02-27,14:46:20,-05:00,2024-02-27T14:46:20-05:00,0,42 src/routes/+page.svelte,11,js,5c703cf0,Lea Verou,2024-02-27,19:56:10,-05:00,2024-02-27T19:56:10-05:00,0,44 src/routes/+page.svelte,12,js,50612a03,Lea Verou,2024-03-05,11:11:52,-05:00,2024-03-05T11:11:52-05:00,0,68 src/routes/+page.svelte,13,js,50612a03,Lea Verou,2024-03-05,11:11:52,-05:00,2024-03-05T11:11:52-05:00,0,19 src/routes/+page.svelte,14,js,50612a03,Lea Verou,2024-03-05,11:11:52,-05:00,2024-03-05T11:11:52-05:00,1,8 . You can find a description of the metadata stored here. Why are we using CSV instead of e.g. JSON? CSV is more efficient for data that has many rows, since we don‚Äôt need to repeat the names of the properties for every row. Do periodically re-run the script as you work through the lab to see the data update! . Step 0.3: Setting it up so that the CSV file is generated on every build . We want the CSV file to be generated every time we build our app, so that it‚Äôs always up-to-date. We can do that by adding a prebuild script to our package.json that runs npx elocuent. Right above this line in package.json: . \"build\": \"vite build\", . add: . \"prebuild\": \"npx elocuent -d static,src -o static/loc.csv\", . We also need make sure that our build environment (which we specify in deploy.yml) has access to all of our Git history. To do this, open .github/workflows/deploy.yml and modify the Checkout step so that it looks like this: . - name: Checkout uses: actions/checkout@v4 with: fetch-depth: '0' . fetch-depth: '0' tells GitHub actions to fetch all history for all branches and tags. By default, the action will only fetch the latest commit, so your deployed scatterplot will only have one dot! . Now, every time we run npm run build, elocuent will be run first. Step 0.4: Exclude CSV from committed files. Since we are now generating the script on the server as well, there is no reason to include it in our commits. Add static/loc.csv to your .gitignore file. If you have already committed it, you will need to first delete the file, commit &amp; push the deletion and the addition to .gitignore, and only after that re-run the script to re-generate it. ",
    "url": "/labs/lab07/#step-0-setting-up",
    "relUrl": "/labs/lab07/#step-0-setting-up"
  },"41": {
    "doc": "Lab 7: Visualizing quantitative data with D3",
    "title": "Step 1: Displaying summary stats",
    "content": "Step 1.1: Reading the CSV file in D3 . In our routes/meta/+page.svelte file, we will now read the CSV file. Thankfully, we don‚Äôt have to reinvent the wheel and parse CSV files ourselves, D3 has a built-in function for that. Add a &lt;script&gt; element to the Meta page, and import D3, like you did in the previous lab: . import * as d3 from 'd3'; . We will be using the d3.csv() function from the d3-fetch module, which provides helper functions for fetching data. Now let‚Äôs read the CSV file: . import { onMount } from 'svelte'; let data = []; onMount(async () =&gt; { data = await d3.csv('loc.csv'); }); . and let‚Äôs print out the total lines of code in our repo in the HTML to make sure it worked: . &lt;p&gt;Total lines of code: {data.length}&lt;/p&gt; . If everything went well, you‚Äôll be seeing something like this: . To see the structure of these objects, add a console.log(data) right after the statement that sets the variable, then check your console. You should be seeing something like this(I‚Äôve expanded the first row): . Note that everything is a string, including the numbers and dates. That can be quite a footgun when handling data *(as an anecdote, I spent about an hour debugging an issue caused by using + to add two numbers together, which instead concatenated them as strings while developing this very lab!*). To fix it, we add a row conversion function: . data = await d3.csv('loc.csv', (row) =&gt; ({ ...row, line: Number(row.line), // or just +row.line depth: Number(row.depth), length: Number(row.length), date: new Date(row.date + 'T00:00' + row.timezone), datetime: new Date(row.datetime), })); . It should now look like this: . Don‚Äôt forget to delete this line now that we‚Äôre done ‚Äî we don‚Äôt want to clutter our page with debug info! . Step 1.2: Computing commit data . Notice that while this data includes information about each commit1 (that still has an effect on the codebase), it‚Äôs not in a format we can easily access, but mixed in with the data about each line (this is called denormalized data). Let‚Äôs extract this data about commits in a separate object for easy access. We will compute this inside onMount after reading the CSV file. First, define a commits variable outside onMount: . let commits = []; . Then, inside onMount, we will use the d3.groups() method to group the data by the commit property. commits = d3.groups(data, (d) =&gt; d.commit); . This will give us an array where each element is an array with two values: . | The first value is the unique commit identifier | The second value is an array of objects for lines that have been modified by that commit. | . Print it out with {JSON.stringify(commits, null, \"\\t\")} to see what it looks like! . To transform this into an array of objects about each commit, with a lines property that contains the number of lines that were modified by that commit: . commits = d3 .groups(data, (d) =&gt; d.commit) .map(([commit, lines]) =&gt; { let first = lines[0]; let { author, date, time, timezone, datetime } = first; let ret = { id: commit, url: 'https://github.com/vis-society/lab-7/commit/' + commit, author, date, time, timezone, datetime, hourFrac: datetime.getHours() + datetime.getMinutes() / 60, totalLines: lines.length, }; // Like ret.lines = lines // but non-enumerable so it doesn‚Äôt show up in JSON.stringify Object.defineProperty(ret, 'lines', { value: lines, configurable: true, writable: true, enumerable: false, }); return ret; }); . Check it out by adding console.log(commits) after setting it. In my case it looks like this: . Step 1.3: Displaying the stats . Let‚Äôs get our feet wet with this data by displaying a few more stats. Use a &lt;dl&gt; list that reuses the same formatting as in the stats on your homepage. Avoid copy-pasting the CSS. You can either create a class and define the styling for dl.stats and its children in your style.css file, or create a &lt;Stats&gt; Svelte component that wraps it (I went with the former for simplicity, but the ‚Äúproper‚Äù way is the latter). Delete the paragraph we added in the previous step and display that as the first stat: . &lt;dl class=\"stats\"&gt; &lt;dt&gt;Total &lt;abbr title=\"Lines of code\"&gt;LOC&lt;/abbr&gt;&lt;/dt&gt; &lt;dd&gt;{data.length}&lt;/dd&gt; &lt;/dl&gt; . You can display the total number of commits as the second statistic. What other aggregate stats can you calculate about the whole codebase? Here are a few ideas (pick 3-4 from the list below, or come up with your own): . | Number of files in the codebase | Maximum file length (in lines) | Longest file | Average file length (in lines) | Average line length (in characters) | Longest line length | Longest line | Maximum depth | Deepest line | Average depth | Average file depth | Time of day (morning, afternoon, evening, night) that most work is done | Day of the week that most work is done | . Example of a summary stats section You will find the d3-array module very helpful for these kinds of computations, and especially: . | Summarizing data | Grouping data | . Following is some advice on how to calculate these stats depending on their category. Aggregates over the whole dataset . These compute an aggregate (e.g. sum, mean, min, max) over a property across the whole dataset. Examples: . | Average line length | Longest line | Maximum depth | Average depth | . These involve using one of the data summarization methods over the whole dataset, mapping to the property you want to summarize, and then applying the method. For example, to calculate the maximum depth, you‚Äôd use d3.max(data, d =&gt; d.depth). To calculate the average depth, you‚Äôd use d3.mean(data, d =&gt; d.depth). Number of distinct values . These compute the number of distinct values of a property across the whole dataset. Examples: . | Number of files | Number of authors | Number of days worked on site | . To calculate these, you‚Äôd use d3.group() / d3.groups() to group the data by the property you want to count the distinct values of, and then use result.size / result.length respectively to get the number of groups. For example, the number of files would be d3.group(data, d =&gt; d.file).size, (or d3.groups(data, d =&gt; d.file).length). Grouped aggregates . These are very interesting stats, but also the most involved of the bunch. These compute an aggregate within a group, and then a different aggregate across all groups. Examples: . | Average file length (in lines) | Average file depth (average of max depth per file) | . First, we use d3.rollup() / d3.rollups() to compute the aggregate within each group. If it seems familiar, it‚Äôs because we used it in the previous lab to calculate projects per year. For example, to calculate the average file length, we‚Äôd use d3.rollups() to callculate lengths for all files via . $: fileLengths = d3.rollups( data, (v) =&gt; d3.max(v, (v) =&gt; v.line), (d) =&gt; d.file, ); . Then, to find the average of those, we‚Äôd use d3.mean() on the result: . $: averageFileLength = d3.mean(fileLengths, (d) =&gt; d[1]); . Min/max value . These involve finding not the min/max of a property itself, but another property of the row with the min/max value. This can apply both to the whole dataset and to groups. Examples: . | Longest file | Longest line | Deepest line | Time of day (morning, afternoon, evening, night) that most work is done | Day of the week that most work is done | . For example, let‚Äôs try to calculate the time of day that the most work is done. We‚Äôd use date.toLocaleString() to get the time of day and use that as the grouping value: . $: workByPeriod = d3.rollups( data, (v) =&gt; v.length, (d) =&gt; d.datetime.toLocaleString('en', { dayPeriod: 'short' }), ); . Then, to find the period with the most work, we‚Äôd use d3.greatest() instead of d3.max() to get the entire element, then access the name of the period with .[0]: . $: maxPeriod = d3.greatest(workByPeriod, (d) =&gt; d[1])?.[0]; . ",
    "url": "/labs/lab07/#step-1-displaying-summary-stats",
    "relUrl": "/labs/lab07/#step-1-displaying-summary-stats"
  },"42": {
    "doc": "Lab 7: Visualizing quantitative data with D3",
    "title": "Step 2: Visualizing time and day of commits in a scatterplot",
    "content": "Now let‚Äôs visualize our edits in a scatterplot with the time of day as the Y axis and the date as the X axis. Step 2.1: Drawing the dots . First, let‚Äôs define a width and height for our coordinate space in our &lt;script&gt; block: . let width = 1000, height = 600; . Then, in the HTML we add an &lt;svg&gt; element to hold our chart, and a suitable heading (e.g. ‚ÄúCommits by time of day‚Äù): . &lt;svg viewBox=\"0 0 {width} {height}\"&gt; &lt;!-- scatterplot will go here --&gt; &lt;/svg&gt; . And a &lt;style&gt; element to hold styles: . &lt;style&gt; svg { overflow: visible; } &lt;/style&gt; . Now, as shown in the Web-based visualization lecture, we create scales to map our data to the coordinate space using the d3-scale module. We will need two scales: a Y scale for the times of day, and an X scale for the dates. The Y scale (yScale variable) is a standard linear scale that maps the hour of day (0 to 24) to the Y axis (0 to height). But for the X scale (xScale variable), there‚Äôs a few things to unpack: . | Instead of a linear scale, which is meant for any type of quantitative data, We use a time scale which handles dates and times automagically. It works with JS Date objects, which we already have in the datetime property of each commit. | We can use d3.extent() to find the minimum and maximum date in our data in one fell swoop instead of computing it separately via d3.min() and d3.max(). | We can use scale.nice() to extend the domain to the nearest ‚Äúnice‚Äù values (e.g. multiples of 5, 10, 15, etc. for numbers, or round dates to the nearest day, month, year, etc. for dates). | . Once we have both scales, we can draw the scatter plot by drawing circles with the appropriate coordinates inside our &lt;svg&gt; element: . &lt;g class=\"dots\"&gt; {#each commits as commit, index } &lt;circle cx=\"{\" xScale(commit.datetime) } cy=\"{\" yScale(commit.hourFrac) } r=\"5\" fill=\"steelblue\" /&gt; {/each} &lt;/g&gt; . The group (&lt;g&gt;) element is not necessary, but it helps keep the SVG structure a bit more organized once we start adding other visual elements. If we preview at this point, we‚Äôll get something like this: . That was a bit anti-climactic! We did all this work and all we got was a bunch of dots? . Indeed, without axes, a scatterplot does not even look like a chart. Let‚Äôs add them! . Step 2.2: Adding axes . As shown in lecture, the first step to add axes is to create space for them. We define margins in our JS: . let margin = { top: 10, right: 10, bottom: 30, left: 20 }; . Then we adjust our scales to account for these margins by changing: . | The range of the X scale from [0, width] to [margin.left, width - margin.right] | The range of the Y scale from [height, 0] to [height - margin.bottom, margin.top] | . For readability and convenience, you can also define a usableArea variable to hold these bounds, since we‚Äôll later need them for other things too: . let usableArea = { top: margin.top, right: width - margin.right, bottom: height - margin.bottom, left: margin.left, }; usableArea.width = usableArea.right - usableArea.left; usableArea.height = usableArea.bottom - usableArea.top; . Now the ranges become much more readable: . | [usableArea.left, usableArea.right] for the X scale | [usableArea.bottom, usableArea.top] for the Y scale | . Then we create xAxis and yAxis variables in our JS to hold our axes: . let xAxis, yAxis; . and &lt;g&gt; elements that we bind to them: . &lt;g transform=\"translate(0, {usableArea.bottom})\" bind:this={xAxis} /&gt; &lt;g transform=\"translate({usableArea.left}, 0)\" bind:this={yAxis} /&gt; . Make sure these elements come before your dots, since SVG paints elements in the order they appear in the document, and you want your dots to be painted over anything else. Then we use d3.select() to select these elements and apply the axes to them via d3-axis functions: . let xAxis, yAxis; $: { d3.select(xAxis).call(d3.axisBottom(xScale)); d3.select(yAxis).call(d3.axisLeft(yScale)); } . If we view our scatterplot now, we‚Äôll see something like this: . Much better, right? . But how does it work? Right click one of the points in the axes and select ‚ÄúInspect Element‚Äù. You will notice that the ticks are actually &lt;g&gt; elements with &lt;text&gt; elements inside them. Only thing that remains is to actually format the Y axis to look like actual times. We can do that using the axis.tickFormat() method: . d3.select(yAxis).call( d3 .axisLeft(yScale) .tickFormat((d) =&gt; String(d % 24).padStart(2, '0') + ':00'), ); . What is this function actually doing? Let‚Äôs break it down: . | d % 24 uses the remainder operator (%) to get 0 instead of 24 for midnight (we could have done d === 24? 0 : d instead) | String(d % 24) converts the number to a string | string.padStart() formats it as a two digit number Finally, we append \":00\" to it to make it look like a time. | . D3 provides a host of date/time formatting helpers in the d3-time-format module, however for this case, simple string manipulation is actually easier. The result looks like this: . Step 2.3: Adding horizontal grid lines . Axes already improved our plot tenfold (it now looks like an actual scatterplot for one!) but it‚Äôs still hard to see what X and Y values each dot corresponds to. Let‚Äôs add grid lines to make it easier to read the plot at a glance. When adding grid lines, there are a few tradeoffs to consider. You want to make them prominent enough to assist in reading the chart, but not so prominent that they add clutter and distract from the data itself. Err on the side of fewer, fainter grid lines rather than dense and darker ones. We will only create horizontal grid lines for simplicity, but you can easily add vertical ones too if you want (but be extra mindful of visual clutter). Conceptually, there is no D3 primitive specifically for grid lines. Grid lines are basically just axes with no labels and freakishly long ticks. üòÅ . So we add grid lines in a very similar way to how we added axes, but we use the tickSize method to make the lines extend across the whole chart. Just like with the axes, we create a JS variable to hold the axis (I called it yAxisGridlines), and use a reactive statement that starts off identical to the one for our yScale. However, instead of a proper tickFormat() that actually formats axis labels, we use tickFormat(\"\") to remove the labels. Thenm we use the axis.tickSize() method with a tick size of -usableArea.width to make the lines extend across the whole chart (the - is to flip them). We also need to create a &lt;g&gt; element to hold the grid lines. Let‚Äôs give it a class of gridlines so we can style it later: . &lt;g class=\"gridlines\" transform=\"translate({usableArea.left}, 0)\" bind:this=\"{yAxisGridlines}\" /&gt; . Make sure that your &lt;g&gt; element for the grid lines comes before the &lt;g&gt; element for the Y axis, as you want the grid lines to be painted under the axis, not over it. So far, we‚Äôve only recreated our Y axis but without the formatting. How do we turn that into grid lines? First, we will use axis.tickFormat() again, but this time to remove the text: . $: { d3.select(yAxisGridlines).call(d3.axisLeft(yScale).tickFormat('')); } . Then, we use the axis.tickSize() method to make the lines extend across the whole chart: . $: { d3.select(yAxisGridlines).call( d3.axisLeft(yScale).tickFormat('').tickSize(-usableArea.width), ); } . If we look now, we already have grid lines, but they look a bit too prominent. Let‚Äôs add some CSS to fix this: .gridlines { stroke-opacity: 0.2; } . Much better now! . The grid lines before and after `stroke-opacity`. Do not use .gridlines line, .gridlines .tick line or any other descendant selector to style the lines: Svelte thinks it‚Äôs unused CSS and removes it! . Coloring each line based on the time of day, with bluer colors for night times and orangish ones for daytime? üòÅ . ",
    "url": "/labs/lab07/#step-2-visualizing-time-and-day-of-commits-in-a-scatterplot",
    "relUrl": "/labs/lab07/#step-2-visualizing-time-and-day-of-commits-in-a-scatterplot"
  },"43": {
    "doc": "Lab 7: Visualizing quantitative data with D3",
    "title": "Step 3: Adding a tooltip",
    "content": "Even with the gridlines, it‚Äôs still hard to see what each dot corresponds to. Let‚Äôs add a tooltip that shows information about the commit when you hover over a dot. Step 3.1: Static element . First, we‚Äôll render the data in an HTML element, and once we‚Äôre sure eveyrthing works well, we‚Äôll make it look like a tooltip. Similarly to Step 5.2 of the previous lab, when we were selecting a pie wedge, we will now use with a hoveredIndex variable to hold the index of the hovered commit, and a hoveredCommit variable that is reactively updated every time a commit is hovered and holds the data we want to display in the tooltip: . let hoveredIndex = -1; $: hoveredCommit = commits[hoveredIndex] ?? hoveredCommit ?? {}; . Then, in our SVG, we add mouseenter and mouseleave event listeners on each circle: . &lt;!-- Other attributes/directives not shown for brevity --&gt; &lt;circle on:mouseenter={evt =&gt; hoveredIndex = index} on:mouseleave={evt =&gt; hoveredIndex = -1} /&gt; . Ignore the accessibility warnings for now, we will get to them once we get the base functionality working. Now add an element to display data about the hovered commit: . &lt;dl id=\"commit-tooltip\" class=\"info tooltip\"&gt; &lt;dt&gt;Commit&lt;/dt&gt; &lt;dd&gt; &lt;a href=\"{ hoveredCommit.url }\" target=\"_blank\"&gt;{ hoveredCommit.id }&lt;/a&gt; &lt;/dd&gt; &lt;dt&gt;Date&lt;/dt&gt; &lt;dd&gt;{ hoveredCommit.datetime?.toLocaleString(\"en\", {dateStyle: \"full\"}) }&lt;/dd&gt; &lt;!-- Add: Time, author, lines edited --&gt; &lt;/dl&gt; . In the CSS, we add two rules: . | dl.info with grid layout so that the &lt;dt&gt;s are on the 1st column and the &lt;dd&gt;s on the 2nd, remove their default margins, and apply some styling to make the labels less prominent than the values. | .tooltip with position: fixed to it and top: 1em; and left: 1em; to place it at the top left of the viewport so we can see it regardless of scroll status. | . Why not just add everything on a single CSS rule? Because this way we can reuse the .info class for other &lt;dl&gt;s that are not tooltips and the .tooltip class for other tooltips that are not &lt;dl&gt;s. What‚Äôs the difference between fixed and absolute positioning? position: fixed positions the element relative to the viewport, while position: absolute positions it relative to the nearest positioned ancestor (or the root element if there is none). The position offsets are specified via top, right, bottom, and left properties (or their shorthand, inset) In practice, it means that position: fixed elements stay in the same place even when you scroll, while position: absolute elements scroll with the rest of the page. We should also apply some hover styles on the dots, e.g to smoothly make them bigger when hovered we can do something like this: . circle { transition: 200ms; &amp;:hover { transform: scale(1.5); } } . If you preview now, you will see some weirdness (slowed down by 10x): . This is because in SVG by default the origin of transforms is the top left corner of the coordinate system. To fix that and set the origin to the center of the dot itself, we need two properties: . transform-origin: center; transform-box: fill-box; . The hover effect now looks far more reasonable: . Overall, at the end of this step, we should have something like this: . Step 3.2: Making it look like a tooltip . Seeing this info is already useful, but it‚Äôs not really a tooltip yet. There are three components to making our &lt;dl&gt; an actual tooltip: . | Styling it like a tooltip (e.g. giving it a shadow that makes it look raised from the page) | Making it only appear when we are hovering over a dot (Step 3.3) | Positioning it near the mouse cursor (Step 3.4) | . I will do them in that order, but these are largely independent tasks that can be done in either order. If anything, doing 3 before 1 and 2 might help motivate them better. In terms of styling, you should definitely give it a background-color as otherwise the text will be hard to read. You can either go for a solid color (e.g. white) or a semi-transparent color (e.g. oklch(100% 0% 0 / 80%)) that will show some of the chart behind it. A few other useful CSS properties are: . | box-shadow for shadows. Avoid overly prominent shadows: you are trying to make it look elevated, not to decorate it. The shadow should not be distracting, but just enough to make it look like it‚Äôs floating above the page. Generally, the larger the blur radius and the more transparent the color, the more raised the element will look. Experiment with different values to see what looks best for your design. | border-radius for rounded corners | backdrop-filter to blur what‚Äôs underneath (frosted glass effect). This is only relevant if you have a semi-transparent background color. | . You would also probably want to add some spacing between its content and the edges of the tooltip, i.e. padding. Example before and after. Step 3.3: Making only appear when we are hovering over a dot . Currently, our tooltip appears even when it has no content, which is quite jarring. It also appears when we are not hovering over any dot, and just shows the previous content. That‚Äôs not too bad when it‚Äôs fixed at the top left of the viewport, but can you picture how annoying this would be if it was an actual tooltip that just won‚Äôt take a hint and go away? . We could wrap the whole tooltip with an {#if hoveredIndex &gt; -1 }...{/if} block and it would work. However, that‚Äôs not very flexible. It makes it hard to use transition effects when the tooltip disappears (because it‚Äôs gone immediately), make it disappear with a delay to allow users to interact with it, or not disappear at all if users are actively interacting with it (hovering it or focusing elements within it). Instead, we will use the HTML hidden attribute: . &lt;dl class=\"info\" hidden={hoveredIndex === -1}&gt; . and add some CSS to hide the element by fading it out: . dl.info { /* ... other styles ... */ transition-duration: 500ms; transition-property: opacity, visibility; &amp;[hidden]:not(:hover, :focus-within) { opacity: 0; visibility: hidden; } } . It should now behave like this: . Step 3.4: Positioning the tooltip near the mouse cursor . Now, the final piece of the puzzle to make this element into an actual tooltip! . Our tooltip is currently positioned at the top left corner of the viewport (actually 1em from the top and 1em from the left) in a hardcoded way, via the top and left properties. To position it near the mouse cursor instead, we need to set these properties dynamically based on the mouse position. Thankfully, the event object on mouse events has several properties that give us the mouse position relative to different things. To get the mouse position relative to the viewport, we can use the x and y properties of the event object. We will declare a new variable in our JS and use it to store the last recorded mouse position: . let cursor = { x: 0, y: 0 }; . Then, we will update it in our mouseenter event listener: . &lt;!-- Other attributes/directives not shown for brevity/clarity --&gt; &lt;circle on:mouseenter={evt =&gt; { hoveredIndex = index; cursor = {x: evt.x, y: evt.y}; }} /&gt; . Print it out in your HTML via {JSON.stringify(cursor, null, \"\\t\")} and move the mouse around to make sure it works! . As with all these debug statements, don‚Äôt forget to remove it once you verify it works. Now let‚Äôs use these to set top and left on the tooltip: . &lt;dl class=\"info\" hidden={hoveredIndex === -1} style=\"top: {cursor.y}px; left: {cursor.x}px\"&gt; . This is the result: . While we directly set top and left for simplicity, we usually want to avoid setting CSS properties directly. It‚Äôs more flexible to set custom properties that we then use in our CSS. For example, assume you wanted to subtly move the shadow as the mouse pointer moves to create more sense of depth (parallax). If we had custom properties with the mouse coordinates, we could just use them in other properties too, whereas here we‚Äôd have to set the box-shadow with inline styles too. Step 3.5: Bulletproof positioning (optional) . Our na√Øve approach to positioning the tooltip near the mouse cursor by setting the top and left CSS properties works well if the tooltip is small and the mouse is near the center of the viewport. However, if the tooltip is near the edges of the viewport, it falls apart. Try it yourself: dock the dev tools at the bottom of the window and make them tall enough that you can scroll the page. Now hover over a dot near the bottom of the page. Can you see the tooltip? . Solving this on our own is actually an incredibly complicated problem in the general case. Thankfully, there are many wonderful packages that solve it for us. We will use Floating UI here. First, we install it via npm: . npm install @floating-ui/dom . Then, we import the three functions we will need from it: . import { computePosition, autoPlacement, offset } from '@floating-ui/dom'; . Just like D3, Floating UI is not Svelte-specific and works with DOM elements. Therefore, just like we did for the axes in Step 4.2, we will use bind:this to bind a variable to the tooltip element: . let commitTooltip; . &lt;!-- Other attributes omitted for brevity --&gt; &lt;dl class=\"info\" bind:this=\"{commitTooltip}\"&gt;&lt;/dl&gt; . Then, we will use computePosition() to compute the position of the tooltip based on the mouse position and the size of the tooltip. This function returns a Promise that resolves to an object with properties like x and y that we can use in our CSS instead of cursor. Therefore, let‚Äôs create a new variable to hold the position of the tooltip that we will update in our mouseenter event listener.: . let tooltipPosition = { x: 0, y: 0 }; . Since the code of this event listener is growing way beyond a single line expression, it‚Äôs time to move it to a function. This is also a good chance to address those accessibility warnings we ignored earlier. Create a new dotInteraction() function in your JS that takes the index of the dot and the event object as arguments: . function dotInteraction(index, evt) { // code will go here } . We‚Äôll try something different this time: instead of creating separate functions for each event, we will invoke the same function for all events, and read evt.type to determine what to do. Instead of only handling mouse events, we will also handle focus and blur events, to make our tooltip accessible to keyboard users. if (evt.type === 'mouseenter' || evt.type === 'focus') { // dot hovered } else if (evt.type === 'mouseleave' || evt.type === 'blur') { // dot unhovered } . Move your existing event listener code (modifying hoveredIndex) within the dotInteraction() function, and then update your event listeners to call that instead: . &lt;!-- Other attributes/directives not shown for brevity --&gt; &lt;circle on:mouseenter={evt =&gt; dotInteraction(index, evt)} on:mouseleave={evt =&gt; dotInteraction(index, evt)} /&gt; . To fix the accessibility issues, we should also add: . | tabindex=\"0\" to the dots to make them focusable | aria-describedby=\"commit-tooltip\" to the dots to link them to the tooltip for assistive technology | role=\"tooltip\" to the tooltip to indicate its purpose to assistive technology | aria-haspopup=\"true\" to the dots to indicate that they have a tooltip | on:focus and on:blur event listeners (that also call dotInteraction()) | . Back to the dotInvoked() function, we can use evt.target to get the dot that was hovered over: . let hoveredDot = evt.target; . Now, in the block that handles the mouseenter/focus events, let‚Äôs use computePosition() to compute the position of the tooltip based on the position of the dot. Another advantage of moving our code to a separate function is that we can mark this function as async, which will allow us to use await inside it. This is helpful because computePosition() returns a Promise that resolves to the position of the tooltip. This is what it looks like: . tooltipPosition = await computePosition(hoveredDot, commitTooltip, { strategy: 'fixed', // because we use position: fixed middleware: [ offset(5), // spacing from tooltip to dot autoPlacement(), // see https://floating-ui.com/docs/autoplacement ], }); . Your function should now look like: . async function dotInteraction(index, evt) { // your code } . We won‚Äôt go into much detail on the API of Floating UI, so it‚Äôs ok to just copy the code above. However, if you want to learn more, their docs are excellent. Lastly, replace cursor with tooltipPosition in the style attribute of the tooltip to actually use this new object. If you preview now, you should see that the tooltip is always visible and positioned near the hovered dot, regardless of where it is relative to the viewport. At this point you can also remove the cursor variable and the code setting it, since we don‚Äôt need it anymore, unless there are other things you want to do where knowing the mouse position is useful. ",
    "url": "/labs/lab07/#step-3-adding-a-tooltip",
    "relUrl": "/labs/lab07/#step-3-adding-a-tooltip"
  },"44": {
    "doc": "Lab 7: Visualizing quantitative data with D3",
    "title": "Step 4: Communicating lines edited via the size of the dots (optional)",
    "content": "Note that the tiniest of edits are currently represented by the same size of dot as the largest of edits. It is common to use the size of the dots to communicate a third variable, in this case the number of lines each commit edited. Step 4.1: Calculating our scale . We will need to define a new scale to map the number of lines edited to the radius of the dots. This means we need to first‚Ä¶ . | Decide on the minimum and maximum radii we want to allow. Edit the circle r attribute and play around with different radii to decide. I settled on 2 and 30. | Calculate the range of values for number of lines edited by a single commit. As with Step 4.1, we can use d3.extent() to find the minimum and maximum value in one go. | . Then define a new linear scale (I called it rScale) using d3.scaleLinear() mapping the domain of the number of lines edited to the range of radii we decided on. Then, in our HTML, instead of a hardcoded 5, set the circle radius to rScale(commit.totalLines). If everything went well, you should now see that the dots are now different sizes depending on the number of lines of each! . As one last tweak, apply fill-opacity to the dots to make them more transparent, since the larger they are, the more likely to overlap. You can only apply it when the dots are not hovered, as an extra cue. Step 4.2: Area, not radius . Hover over a few circles and pay attention to the number of lines they correspond to. What do you notice? The size of the dots is not very good at communicating the number of lines edited. This is because the area of a circle is proportional to the square of its radius (A = œÄr¬≤), so a commit with double the edits appears four times as large! . To fix this, we will use a different type of scale: a square root scale. A square root scale is a type of power scale that uses the square root of the input domain value to calculate the output range value. Thankfully, the API is very similar to the linear scale we used before, so all we need to do to fix the issue is to just change the function name. Before and after Step 4.3: Paint smaller dots over larger ones . You may notice that when dots are overlapping, it‚Äôs sometimes harder to hover over the smaller ones, if they happen to be painted underneath the larger one. One way to fix this is to sort commits in descending order of totalLines, which will ensure the smaller dots are painted last. To do that, we can use the d3.sort() method. This would go in your onMount() callback: . commits = d3.sort(commits, (d) =&gt; -d.totalLines); . Why the minus? Because d3.sort() sorts in ascending order by default, and we want descending order, and that‚Äôs shorter than writing a custom comparator function. ",
    "url": "/labs/lab07/#step-4-communicating-lines-edited-via-the-size-of-the-dots-optional",
    "relUrl": "/labs/lab07/#step-4-communicating-lines-edited-via-the-size-of-the-dots-optional"
  },"45": {
    "doc": "Lab 7: Visualizing quantitative data with D3",
    "title": "Step 5: Brushing",
    "content": "In the previous lab, we selected single pie segments by clicking. As discussed in the A Tour through the Interaction Zoo lecture, brushing can be an effective interaction technique for selecting multiple data points in a visualization. Once points are selected, we can further explore the dataset by displaying more data. Step 5.1: Setting up the brush . Exactly because brushing is so fundamental to interactive charts, D3 provides a module called d3-brush to facilitate just that. To use it, we need a reference to our &lt;svg&gt; element, so we use bind:this as we‚Äôve done several in this lab. Let‚Äôs call the variable svg. We then create the brush via: . $: d3.select(svg).call(d3.brush()); . Try it! You should already be able to drag a rectangle around the chart, even though it doesn‚Äôt do anything yet. Exciting! . Step 5.2: Getting our tooltips back . Did you notice that now that we can brush, our tooltips disappeared? üò± What happened?! . If you inspect the chart, you will find the culprit: . So what is happening here? To make the brush work, D3 adds a rectangle overlay over the entire chart that catches all mouse events. Because of this, our circles never get hovered, and thus our tooltips never show. Since SVG elements are painted in source order, to fix this we need the overlay to come before the dots in the DOM tree. D3 provides a selection.raise() method that moves one or more elements to the end of their parent, maintaining their relative order. Therefore, to move the overlay to be before the dots, we will ‚Äúraise‚Äù the dots and everything that comes after the overlay. First, let‚Äôs convert the single-line reactive statement to a reactive block: . $: { d3.select(svg).call(d3.brush()); } . Then, inside the reactive block, after the brush is created, we raise the dots and everything after the overlay: . d3.select(svg).selectAll('.dots, .overlay ~ *').raise(); . That‚Äôs a funny looking selector, isn‚Äôt it? The ~ is the CSS subsequent sibling combinator and it selects elements that come after the selector that precedes it (and share the same parent). Try it: you should now see that the tooltips are back, and the brush still works! . Step 5.3: Styling the selection rectangle (optional) . The overlay is not the only element added by d3.brush(). For example, there is a &lt;rect class=\"selection&gt; element that is used to depict the brush selection. This means you can use CSS to style it! . Just make sure to use the Svelte-specific :global() pseudo-class around .selection otherwise Svelte will drop the whole rule, as it thinks it‚Äôs unused CSS. Here‚Äôs what I did, but feel free to experiment with your own styles: . @keyframes marching-ants { to { stroke-dashoffset: -8; /* 5 + 3 */ } } svg :global(.selection) { fill-opacity: 10%; stroke: black; stroke-opacity: 70%; stroke-dasharray: 5 3; animation: marching-ants 2s linear infinite; } . Step 5.4: Making the brush actually select dots . So far we can draw a selection, but it neither does anything, nor does it look like it does anything. The first step is to actually figure out what the user has selected, both in terms of visual shapes (dots) so we can style them as selected, as well as in terms of data (commits) so we can do something with it. d3.brush() returns a brush object, which actually fires events when the brush is moved. We can use .on() to listen to these events and do something when they happen. Let‚Äôs start by simply logging them to the console. Let‚Äôs define a function called brushed() that takes an event object as an argument and logs it to the console: . function brushed(evt) { console.log(evt); } . Then, we use .on() to call this function when the brush is moved: . d3.select(svg).call(d3.brush().on('start brush end', brushed)); . This line can replace your existing d3.select(svg).call(d3.brush()) code. Open your browser console (if it‚Äôs not already open) and try brushing again. You should see a flurry of events logged to the console, a bit like this: . Try exploring these objects by clicking on the ‚ñ∏ next to them. You may notice that the selection property of the event object is an array of two points. These points represent the top-left and bottom-right corners of the brush rectangle. This array is the key to understanding what the user has selected. Let‚Äôs create a new reactive variable that stores this selection array. I called it brushSelection. Then, inside the brushed() function, we set brushSelection to evt.selection. If we can implement a function that tells us if a commit is selected: . function isCommitSelected(commit) { if (!brushSelection) { return false; } // TODO return true if commit is within brushSelection // and false if not } . We can then use this function to apply a selected class to the dots that are selected via a class:selected directive. The core idea for the logic is to use our existing xScale and yScale scales to map the commit data to X and Y coordinates, and then check if these coordinates are within the brush selection bounds. Another way to do it is to use the D3 scale.invert() to map the selection bounds to data, and then compare data values, which can be faster if you have a lot of data, since you only need to convert the bounds once. Can you figure out how to do it? . Show solution There are many ways to implement this logic, but here‚Äôs one: . let min = { x: brushSelection[0][0], y: brushSelection[0][1] }; let max = { x: brushSelection[1][0], y: brushSelection[1][1] }; let x = xScale(commit.date); let y = yScale(commit.hourFrac); return x &gt;= min.x &amp;&amp; x &lt;= max.x &amp;&amp; y &gt;= min.y &amp;&amp; y &lt;= max.y; . The last piece of the puzzle is to add some stylng in your CSS to make the selected dots stand out. I gave them a different fill color, but the sky is the limit! . Step 5.4: Showing count of selected commits . So far, we have only been visually highlighting the selected commits, but not actually doing anything with it. Brushing is useful because it helps us interactively explore the dataset by isolating selecting different subsets. As a first step, let‚Äôs display the number of selected commits. $: selectedCommits = brushSelection ? commits.filter(isCommitSelected) : []; $: hasSelection = brushSelection &amp;&amp; selectedCommits.length &gt; 0; . Now let‚Äôs display the number of selected commits in the HTML, under the chart: . &lt;p&gt;{hasSelection ? selectedCommits.length : \"No\"} commits selected&lt;/p&gt; . If it works, it should look a bit like this: . Step 5.5: Showing breakdown of languages across all lines edited in selected commits . Brushing is particularly useful when dealing with connected data, such as our commits and lines of code. Let‚Äôs display stats about the proportion of languages in the lines edited in the selected commits. We will need to define a new reactive variable (I called it selectedLines) that holds the lines edited in the selected commits (or all commits if no/empty selection): . $: selectedLines = (hasSelection ? selectedCommits : commits).flatMap( (d) =&gt; d.lines, ); . Then, we can use it to calculate the number of edited lines per language using d3.rollup() (or d3.rollups()), which we discussed earlier. Assign the result to a new reactive variable called languageBreakdown. Then, we can display the result in the HTML by iterating over languageBreakdown via an {#each} block and displaying the language and the proportion of lines edited in it. {#each languageBreakdown as [language, lines] } &lt;!-- Display stats here --&gt; {/each} . Some pointers: . | Use lines / selectedLines.length to calculate the proportion of lines edited in each language. | d3-format can be quite helpful for formatting numbers nicely. I used a \".1~%\" format specifier to display the proportion as a percentage with one decimal place. | . If everything went well, you should see something like this: . Step 5.6: Drawing a pie chart of the language breakdown . The language breakdown is useful, but it‚Äôs not very visual. Reading numbers doesn‚Äôt make it easy to gauge the relative proportions of the different languages. A pie chart is much better at this, but at this point we are probably way too tired to draw another chart. Thankfully, we already have a pie chart from the previous lab that we can reuse! . All we need to do is to import it in our JS: . import Pie from '$lib/Pie.svelte'; . and then we can use it in our HTML to display the language breakdown as a pie chart. All we need to do is transform our data into an array of {label, value} objects, which we can do using the expression Array.from(languageBreakdown).map(([language, lines]) =&gt; ({label: language, value: lines})) and pass this array to its data prop: . &lt;Pie data={/* array of {label, value} objects */} /&gt; . While we‚Äôre at it, we could also write JS to convert language to a more readable label. The final result looks like this: . If you want to go further, you can think about how to make the scatterplot we made in this lab similarly reusable as a separate &lt;Scatterplot&gt; component. | Actually, it will only include commits that still have an effect on the codebase, since it‚Äôs based on lines of code that are currently present in the codebase. Therefore if all a commit did was change lines that have since been edited by other commits, that commit will not show up here. If we wanted to include all commits, we‚Äôd need to process the output of git log instead, but that is outside the scope of this lab.¬†&#8617; . | . ",
    "url": "/labs/lab07/#step-5-brushing",
    "relUrl": "/labs/lab07/#step-5-brushing"
  },"46": {
    "doc": "Lab 0: Setup",
    "title": "Lab 0: Setup",
    "content": "In this lab, we will prepare our local environment for the course labs and assignments. We recommend you follow this guide step by step, but if you are already familiar with some of the tools, feel free to skip ahead. | Lab 0: Setup . | Browser: Latest Google Chrome | Code editor: Visual Studio Code (VS Code) . | Emmet | . | Git . | Setting up Git | Git concepts: repo(sitory), staging area, commit | . | GitHub . | New Git concepts: Remote, pushing, and pulling | Helpful Git Resources | . | GitHub Desktop | Node.js and npm | Installing a local server | Svelte for VS Code | . | . ",
    "url": "/labs/lab00/",
    "relUrl": "/labs/lab00/"
  },"47": {
    "doc": "Lab 0: Setup",
    "title": "Browser: Latest Google Chrome",
    "content": "Ideally when making websites and web applications, we want to ensure they work correctly in all browsers, both new and (relatively) old. However, for the purposes of this class, we will only be using the latest version of Google Chrome. This is to streamline the process, and avoid spending time on issues that are out of scope for the learning objectives of the course. If you don‚Äôt already have Google Chrome installed, please install it now. If you have it installed, please make sure you have the latest version by restarting it (it downloads updates automatically). ",
    "url": "/labs/lab00/#browser-latest-google-chrome",
    "relUrl": "/labs/lab00/#browser-latest-google-chrome"
  },"48": {
    "doc": "Lab 0: Setup",
    "title": "Code editor: Visual Studio Code (VS Code)",
    "content": "We will use Visual Studio Code as our code editor. A code editor is a program that allows us to write code in a text file and save it. In contrast with plain text editors (like Notepad on Windows or TextEdit on macOS), code editors provide features that make it easier to write code, such as syntax highlighting, code completion, and code formatting. | Installing VSCode | VSCode Basics | VSCode Extensions | . If you prefer another editor, feel free to use it, but we won‚Äôt be able to provide support for it. Visual studio code also provides its own integrated terminal, so if you‚Äôre not familiar with running terminal commands on your computer, you can use the one built into VSCode. In the rest of this guide, if we say ‚Äúopen the terminal‚Äù, you can simply open the directory you want to start from (or any directory if that is not specified) with VS Code and press Ctrl + ` to open the integrated terminal (or via the menu: View ‚Üí Terminal). Emmet . Emmet is a snippet syntax that allows us to write certain web languages much faster. It is built into VSCode, so we don‚Äôt need to install anything. Just verify that it works by creating a new index.html file and typing ! followed by pressing the Tab key. If it works, the ! should be replaced by something like: . &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\" /&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt;&lt;/body&gt; &lt;/html&gt; . Don‚Äôt worry about what this means right now, that‚Äôs what Lab 1 is for! . ",
    "url": "/labs/lab00/#code-editor-visual-studio-code-vs-code",
    "relUrl": "/labs/lab00/#code-editor-visual-studio-code-vs-code"
  },"49": {
    "doc": "Lab 0: Setup",
    "title": "Git",
    "content": "Git is a version control system. It allows us to keep track of changes to our code over time, collaborate with others without having to worry about overwriting each other‚Äôs work, and revert back to previous versions of the code if needed. Seems familiar? This is what version control frees you from! (Source: PhD Comics) . Setting up Git . The first step is to check if you already have git installed by opening the terminal and typing git --version. | If you get an error about the command being unknown, you need to install Git on your computer. | If you get a version number, you already have git installed. Make sure it‚Äôs up to date by comparing the version number you got with the one on the official website. If it‚Äôs significantly out of date, it‚Äôs a good practice to update it, covered at the end of the installation guide. | . If you‚Äôve never used git before, first you need to set up your name and email. Run the following commands to let git know your name and email address. Open a terminal and run: . git config --global user.name \"Your Name\" git config --global user.email \"your_email@mit.edu\" . Git concepts: repo(sitory), staging area, commit . In Git, code is grouped in repositories (or repos for short), which are the root directories of a project. Repositories cannot be nested. Git tracks changes via the concept of a commit, which is a set of changes to the code. By combining the commits from the start (the commit history) together, it can give us a snapshot of the code at any point in time. A commit is performed in two steps: . | We tell Git which files we want to commit by adding them to the staging area through git add. We can add multiple files at once, or one by one. | We tell Git to commit the files in the staging area through git commit. | . Let‚Äôs try it out! . Create a new folder on your computer (e.g. lab-0) and open it in VSCode. Then create a text file called hello.txt and write something in it. Then, open the built-in terminal in VS Code and type: . git init . Then press Enter. You should see something like: . Initialized empty Git repository in /Users/username/Documents/viz-society/lab-0/.git/ . This means that Git has created a new repository in the current folder, but we have not yet committed anything. To see what the current status of the repository is, type: . git status . Which should give you something like: . On branch main No commits yet Untracked files: (use \"git add &lt;file&gt;...\" to include in what will be committed) hello.txt nothing added to commit but untracked files present (use \"git add\" to track) . To add all the files in the current folder to the staging area, type: . git add . The . means ‚Äúthe current folder‚Äù and is used very widely (similarly, .. means ‚Äúthe parent folder‚Äù). Now, if we check the status again, we should see: . On branch main No commits yet Changes to be committed: (use \"git rm --cached &lt;file&gt;...\" to unstage) new file: hello.txt . This means that the file hello.txt is now in the staging area, and will be committed when we tell Git to do so. Let‚Äôs commit it: . git commit -m \"Add hello.txt\" . The -m flag means that we are providing a message for the commit inline. If we don‚Äôt provide it, Git will open a text editor for us to write the message in. That‚Äôs it! We have now committed our first change to the repository. You can see recent changes via git log and even go back to a previous commit by using git checkout &lt;commit hash&gt; (the commit hash is the long string of letters and numbers that you see in the output of git log). ",
    "url": "/labs/lab00/#git",
    "relUrl": "/labs/lab00/#git"
  },"50": {
    "doc": "Lab 0: Setup",
    "title": "GitHub",
    "content": "GitHub is a website that allows us to store our code online and collaborate with others. Code is published in repositories, which are like folders that contain all the files of a project. Repositories can be public, which means anyone can see them, or private, which means only people with access can see them. In this class (and many others), we will be using GitHub repositories for your work during lab, as well as your assignments. If you don‚Äôt already have a GitHub account, please create one now. Please sign up for the GitHub Student Developer Pack to get access to a GitHub Pro account and many other useful tools for free. We will be using GitHub Pages to publish websites, which requires a paid account for private repos. New Git concepts: Remote, pushing, and pulling . When we work on a project with others, we need a way to share our changes with them. GitHub introduces the concept of a remote: That is, a remote repository that is set up to be a copy of our local repository. We can then push our commits to the remote, and pull commits from the remote to our local repository. Diagram illustrating the Git &amp; GitHub workflow. (Source: Git, GitHub, &amp; Workflow Fundamentals on dev.to) . Helpful Git Resources . | A grip on git is a beautiful visual explanation of how git works from the inside out. | Missing Semester Git Lecture is a great text explanation of how git works from the IAP class on developer tools. | Learn Git Branching is a great online interactive tutorial for learning the git command line. | GitHub Cheat Sheet This cheat sheet features the most important and commonly used Git commands for easy reference. | . ",
    "url": "/labs/lab00/#github",
    "relUrl": "/labs/lab00/#github"
  },"51": {
    "doc": "Lab 0: Setup",
    "title": "GitHub Desktop",
    "content": "Using Git via the command line is fine for the simplest case of committing and pushing all our changes at once and having no conflicts, but when we need more control or something goes wrong, it can be quite challenging to use. Why we need a visual client for Git (Source: xkcd) . GitHub Desktop is a graphical user interface (GUI) for Git. It does not do everything that Git can do, but it does make many commonly needed tasks much easier, including: . | Reviewing uncommitted changes and only committing a subset of them (down to specific lines) | Reverting commits | Viewing the commit history | . We strongly encourage installing GitHub Desktop (or any other visual client), even if you are comfortable with the command line, since it provides better visibility of status which can prevent many mistakes. Once you install GitHub Desktop, you will need to connect it to your GitHub account. You should then go through the tutorial to create a repository. This will also guide you on how to push and pull from a remote repository. You should also go to Settings &gt; Integrations and set Visual Studio Code as your default editor. This is all the setup needed for Lab 1! We will not need the rest of the tools until at least Lab 2 (and Svelte not until Lab 6), but we recommend you install them now so you don‚Äôt have to worry about it later. ",
    "url": "/labs/lab00/#github-desktop",
    "relUrl": "/labs/lab00/#github-desktop"
  },"52": {
    "doc": "Lab 0: Setup",
    "title": "Node.js and npm",
    "content": "As we will learn, JS (short for JavaScript) is the web‚Äôs programming language. Node.js is a program that allows us to use JS outside of the browser, in the same way as any other programming language, e.g. Python. npm is a package manager for JS, which allows us to install and use libraries (also called packages) written in JS. If you are familiar with Python, npm serves the same purpose as pip. You may already have Node.js installed. To find out, open the terminal and type: . node --version . If you get an error, or if the version is way behind what you see on the official website, you need to install or update Node.js. npm is included with every Node.js installation. You can verify that you have it installed by typing: . npm --version . If you update Node and npm, you may need to restart your terminal for these commands to show the correct version. ",
    "url": "/labs/lab00/#nodejs-and-npm",
    "relUrl": "/labs/lab00/#nodejs-and-npm"
  },"53": {
    "doc": "Lab 0: Setup",
    "title": "Installing a local server",
    "content": "While we can view web pages by simply opening them in a browser, that mode is heavily restricted for security reasons and many newer features will not work in it. To get around this, we will use a local server to serve our web pages. Live Server is a VS Code extension that not only gives us a local server, it even takes care of refreshing the page for us when we make changes to the code! . Installation steps: . | Launch VS Code | Quick Open (Ctrl+P) or (Command + P - on mac) | Paste the following command, and press enter: | . ext install ritwickdey.liveserver . ",
    "url": "/labs/lab00/#installing-a-local-server",
    "relUrl": "/labs/lab00/#installing-a-local-server"
  },"54": {
    "doc": "Lab 0: Setup",
    "title": "Svelte for VS Code",
    "content": "Installation steps: . | Launch VS Code | Quick Open (Ctrl+P) on Windows or (Cmd + P) on MacOS | Paste the following command, and press enter: | . ext install svelte.svelte-vscode . | Confirm that you do want to install the extension | . ",
    "url": "/labs/lab00/#svelte-for-vs-code",
    "relUrl": "/labs/lab00/#svelte-for-vs-code"
  },"55": {
    "doc": "Lab 9: Animation & Scrollytelling",
    "title": "Lab 9: Animation",
    "content": "In this lab, we will learn: . | What different methods do we have to transition and animate elements and when to use each? | What considerations should we take into account for using animations effectively? | . | Lab 9: Animation . | Check-off | Slides | What will we make? | Step 0: Preparation . | Step 0.1: Making commits clickable | Step 0.2: Iterating over data, not arcs | Step 0.3: Moving all info to the same data structure | . | Step 1: Evolution visualization . | Step 1.1: Creating the filtering UI | Step 1.2: Filtering by commitMaxTime | Step 1.3: Making the circles stable | Step 1.4: Entry transitions with CSS | Step 1.5: Moving the scatterplot into a separate component (optional, but recommended) | . | Step 2: The race for the biggest file! . | Step 2.1: Creating a component for the unit visualization | Step 2.2: Making it look like an actual unit visualization | Step 2.3: Sorting files by number of lines | Step 2.4: Varying the color of the dots by technology | Step 2.5: Dot transitions | Step 2.6: Consistent colors across visualizations | Step 2.7: Animated race | . | Step 3: Pie chart transition . | Step 3.1: Use consistent ordering | Step 3.2: Eliminate flashing by using a keyed each block | Step 3.3: Fixing the shape transition using d3.transition() . | How to get a reference to the DOM elements we are transitioning? | When to call d3.transition()? | How to read the previous state? | . | Step 3.4: Transitioning between pies with different technologies | Step 3.5: Harmonizing easing across the D3 and Svelte transitions | . | Step 4: Scrollytelling Part 1 (commits over time) . | Step 4.0: Making our page a bit wider, if there is space | Step 4.1: Using a scrolly | Step 4.2: Creating a dummy narrative | Step 4.3: Creating a scroller for our commits over time | . | Step 5: Scrollytelling Part 2 (file sizes) . | Step 5.1: Adding another scrolly | Step 5.2: Limit number of updates | . | Resources . | Transitions &amp; Animations | Scrollytelling | . | . | . ",
    "url": "/labs/lab09/#lab-9-animation",
    "relUrl": "/labs/lab09/#lab-9-animation"
  },"56": {
    "doc": "Lab 9: Animation & Scrollytelling",
    "title": "Check-off",
    "content": "You need to come to TA Office Hours to get checked off for this lab (any of them, no appointment needed). Please fill in the check-off form at labs/9/checkoff before your check-off. Ideally you should fill in the form right before your check-off, but it‚Äôs ok if you fill it out in advance. Filling out the form is a necessary but not sufficient condition to get checked-off. You still need to come to office hours in person for your check-off to be processed. You could even fill it out before you finish the lab, since we won‚Äôt look at it until your check-off, but the closer to the end of the lab you fill it out, the more meaningful your feedback will be. ",
    "url": "/labs/lab09/#check-off",
    "relUrl": "/labs/lab09/#check-off"
  },"57": {
    "doc": "Lab 9: Animation & Scrollytelling",
    "title": "Slides",
    "content": ". | Relevant technologies (summary slide) | . ",
    "url": "/labs/lab09/#slides",
    "relUrl": "/labs/lab09/#slides"
  },"58": {
    "doc": "Lab 9: Animation & Scrollytelling",
    "title": "What will we make?",
    "content": "In this lab, we will go back to the Meta page of our portfolio, and convert it to an interactive narrative visualization that shows the progress of our codebase over time. ",
    "url": "/labs/lab09/#what-will-we-make",
    "relUrl": "/labs/lab09/#what-will-we-make"
  },"59": {
    "doc": "Lab 9: Animation & Scrollytelling",
    "title": "Step 0: Preparation",
    "content": "To make this lab a little easier, we will follow a few prepratory steps in this section. Step 0.1: Making commits clickable . src/meta/+page.svelte . Currently, the only way to select commits is by brushing the pie chart. While this is great for selecting multiple commits and seeing stats about the whole group, it is not very user-friendly for selecting individual commits. Furthermore, you will need to alternate between selections a lot to debug your work in Step 1, so it pays off to make this easier. Before we can add the right event handling to make click selections possible, we need to make a few changes to our code. Our selectedCommits variable is currently reactive, and depends on brushSelection: . $: selectedCommits = brushSelection ? commits.filter(isCommitSelected) : []; . We also have an isCommitSelected() function, which checks of a commit is within the brushSelection and looks like this: . function isCommitSelected(commit) { if (!brushSelection) { if (manualSelection) { return manualSelection.has(commit); } return false; } let min = { x: brushSelection[0][0], y: brushSelection[0][1] }; let max = { x: brushSelection[1][0], y: brushSelection[1][1] }; let x = xScale(commit.date); let y = yScale(commit.hourFrac); return x &gt;= min.x &amp;&amp; x &lt;= max.x &amp;&amp; y &gt;= min.y &amp;&amp; y &lt;= max.y; } . However, brushSelection is actually only updated in one place: the brushed() function. We don‚Äôt really need to keep it around once we‚Äôve converted it to selected commits. Let‚Äôs update the brushed() function to update selectedCommits directly: . function brushed(evt) { let brushSelection = evt.selection; selectedCommits = !brushSelection ? [] : commits.filter((commit) =&gt; { let min = { x: brushSelection[0][0], y: brushSelection[0][1] }; let max = { x: brushSelection[1][0], y: brushSelection[1][1] }; let x = xScale(commit.date); let y = yScale(commit.hourFrac); return x &gt;= min.x &amp;&amp; x &lt;= max.x &amp;&amp; y &gt;= min.y &amp;&amp; y &lt;= max.y; }); } . Then isCommitSelected() can be much simpler: . function isCommitSelected(commit) { return selectedCommits.includes(commit); } . And selectedCommits no longer needs to be reactive, it can become a plain variable: . let selectedCommits = []; . We can also remove the reference to brushSelection in the hasSelection function, as selectedCommits is updated in brushed. You can now remove the top-level brushSelection variable, as it‚Äôs not used anywhere. Now, let‚Äôs add some event listeners to allow for clicking on commits. If you have not done the optional Step 3.5 of Lab 7, do the part about creating a dotInteraction() function now. Then, we just add two more listeners that call dotInteraction() on the dots: on:click and on:keyup, and pass the same parameters as the other listeners (evt and index). Then, in the dotInteraction() function, add a new else if branch case that checks if either evt.type is \"click\" OR evt.type is keyup AND evt.key is \"Enter\". All this branch should do is overwrite selectedCommits with an array containing only the commit at index (commits[index]). If you try it out now, clicking should work! . Step 0.2: Iterating over data, not arcs . lib/Pie.svelte . Play a little bit with selecting different colors in the pie chart. What do you notice? The same technologies are drawn with different colors across selections! You can see this in the video above as well. This is because the technologies can appear in any order in the data we are passing, and we are using the index of the data to get the color (color(index)). However, ordinal scales are much more useful when we pass in the actual data value (in this case, the technology name) instead of an index, as they give us a consistent color. However, if we look at our current code in lib/Pie.svelte, we are currently iterating over arcs to draw the pie wedges: . {#each arcs as arc, index} &lt;!-- Other attributes omitted for brevity --&gt; &lt;path d=\"{arc}\" fill=\"{\" colors(index) }&gt; {/each}&lt;/path&gt; . This makes it awkward to get any data associated with the pie wedge, such as the label. We could use data[index], but it‚Äôs better to just iterate over the data itself: . {#each data as d, index} &lt;path d=\"{arcs[index]}\" fill=\"{\" colors(index) }&gt; {/each}&lt;/path&gt; . We can now pass d.label to the color scale instead of just the index: . {#each data as d, index} &lt;path d=\"{arcs[index]}\" fill=\"{\" colors(d.label) }&gt; {/each}&lt;/path&gt; . Try it again: now the colors should be consistent across selections! . Step 0.3: Moving all info to the same data structure . lib/Pie.svelte . It is a little awkward that we need to read several different variables to get all the information we need about a pie chart wedge. However, as a design principle, we don‚Äôt want to be adding internal data like startAngle on a data structure we were passed as input, it‚Äôs not good form. Let‚Äôs create a copy of the data and add everything we need to it. We will use a reactive block instead of a reactive statement, since we want to run multiple lines of code. First, to copy the data: . let pieData; $: { pieData = data.map((d) =&gt; ({ ...d })); } . The {...d} syntax is a shorthand for creating a new object with all the properties of d. You can now replace all other mentions of data in the component with pieData (except for the data prop itself). Then, move the arcData and arcs definitions into local variables within the reactive block, and combine them with pieData like this: . pieData = pieData.map((d, i) =&gt; ({ ...d, ...arcData[i], arc: arcs[i] })); . This will give us objects with startAngle, endAngle, and arc properties, in addition to value and label. Replace all references to arcData and arcs to just read from pieData (e.g. arcs[index] would become d.arc). ",
    "url": "/labs/lab09/#step-0-preparation",
    "relUrl": "/labs/lab09/#step-0-preparation"
  },"60": {
    "doc": "Lab 9: Animation & Scrollytelling",
    "title": "Step 1: Evolution visualization",
    "content": "src/meta/+page.svelte . In this step, we will create an interactive timeline visualization that shows the evolution of our repo by allowing us to move a slider to change the date range of the commits we are looking at. Step 1.1: Creating the filtering UI . In this step we will create a slider, bind its value to a variable, and display the date and time it corresponds to. It‚Äôs very familiar to what we did in the previous lab, except we don‚Äôt need to worry about a ‚Äúno filter‚Äù state. First, let‚Äôs create a new variable, commitProgress, that will represent the maximum time we want to show as a percentage of the total time: . let commitProgress = 100; . To map this percentage to a date, we will need a new time scale, just like we did in Lab 7 that will map commit.datetime values to the [0, 100] range. Once we have our scale, we can easily get from the 0-100 number to a date: . $: commitMaxTime = timeScale.invert(commitProgress); . We are now ready to add our filtering UI. | Create a new &lt;label&gt; element with a slider input and a &lt;time&gt; element that will display the date and time corresponding to the slider value. | Add some CSS to make the slider maximum width (flex: 1 in Flexbox, 1fr column width in Grid) and to place the time element underneath the slider (otherwise differences in output value length will move the slider, which is very jarring). | Bind the slider value to commitProgress | Output the selected time in the &lt;time&gt; element using commitMaxTime.toLocaleString() similarly to how we did in Lab 7 and Lab 8. This time we need to display both the date and the time. | . Feel free to use any settings you like. In the screencasts below, I use dateStyle: \"long\" and timeStyle: \"short\". If everything went well, your slider should now be working! . Step 1.2: Filtering by commitMaxTime . Let‚Äôs now ceate a new filteredCommits variable that will reactively filter commits by comparing commit.datetime with commitMaxTime. Similarly, create a filteredLines variable that filters data in the same way. We can now replace commits with filteredCommits and data with filteredLines in several places: . | The xScale domain | The brushed() function that updates the selectedCommits variable | The {#each} block that draws the circles | The hoveredCommit variable | Your summary stats | . Try moving the slider and see what happens! . Step 1.3: Making the circles stable . CSS transitions are already applied to our circles since Lab 7. However, notice that when we move the slider, the circles are jumping around a lot. This is because Svelte doesn‚Äôt know which data items correspond to which previous data items, so it does not necessarily reuse the right &lt;circle&gt; element for the same commit. To tell Svelte which data items correspond to which previous data items, we can use a keyed each block, with a value that uniquely identifies the data item. A good candidate for that in this case would be the commit id: . {#each commits as commit, index (commit.id) } . Just this small addition fixes the issue completely! . Step 1.4: Entry transitions with CSS . Notice that even though we are now getting a nice transition when an existing commit changes radius, there is no transition when a new commit appears. This is because CSS transitions fire for state changes where both the start and end changes are described by CSS. A new element being added does not have a start state, so it doesn‚Äôt transition. We could use Svelte transitions for this, but we don‚Äôt need to. We can actually use CSS transitions, we just need to explicitly tell the browser what the start state should be. That‚Äôs what the @starting-style rule is for! . Inside the circle CSS rule, add a @starting-style rule (and ignore Svelte‚Äôs ‚ÄúUnknown at rule‚Äù warning): . @starting-style { r: 0; } . If you preview again, you should notice that that‚Äôs all it took, new circles are now being animated as well! . You might notice that the largest circles and the smallest circles are both transitioning with the same duration, which means dramatically different speeds. We may decide that this is desirable: it means all circles are appearing at once. However, if you want to instead keep speed constant, you can set an --r CSS variable on each circle element with its radius, and then set the transition duration to e.g. calc(var(--r) / 100ms). You can do that only for r transitions like so: . transition: all 200ms, r calc(var(--r) * 100ms); . Step 1.5: Moving the scatterplot into a separate component (optional, but recommended) . src/routes/meta/+page.svelte, src/routes/meta/Scatterplot.svelte . src/routes/meta/+page.svelte has begun to grow quite a lot, and it‚Äôs only about to get bigger. It will really help make your code more manageable to start moving reusable functionality to components. One good candidate is the commit scatterplot. Create a new file, src/routes/meta/Scatterplot.svelte, and move the scatterplot code there. This includes: . | The &lt;svg&gt; element | The commit tooltip | Any CSS styling elements in those | The JS dealing with dimensions, margins, scales, axes, brushing, user interaction with dots, commit selection, etc. | . It should have two props: . | commits (an array of commits) | selectedCommits (mostly used as output, but could be used as input as well) | . We name the variable commits in order to make the scatterplot a bit more generalizable. As such, make sure to change any mentions of filteredCommits in your new file back to commits. VS Code allows you to do that safely in one go, by placing the text caret on the variable name, then pressing F2 (or right clicking and selecting ‚ÄúRename Symbol‚Äù) . The final result should allow us to replace our entire &lt;svg&gt; and commit tooltip in src/routes/meta/+page.svelte with just: . &lt;CommitScatterplot commits={filteredCommits} bind:selectedCommits={selectedCommits} /&gt; . Don‚Äôt forget to also move the necessary imports! I find it helpful to just copy all of them, then remove the ones VS Code highlights as unused. ",
    "url": "/labs/lab09/#step-1-evolution-visualization",
    "relUrl": "/labs/lab09/#step-1-evolution-visualization"
  },"61": {
    "doc": "Lab 9: Animation & Scrollytelling",
    "title": "Step 2: The race for the biggest file!",
    "content": "In this step we will create a unit visualization that shows the relative size of each file in the codebase in lines of code, as well as the type and age of each line. Step 2.1: Creating a component for the unit visualization . src/routes/meta/FileLines.svelte, src/routes/meta/+page.svelte . To avoid bloating src/routes/meta/+page.svelte even more, let‚Äôs create a new component, src/routes/meta/FileLines.svelte, that will contain the unit visualization. The component should take a lines prop, and will group lines of code into files internally. This means that from the outside, we‚Äôd just use it like this: . &lt;FileLines lines={filteredLines} /&gt; . Eventually we want this to go after the scatterplot &amp; pie chart, but for now let‚Äôs add it right after our filtering UI as that makes development faster. Then, within the component we will group the lines by file and convert the groups to an array of {name, lines} objects like this: . let files = []; $: { files = d3 .groups(lines, (d) =&gt; d.file) .map(([name, lines]) =&gt; { return { name, lines }; }); } . Now that we have our files, let‚Äôs output them. While we can use D3 and generate an SVG for this, unit visualizations are one of the few cases where it can actually be easier to just use HTML and CSS, as we need to do a lot less work to manage the position of each element. We will use a &lt;dl&gt; element (but feel free to make different choices, there are many structures that would be appropriate here) Let‚Äôs start simple, by just outputting filenames and number of lines: . &lt;dl class=\"files\"&gt; {#each files as file (file.name) } &lt;div&gt; &lt;dt&gt; &lt;code&gt;{file.name}&lt;/code&gt; &lt;/dt&gt; &lt;dd&gt;{file.lines.length} lines&lt;/dd&gt; &lt;/div&gt; {/each} &lt;/dl&gt; . Note that we used a keyed each block from the get go here. It‚Äôs generally a good practice to do this by default, especially when iterating over data that we expect to change, as it avoids a lot of the issues we saw earlier. We should style the &lt;dl&gt; as a grid so that the filenames and line counts are aligned. The only thing that is a bit different now is that we have a &lt;div&gt; around each &lt;dt&gt; and &lt;dd&gt;. To prevent that from interfering with the grid we should use Subgrid: . &amp; &gt; div { grid-column: 1 / -1; display: grid; grid-template-columns: subgrid; } . Then we can just apply grid-column: 1 to the &lt;dt&gt;s and grid-column: 2 to the &lt;dd&gt; as usual. At this point, our ‚Äúvisualization‚Äù is rather spartan, but if you move the slider, you should already see the number of lines changing! . Step 2.2: Making it look like an actual unit visualization . For a unit visualization, we want to draw an element per data point (in this case, per line), so let‚Äôs do that. All we need to do is replace the contents of the &lt;dd&gt; element with another {#each} block that outputs a &lt;div&gt; for each line: . {#each file.lines as line (line.line) } &lt;div class=\"line\"&gt;&lt;/div&gt; {/each} . Seeing the total number of lines per file is still useful, so you may want to add it in the &lt;dt&gt;. I used a &lt;small&gt; element, gave it display: block so that it‚Äôs on its own line, and styled it smaller and less opaque. And then add some CSS to make it look like a unit visualization: .line { display: flex; width: 0.5em; aspect-ratio: 1; background: steelblue; border-radius: 50%; } . Last, we want to make sure these dots wrap and are tightly packed, so we need to add some CSS for the &lt;dd&gt; elements to allow this: . dd { grid-column: 2; display: flex; flex-wrap: wrap; align-items: start; align-content: start; gap: 0.15em; padding-top: 0.6em; margin-left: 0; } . At this point, we should have an actual unit visualization! . It should look something like this: . Step 2.3: Sorting files by number of lines . Our visualization is not really much of a race right now, since the order of files seems random. We need to sort the files by the number of lines they contain in descending order. We can do that in the same reactive block where we calculate files: . files = d3.sort(files, (d) =&gt; -d.lines.length); . Step 2.4: Varying the color of the dots by technology . Our visualization shows us the size of the files, but not all files are created equal. We can use color to differentiate the lines withn each file by technology. Let‚Äôs create an ordinal scale that maps technology ids to colors: . let colors = d3.scaleOrdinal(d3.schemeTableau10); . Then, we can use this scale to color the dots: . &lt;div class=\"line\" style=\"--color: { colors(line.type) }\"&gt;&lt;/div&gt; . Much better now! . Step 2.5: Dot transitions . Notice that it‚Äôs a little hard to compare which lines of each file have been added as we move the slider. If we make new elements appear with a transition, it will be much easier to see what is happening. We can use one of the Svelte predefined transitions for this. I picked scale as that makes dots appear to grow from a single point. If you don‚Äôt need to customize the duration etc, all it takes is adding in:scale to the &lt;div&gt; element! . Step 2.6: Consistent colors across visualizations . Notice that we have two visualizations that use colors to represent technologies, but they use different colors for the same technologies! . To fix this, we need to allow our components (Pie.svelte and FileLines.svelte) to accept a color scale as a prop, by prepending their colors declarations with export: . export let colors = d3.scaleOrdinal(d3.schemeTableau10); . Then we create the color scale on the parent page and pass it to each of them. For example, &lt;FileLines /&gt; would become &lt;FileLines colors={colors} /&gt;. That by itself is not enough. To get consistent colors each component needs to be looking up the color for a technology in the same way. Currently, &lt;Pie&gt; uses technology labels, while &lt;FileLines&gt; uses the raw ids from the data. We can make sure the data we pass to &lt;Pie&gt; include an id property with the raw id and then use that to look up the color. To make the component more flexible, we could even use both: . &lt;!-- Rest of attributes omitted --&gt; &lt;path fill={ colors(d.id ?? d.label) }&gt; . Our visualization is now way more informative! . Step 2.7: Animated race . We can now use the animate:fn directive to animate the files when they move to a new position. Svelte provides a built-in animation called flip, which sounds perfect for this use case. We import it at the top of our component: . import { flip } from 'svelte/animate'; . And then we apply it to the &lt;div&gt; that contains each file. If we are happy with its defaults, it can be as simple as this: . &lt;div animate:flip&gt;&lt;/div&gt; . However, if we preview the animation we get the result is ‚Ä¶less than great: . We can add a long duration (3000) and a delay (1000) (`animate:flip={{delay: 1000, duration: 3000}}) to more clearly see what is happening: . From some further investigation, it appears that Svelte is prematurely caching the geometry of the elements (before and after), which is causing the animation to be incorrect. But we can use a workaround! The part after the animate: is just referring to a function. There is nothing special about flip, it‚Äôs just a function we import. In fact, if we alt + click on it in the import statement, VS Code will take us to the Svelte module that defines it. Instead of using it wholesale, we can import with a different name: . import { flip as originalFlip } from 'svelte/animate'; . We can use a reactive statement to force flip to update whenever we need it to, e.g. whenever files changes: . function getFlip() { return originalFlip; } $: flip = getFlip(files); . This tricks Svelte into thinking flip depends on files, so it will re-run whenever files changes. If you try it now (with a reasonable duration and no delay), you will see that the animation is now correct! . For the final result, you‚Äôd likely want to either specify a duration as a function (which depends on the distance travelled) or remove the parameters (since that is the default). Don‚Äôt like the appearance of the items when they overlap? You can apply a semi-transparent white background and a glow with the same color to the &lt;div&gt; via something like: . &amp; &gt; div { background: hsl(0 0% 100% / 90%); box-shadow: 0 0 0.2em 0.2em hsl(0 0% 100% / 90%); } . ",
    "url": "/labs/lab09/#step-2-the-race-for-the-biggest-file",
    "relUrl": "/labs/lab09/#step-2-the-race-for-the-biggest-file"
  },"62": {
    "doc": "Lab 9: Animation & Scrollytelling",
    "title": "Step 3: Pie chart transition",
    "content": "lib/Pie.svelte . In lab 6, we created a pie chart that shows the distribution of edited lines per technology, and responds to filtering. We even added a transition: 300ms to our pie chart wedges, which interpolates any property the browser can interpolate. This is useful when we select a wedge, but produces rather strange results when the pie data changes as you have no doubt noticed by now. Let‚Äôs fix it! . It will help debugging to apply fill-opacity to the pie wedges, so you can see when they overlap. Ideally, we don‚Äôt want to have gaps or overlapping wedges during the transition. In the screenshots/screencasts below, I have applied fill-opacity: 75%; to the &lt;path&gt; elements. You may also want to use a more distinctive color palette at this point, like schemeCategory10 or schemeTableau10. The screenshots in this lab will use schemeTableau10. Step 3.1: Use consistent ordering . The first step is to make sure that the pie chart uses a consistent ordering of technologies, which also makes it easier to compare results across different sets of commits. By default, d3.pie() sorts the wedges by descending value, which in dynamic pie charts, is almost always undesirable. Instead, let‚Äôs sort by the data labels. This way, as long as the data labels remain consistent, the order of the pie wedges will also remain consistent. You may notice that there is a pie.sort() function. Can‚Äôt we just use that to sort by labels? No! If we do that, the arcs would be out of sync with our data! Instead, we will disable sorting in the pie by adding .sort(null) after the call to d3.pie(): . let sliceGenerator = d3 .pie() .value((d) =&gt; d.value) .sort(null); . and then we will sort pieData itself: . $: { pieData = d3.sort(data, (d) =&gt; d.label); // ... calculate arcData and arcs as before ... pieData = pieData.map((d, i) =&gt; ({ ...d, ...arcData[i], arc: arcs[i] })); } . It is important to sort the data before we calculate arcData and arcs, otherwise they will be out of sync! . If you try it now, the order should already be correct, though the transition is still suboptimal: . Step 3.2: Eliminate flashing by using a keyed each block . Our technologies are now sorted, but this made the transition involve a lot of flashing. Why is that? The pie wedges are always in the same order, so nothing should be changing color! . This is because Svelte doesn‚Äôt know which data items correspond to which previous data items, so it does not necessarily reuse the same &lt;path&gt; element for the same data item in the new data. To tell Svelte which data items correspond to which previous data items, we can use a keyed each block, with a value that uniquely identifies the data item. A good candidate for that would be the label: . {#each pieData as d, index (d.label)} . Just this small addition fixes the issue completely! . Step 3.3: Fixing the shape transition using d3.transition() . We may have fixed the issues discussed above but the transition is, how should we put it, ‚Ä¶suboptimal. Our shape transitions are still rather weird, especially when transitioning between pies that have different technologies. Change the transition duration to something longer (e.g. 3s) so you can more clearly see what is happening: . This is because paths are interpolated na√Øvely, by just matching up path segments and interpolating their parameters as numbers. Especially when it comes to arcs, that is almost never what we want! . Play with this demo to better understand how the browser‚Äôs na√Øve interpolation works (or rather, doesn‚Äôt work) for arcs. Open in new window ‚ÜóÔ∏è This is actually a bug in how native CSS interpolation works, and there is an open issue to fix it (opened by yours truly while authoring this very lab). Unfortunately, there is no way to fix this with CSS transitions, and fixing it with CSS animations would require so many keyframes that it would be impractical. Instead, we will use the d3-transition module, which trades simplicity for control, by allowing us to compute the intermediate states ourselves, with JS. The first step is to disable CSS transitions for d, so that they don‚Äôt interfere with our JS transitions. We can do this by restricting which properties the browser can auto-transition: . transition: 300ms; transition-property: transform, opacity, fill; . When using d3-transition, together with a reactive framework like Svelte, there are several questions to answer: . | How do we get a reference to the DOM nodes for each element we are transitioning? | When do we call d3.transition() on them? | How do we read the previous state so we can transition between the old and new states? | . Let‚Äôs take them one by one. How to get a reference to the DOM elements we are transitioning? . Because d3-transition works with DOM elements, we will need to obtain a reference to the DOM element for each path. As we know from previous labs, this is done with bind:this. The only thing that is different here is that we are binding elements inside an {#each} block, so instead of a single variable, we will need to use a data structure to store the references (array or object). The main consideration here is that we need to be able to go from pieData to the element reference and vice versa easily. Since both are uniquely identified by the data label, let‚Äôs use an object with the data label as the key and the element reference as the value: . let wedges = {}; . Then, on the &lt;path&gt; element, add bind:this={ wedges[d.label] }. You can check that this is populated correctly by using a $: console.log(wedges) reactive statement. When to call d3.transition()? . Now that we have the element references, how and when do we call d3.transition() on them? Because d3-transition is based on function calls, we need to pick the right time to call it ourselves. Let‚Äôs create a new function, transitionArcs() that will take care of the transition for us: . function transitionArcs() { // TODO Transition all arcs } . Then, in the reactive block that sets pieData, add a call to transitionArcs() at the very end, so that it runs whenever the data changes. How to read the previous state? . Finally, how do we read the previous state so we can transition between the old and new states? We will create a new variable to keep track of the old data, and we will update it every time the data changes. First, we create a new root level variable: . let oldData = []; . Then, in the same reactive block that we are setting pieData, we set oldData = pieData right before we update pieData (so that it stores the previous value). Great! We now have all the pieces we need to transition the arcs. The main idea is that instead of interpolating the arcs directly, we will interpolate the angles and generate new arcs from them. This is a variant of dataspace interpolation where data is interpolated rather than attribute or CSS property values. It is recommended to prefer CSS properties for transitions when possible, so will use the d CSS property to output the arc as a string. It may look a little weird because its name is only one letter long, but it works the same way as any other CSS property (except it only works on &lt;path&gt; elements). Unlike the attribute, its value is not just a series of path commands, but a path() function that a string argument with the path syntax, e.g. the CSS declaration d: path(\"M 0 0 L 100 0 L 100 100 L 0 100 Z\") is the same as the attribute d=\"M 0 0 L 100 0 L 100 100 L 0 100 Z\". You should also create a new top-level variable, transitionDuration, to control the duration of the transition. JS-based transition &amp; animation APIs typically expect durations in milliseconds. Set it to something large for now like e.g. 3000 (3 seconds), to make it easier to debug the transitions. You can also export it as a prop, so that users of the component can optionally override it. Adding an &lt;input type=number bind:value={transitionDuration}&gt; to your HTML can be very useful for debugging. It allows you to override the transition at runtime (e.g. to make certain problematic transitions very slow so you can inspect what is happening without slowing everything down. The general structure of our function will be: . function transitionArcs() { let wedgeElements = Object.values(wedges); d3.selectAll(wedgeElements) .transition('arc') .duration(transitionDuration) .styleTween('d', function (_, index) { let wedge = this; // Calculations that will only be done once per element go here return (t) =&gt; { // t is a number between 0 and 1 that represents the transition progress // TODO Interpolate the angles and return the path string that corresponds to t }; }); } . To calculate the arc, we need the angles. To calculate the angles, we need the data (old and new). To find the data, we need the wedge label. All we have is the index, but that‚Äôs all we need: . let label = Object.keys(wedges)[index]; . Now that we have the label, we can we can find the corresponding data items in oldData and pieData: . let d = pieData.find(d =&gt; d.label === label); let d_old = // ... Note that we may not have both. For now, let‚Äôs just not proceed in that case: . if (!d || !d_old) { return; } . We now have all four angles (start and end, old and new), and we can interpolate them. Rather than interpolating them separately, D3 actually allows us to interpolate the whole object: . // Always clone objects first, see note in https://d3js.org/d3-interpolate/value#interpolateObject let from = { ...d_old }; let to = { ...d }; let angleInterpolator = d3.interpolate(from, to); . d3.interpolate() will return a function that takes a number between 0 and 1 and returns an object with the same properties as from and to, but with all properties interpolated (we only care about startAngle and endAngle but we can just ignore the rest). We can feed that object into a function that generates the path string: . let interpolator = (t) =&gt; `path(\"${arcGenerator(angleInterpolator(t))}\")`; . Finally, we can now replace the return t =&gt; {...} line with the interpolator: . return interpolator; . If we try it out, you‚Äôll see that it works, at least when transitioning between pies with the same technologies: . Step 3.4: Transitioning between pies with different technologies . If you try transitioning between pies with different technologies however, you will notice that it all breaks down: . How can we fix this? . Right now, we simply exit the function if we can‚Äôt find both old and new data items for a wedge. What if we generated dummy objects with the right startAngle and endAngle that we want these wedges to transition from or to? We basically want an object where obj.startAngle and obj.endAngle are both equal to whatever wedge is drawn immediately before the place our wedge is appearing or disappearing from. The exact logic is a little tricky, so we‚Äôll just provide the code: . function getEmptyArc(label, data = pieData) { // Union of old and new labels in the order they appear let labels = d3.sort(new Set([...oldData, ...pieData].map((d) =&gt; d.label))); let labelIndex = labels.indexOf(label); let sibling; for (let i = labelIndex - 1; i &gt;= 0; i--) { sibling = data.find((d) =&gt; d.label === labels[i]); if (sibling) { break; } } let angle = sibling?.endAngle ?? 0; return { startAngle: angle, endAngle: angle }; } . Now, back in our tweening function, we can use getEmptyArc() as a fallback if we can‚Äôt find the old or new data: . let from = d_old ? {...d_old} : getEmptyArc(label, oldData); let to = // ... The test ? iftrue : iffalse syntax is the conditional operator which helps us get one value or another based on a test, much more compactly than an if() {...} block. We should now get a perfect transition regardless of the technologies present in the old and new pies, right? Except ‚Ä¶we don‚Äôt. If we preview, we see that all our effort did not make an iota of difference. Why is that? . The reason is that when we transition between pies with different technologies, the wedges are added to the DOM or removed from the DOM after our code has run. Thankfully, Svelte provides a feature dedicated to transitioning element addition or removal from the DOM: Svelte transitions! You can either use the same code for both states, via the transition:fn directive, or separate functions for entering and leaving, via the in:fn and out:fn directives. Svelte provides a bunch of predefined functions for common effects that you can just import, but in this case we‚Äôll define our own function. The general structure is quite similar to what we did for d3-transition, just with a different syntax: . function arc(wedge) { // Calculations that will only be done once per element go here // TODO use transitionArc() to get the data you need return { duration: transitionDuration, css: (t, u) =&gt; { // t is a number between 0 and 1 that represents the transition progress; u is 1 - t // TODO return CSS to be applied for the current t as a string, e.g. `fill: red` }, }; } . and then use it, by adding transition:arc to our wedge &lt;path&gt; (we can also pass parameters, but we won‚Äôt do that this time). There is a lot of the code we wrote in styleTween that we can reuse in animateArc. Let‚Äôs abstract it out into a new function, transitionArc() that accepts a wedge element and optionally its label (as a performance optimization): . function transitionArc(wedge, label) { label ??= Object.entries(wedges).find(([label, w]) =&gt; w === wedge)[0]; } . We can now move all our code from styleTween that calculates d, d_old, from, to, interpolator etc into transitionArc, which will just return an object like: . return { d, d_old, from, to, interpolator }; . After d and d_old are calculated, we also want to exit early if they are not different: . if (sameArc(d_old, d)) { return null; } . You should implement the sameArc() function. It should return true if either both arcs are falsy (e.g. one is undefined, the other null), or if both arcs have the same startAngle and endAngle. Last, it‚Äôs useful to also add a type property to the object returned so we know what type of transition we are dealing with: . let type = d ? (d_old ? 'update' : 'in') : 'out'; . We can now replace the code in styleTween() to use our new transitionArc() function: . let wedge = this; let label = Object.keys(wedges)[index]; let transition = transitionArc(wedge, label); return transition?.interpolator; . We can now use the same logic in our Svelte transition! Can you fill the arc() function so that it calls transitionArc() to compute the overall transition details and then use the returned interpolator to produce a CSS declaration for each frame? Remember that the interpolator that transitionArc() is returning gives us a CSS \"path(...)\" value, so all we need to do to turn this into what Svelte expects is to prepend \"d: \" to it. In ‚Äúout‚Äù transitions, i.e. where an existing element disappears, Svelte inverts the progression. Therefore, to get the right CSS string, you need to do do something like transition.type === \"out\" ? u : t instead of just t as the argument to the interpolator (i.e. transition.interpolator(transition.type === \"out\" ? u : t)). The css function needs to return a CSS string, not an object! If you get an error like ‚ÄúCannot read properties of undefined (reading ‚Äòsplit‚Äô)‚Äù it‚Äôs likely because you are returning the wrong type. If everything goes well, this is what you should see: . Step 3.5: Harmonizing easing across the D3 and Svelte transitions . We‚Äôre getting there, but there are some weird gaps. This is because we are trying to synchronize Svelte transitions with D3 transitions that have different parameters. While we did take care of applying the same duration across both, they use different easings! Svelte uses linear easing by default, whereas D3 uses easeCubic by default. We can fix this in one of two ways: . | By making the D3 transition linear as well, by adding .ease(d3.easeLinear) to the chain of function calls that make up the transition. | By making the Svelte transition cubic as well, by adding easing: d3.easeCubic to the object returned by arc(). | . Try them both and see what you prefer! . An easing function is just a function that takes a number between 0 and 1 and returns a number between 0 and 1. Therefore, you can use Svelte easing functions in D3 and vice versa. Left: Linear. Right: Cubic. ",
    "url": "/labs/lab09/#step-3-pie-chart-transition",
    "relUrl": "/labs/lab09/#step-3-pie-chart-transition"
  },"63": {
    "doc": "Lab 9: Animation & Scrollytelling",
    "title": "Step 4: Scrollytelling Part 1 (commits over time)",
    "content": "So far, we have been progressing through these visualizations by moving a slider. However, these visualizations both tell a story, the story of how our repo evolved. Wouldn‚Äôt it be cool if we could actually tell that story in our own words, and have the viewer progress through the visualizations as they progress through the narrative? . Let‚Äôs do that! . Step 4.0: Making our page a bit wider, if there is space . Because our scrolly will involve a story next to a visualization, we want to be able to use up more space, at least in large viewports. We can do this only for the Meta page, by adding a CSS rule where the selector is :global(body). :global() Tells Svelte not to rewrite that part of the selector, and that we will handle any scoping conflicts ourselves. Then, within the rule, we want to set the max-width to 120ch (instead of 100ch), but only as long as that doesn‚Äôt exceed 80% of the viewport width. We can do that like this: . max-width: min(120ch, 80vw); . Step 4.1: Using a scrolly . I prepared a &lt;Scrolly&gt; component for you to use in this step, you will find the documentation here: svelte-scrolly. If you find any bugs, please file bug reports directly at its bug tracker. There is an official Svelte package for this purpose: @sveltejs/svelte-scroller but it seems to only cater to scrollytelling cases where the narrative is overlaid on top of the visualization, which is not what we want here. To use &lt;Scrolly&gt;, you first need to install it (via npm install svelte-scrolly), then import it at the top of your component: . import Scrolly from 'svelte-scrolly'; . Then you can use it like this: . &lt;Scrolly bind:progress=\"{\" myProgressVariable }&gt; &lt;!-- Story here --&gt; &lt;svelte:fragment slot=\"viz\"&gt; &lt;!-- Visualizations here --&gt; &lt;/svelte:fragment&gt; &lt;/Scrolly&gt; . &lt;svelte:fragment&gt; is a special element that we can use when no suitable element exists, to avoid bloating our DOM with pointless wrapper elements. If there is an actual element that makes sense to use, you should use that instead! . Step 4.2: Creating a dummy narrative . Before you finish the lab, you should have something meaningful for the narrative. Don‚Äôt spend long on it; you can even generate it with ChatGPT as long as you check that the result is coherent, relevant, and tells a story that complements to the visualization next to it without simply repeating information in a less digestible format. For now, let‚Äôs just create some dummy text that we can use to test our scrollytelling so that writing the narrative is not a blocker: . {#each commits as commit, index } &lt;p&gt; On {commit.datetime.toLocaleString(\"en\", {dateStyle: \"full\", timeStyle: \"short\"})}, I made &lt;a href=\"{commit.url}\" target=\"_blank\" &gt;{ index &gt; 0 ? 'another glorious commit' : 'my first commit, and it was glorious' }&lt;/a &gt;. I edited {commit.totalLines} lines across { d3.rollups(commit.lines, D =&gt; D.length, d =&gt; d.file).length } files. Then I looked over all I had made, and I saw that it was very good. &lt;/p&gt; {/each} . Step 4.3: Creating a scroller for our commits over time . Move the story you just generated into the &lt;Scrolly&gt; component, and the scatterplot and pie chart into the &lt;svelte:fragment slot=\"viz\"&gt;. Then, bind the existing commitProgress variable to the progress variable of the &lt;Scrolly&gt; component (&lt;Scrolly bind:progress={commitProgress}&gt;). If you try it now, you should already see that the scroller is advancing the slider as you scroll! . Now that everything works, you should remove the slider as it conflicts with the scrolly, and it‚Äôs largely repeating information that the scrollbar already provides. One thing you could do is show a date next to the actual browser scrollbar thumb, so that users have a sense of where they are in the timeline. ",
    "url": "/labs/lab09/#step-4-scrollytelling-part-1-commits-over-time",
    "relUrl": "/labs/lab09/#step-4-scrollytelling-part-1-commits-over-time"
  },"64": {
    "doc": "Lab 9: Animation & Scrollytelling",
    "title": "Step 5: Scrollytelling Part 2 (file sizes)",
    "content": "Step 5.1: Adding another scrolly . Create another &lt;Scrolly&gt; instance for the file sizes visualization, after the commit visualization. You can copy and paste the same narrative as a temporary placeholder, but as with the one about commits, you should replace it with something meaningful before you finish the lab. The progress of this component is independent, so you will want to use a different variable for it (and similarly the corresponding maxTime variable and filtered data). Aside from that, the rest is very similar to Step 4. To make it more visually interesting, we can place that story on the right, and the unit visualization on the left. To do that, you add --scrolly-layout=\"viz-first\" to the component, which passes that CSS variable to it: . &lt;Scrolly bind:progress=\"{raceProgress}\" --scrolly-layout=\"viz-first\"&gt;&lt;/Scrolly&gt; . You can also specify --scrolly-viz-width=\"1.5fr\" to change the proportion of viz to story to 3:2 give it more space. Step 5.2: Limit number of updates . Our scrolly currently looks smooth if we scroll relatively slowly, but breaks down if we scroll fast: . This is where throttling and debouncing come in. They are both methods of achieving the same goal: limiting the number of times a function is called. | Throttling enforces a minimum interval between subsequent calls to the same action. | Debouncing defers an action until a certain period of time has passed since the last user action. | . The &lt;Scrolly&gt; component we are using supports both, via throttle and debounce props. Experiment with different values for these props (you don‚Äôt need to use both) to see what works best for your scrolly. The final result looks similar to this: . ",
    "url": "/labs/lab09/#step-5-scrollytelling-part-2-file-sizes",
    "relUrl": "/labs/lab09/#step-5-scrollytelling-part-2-file-sizes"
  },"65": {
    "doc": "Lab 9: Animation & Scrollytelling",
    "title": "Resources",
    "content": "Transitions &amp; Animations . Tech: . | Cheatsheet on animation-related technologies | An interactive guide to CSS transitions | . Scrollytelling . Cool examples: . | This is a teenager | A visual introduction to Machine Learning Part 1 | A visual introduction to Machine Learning Part 2 | Ben &amp; Jerry‚Äôs | . ",
    "url": "/labs/lab09/#resources",
    "relUrl": "/labs/lab09/#resources"
  },"66": {
    "doc": "Lab 9: Animation & Scrollytelling",
    "title": "Lab 9: Animation & Scrollytelling",
    "content": " ",
    "url": "/labs/lab09/",
    "relUrl": "/labs/lab09/"
  },"67": {
    "doc": "Lab 8: Geospatial Visualizations",
    "title": "Lab 8: Geospatial visualizations",
    "content": "In this lab, we will: . | Learn how to embed a Mapbox map into a webpage | Learn to add data-driven layers within a Mapbox canvas. | Learn to add custom SVG overlays on Mapbox maps and adapt to the map‚Äôs panning and zooming | Practice creating visualizations with large datasets of real-world data, by importing, parsing, filtering and binding to elements on the page. | . | Lab 8: Geospatial visualizations . | Check-off | What will we make? | Step 0: Start a new Svelte project . | Step 0.1: Create a new repository and push it to GitHub | Step 0.2: Publish your new project to GitHub Pages | Step 0.3: Start local server | Step 0.4: Edit routes/+page.svelte | Step 0.5: Add basic styling | Step 0.6: Add a bike favicon (optional) | . | Step 1: My first map . | Step 1.0: Create a Mapbox account | Step 1.1: Install Mapbox.js | Step 1.2: Add an element to hold the map | Step 1.3: Import Mapbox and connect it to our account | Step 1.4: Create the map | Step 1.5: Customizing the map (optional) | . | Step 2: Adding bike lanes . | Step 2.0: Getting familiar with the data | Step 2.1: Import the data | Step 2.2: Drawing bike lanes on the map | Step 2.3: Styling the bike lanes | Step 2.4: Adding Cambridge bike lanes | . | Step 3: Adding bike stations . | Step 3.1: Fetching and parsing the CSV | Step 3.2: Overlaying SVG on the map | Step 3.3: Adding station markers | Step 3.4: Adjusting station markers when map is zoomed/panned | . | Step 4: Visualizing bike traffic . | Step 4.1: Importing and parsing the traffic data | Step 4.2: Calculating traffic at each station | Step 4.3: Size markers according to traffic | Step 4.4: Adding a tooltip with exact traffic numbers (optional) | . | Step 5: Interactive data filtering . | Step 5.1: Adding the HTML and CSS for the slider | Step 5.2: Reactivity | Step 5.3: Filtering the data | Step 5.4: Performance optimizations (optional if you don‚Äôt have this problem) | . | Step 6: Visualizing traffic flow . | Step 6.1: Make circle color depend on traffic flow | Step 6.2: Adding a legend . | Design 1: Blocks | Design 2: Separate swatches &amp; labels | . | . | Step 7: Add your new project to your list of projects! | . | . ",
    "url": "/labs/lab08/#lab-8-geospatial-visualizations",
    "relUrl": "/labs/lab08/#lab-8-geospatial-visualizations"
  },"68": {
    "doc": "Lab 8: Geospatial Visualizations",
    "title": "Check-off",
    "content": "You need to come to TA Office Hours to get checked off for this lab (any of them, no appointment needed). Please fill in the check-off form at labs/8/checkoff before your check-off. Ideally you should fill in the form right before your check-off, but it‚Äôs ok if you fill it out in advance. Filling out the form is a necessary but not sufficient condition to get checked-off. You still need to come to office hours in person for your check-off to be processed. You could even fill it out before you finish the lab, since we won‚Äôt look at it until your check-off, but the closer to the end of the lab you fill it out, the more meaningful your feedback will be. ",
    "url": "/labs/lab08/#check-off",
    "relUrl": "/labs/lab08/#check-off"
  },"69": {
    "doc": "Lab 8: Geospatial Visualizations",
    "title": "What will we make?",
    "content": "In this lab, we will be building an immersive, interactive map visualization of bike traffic in the Boston area during different times of the day, shown in the screencast below: . | The underlying map shows Boston area roads and labels of neighborhoods. You can pan and zoom around as you would with services like Google Maps. | The green lines show bike lanes. We will be importing two datasets from the city governments of Boston and Cambridge for this. | The circles represent individual BlueBike stations. The size of each circle represents the amount of traffic at each station, while the color represents whether most traffic is entering or leaving the station. We will be using two datasets from BlueBikes to analyze bike traffic from about 260,000 individual rides from March 2024. | There is a slider at the top right that allows the user to filter the data for traffic at specific times of the day, and the circles will change size and color accordingly. | . There is a lot of room for styling and customization in this lab, and you are free to choose colors and themes that you prefer. So the screenshots and videos here are for reference only and your version can differ in appearance (but should be functionally the same!). ",
    "url": "/labs/lab08/#what-will-we-make",
    "relUrl": "/labs/lab08/#what-will-we-make"
  },"70": {
    "doc": "Lab 8: Geospatial Visualizations",
    "title": "Step 0: Start a new Svelte project",
    "content": "Step 0.1: Create a new repository and push it to GitHub . In this lab, we will be working on a new project and thus a new repository (that we will subsequently list on our projects page). Follow step 1 of lab 4 again to set up a new Svelte project with a new repo name this time. I called mine bikewatching, but you may want to get more creative with bike-related puns. üòâ . Step 0.2: Publish your new project to GitHub Pages . Also follow step 3 from the same lab to set up GitHub Pages for your new project. Step 0.3: Start local server . Run npm run dev --open to start the local server and open the project in your browser. Step 0.4: Edit routes/+page.svelte . Replace the content of routes/+page.svelte with a heading of your project name and a brief description of what it does. Commit and push the change, and make sure the website updates accordingly. Step 0.5: Add basic styling . Create a CSS file for global styles in src/lib called global.css and add the following content: . body { font: 100%/1.5 system-ui, sans-serif; display: flex; flex-flow: column; max-width: 80em; min-height: 100vh; box-sizing: border-box; margin: auto; padding: 1em; } . Then, in your src/routes/+page.svelte file, import the CSS file by adding this in a &lt;style&gt; element: . @import url('$lib/global.css'); . At this point, you should be seeing something like this: . Step 0.6: Add a bike favicon (optional) . To distinguish open tabs from your project, you can customize its favicon. In your static directory, add a favicon.svg file with the following content: . &lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"&gt; &lt;text y=\".9em\" font-size=\"90\"&gt;üö¥üèº‚Äç‚ôÄÔ∏è&lt;/text&gt; &lt;/svg&gt; . Feel free to use any emoji you want. Then edit src/app.html to change favicon.png to favicon.svg here: . &lt;link rel=\"icon\" href=\"%sveltekit.assets%/favicon.png\" /&gt; . You may also want to add a &lt;title&gt; with your project title, as a fallback for pages that don‚Äôt specify one. It should look like this: . You can now delete static/favicon.png if you want to keep things tidy, since we‚Äôre not using it anymore. ",
    "url": "/labs/lab08/#step-0-start-a-new-svelte-project",
    "relUrl": "/labs/lab08/#step-0-start-a-new-svelte-project"
  },"71": {
    "doc": "Lab 8: Geospatial Visualizations",
    "title": "Step 1: My first map",
    "content": "Step 1.0: Create a Mapbox account . Go to Mapbox and create an account using your MIT email. We will be using the free service tier which carries no charge. After you sign up, make sure to verify your email. Step 1.1: Install Mapbox.js . In your project directory, run the following command to install the Mapbox.js library: . npm install mapbox-gl . Step 1.2: Add an element to hold the map . We will largely follow the steps outlined in Mapbox‚Äôs official docs about Svelte integration. Let‚Äôs create an element to receive our map and bind it to a variable (we‚Äôll need to reference that when we tell Mapbox to create a map there): . &lt;div id=\"map\" /&gt; . We also want to add some CSS to ensure the map will have sufficient height: . #map { flex: 1; } . Try giving the map a background color to make sure it‚Äôs taking up the space you expect: . Step 1.3: Import Mapbox and connect it to our account . In order to use Mapbox, we first need to import its JS and CSS. In your src/routes/+page.svelte file, inside your &lt;script&gt; tag, add this: . import mapboxgl from 'mapbox-gl'; import '../../node_modules/mapbox-gl/dist/mapbox-gl.css'; . Then, we need to connect our account to it, by setting up our access token: . mapboxgl.accessToken = 'your access token here'; . To find your access token, you go to your account page on Mapbox: . Make sure your repo is private before you push your access token to GitHub! . Step 1.4: Create the map . To create the map, we create a new mapboxgl.Map object with settings that specify things like: . | which HTML element will hold the map? (container) This can be either an element reference, or a string with the element‚Äôs ID (which is what we will use) | What will the basemap look like? (style) | Map extent: . | What latitude and longitude will the map be centered on? (center: [longitude, latitude]) | How zoomed in will the map start off and what will be the min &amp; max zoom allowed? (zoom, minZoom, maxZoom) | . | . We want to do that only in the browser, so we will use the onMount lifecycle function, which we need to import separately from svelte: . import { onMount } from 'svelte'; onMount(() =&gt; { let map = new mapboxgl.Map({ /* options */ }); }); . In terms of what values to apply to options: . | For the container, we want to specify an id so we don‚Äôt have to worry about element references. | For the style, I used \"mapbox://styles/mapbox/streets-v12\" but you are welcome to choose any other style you like. Keep in mind that the busier the style, the harder it will be to see your data drawn on top of it. | Map extent: . | I used 12 for the zoom level (zoom) | You can use any centerpoint you like (I used MIT‚Äôs HQ), but it should be within the Cambridge &amp; Boston area. See below for how to find the latitude and longitude of any location. | . | . To find the coordinates of a location, you can enter it on Google Maps, and then right click and select the first option: . Another way is via the URL, it‚Äôs the part after the @: . Note that you will need to specify them in the reverse order, as Mapbox expects longitude first. If everything went well, you should have a map of Boston already! üéâ . Try panning and zooming around to see the map in action. Right click your map element and inspect it using the dev tools. Notice how Mapbox has added a bunch of elements to the DOM to render the map, including a &lt;canvas&gt; element that it uses to draw the map. Don‚Äôt like how your map looks? Try the optional step below! . Step 1.5: Customizing the map (optional) . The map style in its current form is quite functional as it shows a lot of useful waypoints and detail. However, sometimes we‚Äôd like to create a more stylized map to create a cohesive design language across our website, or simply to draw readers in with a unique design. Luckily, Mapbox provides a way to fully customize your map style using Mapbox Studio. To access Mapbox Studio, go back to your Mapbox account page and click ‚ÄúCreate a map in Studio‚Äù. Next, create a new style. From here, you are free to create a style however you‚Äôd like! As a starting point, many high quality map visualizations end up using a monochrome style, which you can find by clicking on ‚ÄúClassic template‚Äù, then ‚ÄúMonochrome‚Äù. Once you‚Äôve selected a variant from the list of styles, click on the ‚ÄúCustomize‚Äù buttom to add further customization, which will open up the actual studio, shown below. Mapbox styles are made up of layers and components (e.g. natural features, streets, points of interest, transit nodes, etc.). These items have properties which can be edited, such as the color or font, and can even be removed for a cleaner look. For example, if you wanted to make the color of the bodies of water a more natural blue color in this monochrome example, you could click on the ‚ÄúLand &amp; water water‚Äù layer in the left panel and simply adjust the color in the color picker. Once you are done playing around with the style, you can publish it so that it can be referenced in your code where you define the map, as you did in Step 1.4. To do so, click ‚ÄúPublish‚Äù in the top right corner of the studio interface. Then, click on the three dots next to your style name to find the style URL (it will look something like this: mapbox://styles/casillasenrique/clukyyerk007v01pb6r107k1o). Copy it and paste this URL in your style property when defining the mapboxgl.Map object. You should now see that your map uses your custom style! . Now, each time you edit your map style in Mapbox Studio and re-publish it, the updated style will automatically be applied in your website (note that sometimes the style takes a couple of minutes to update after publishing). ",
    "url": "/labs/lab08/#step-1-my-first-map",
    "relUrl": "/labs/lab08/#step-1-my-first-map"
  },"72": {
    "doc": "Lab 8: Geospatial Visualizations",
    "title": "Step 2: Adding bike lanes",
    "content": "Step 2.0: Getting familiar with the data . The City of Boston provides an open dataset with bike lanes in the city. The dataset is in GeoJSON format, which is just JSON that follows a specific structure, designed to represent geographical data. Download the dataset, open it in VS Code, and examine its structure. Try pressing Cmd + Shift + P to open the command palette, and then select ‚ÄúFormat document‚Äù to make the JSON more readable. Step 2.1: Import the data . Mapbox provides an addSource function to connect the map with an external data source. However, to use any of that, we first need to wait for the \"load\" event to fire on map. To avoid nesting all our code in an event listener, we can instead convert our onMount function to an async function, and then add this after the map creation: . await new Promise((resolve) =&gt; map.on('load', resolve)); . After that we can add the source: . map.addSource('boston_route', { type: 'geojson', data: 'https://bostonopendata-boston.opendata.arcgis.com/datasets/boston::existing-bike-network-2022.geojson?outSR=%7B%22latestWkid%22%3A3857%2C%22wkid%22%3A102100%7D', }); . What is boston_route? It‚Äôs just a name we made up to refer to this data source. You can name it anything you want, but it should be unique to this source. This won‚Äôt produce much of a visible result. To actually see something, we need to actually use the data to draw something. Step 2.2: Drawing bike lanes on the map . One way to do that is to use the map.addLayer() method to add a layer to our map that visualizes the data source. The this will look like this: . map.addLayer({ id, // A name for our layer (up to you) type, // one of the supported layer types, e.g. line, circle, etc. source: 'boston_route', // The id we specified in `addSource()` paint: { // paint params, e.g. colors, thickness, etc. }, }); . You should experiment with the different types of layers and paint properties to see what you can come up with, but chances are you‚Äôll settle on \"line\", to draw a network of bike routes as lines. Without any painting properties (i.e. an empty paint object), your map will look like this: . Step 2.3: Styling the bike lanes . You should look at the reference to see what you can do with the paint property, but chances are you will need at least the following: . | line-color to set the color of the lines (see caveat below) | line-width to make the lines thicker (default is 1) | line-opacity to make the lines translucent (0 is fully transparent, 1 is fully opaque). This is recommended so that the lines blend in to the rest of the map smoothly instead of obscuring it. | . Mapbox does not yet understand newer color formats like oklch(). You can see the docs on what it accepts, but at the time of writing it‚Äôs basically named colors (e.g. green), hex codes (e.g. #32D400), hsl() and rgb(). You can convert any valid CSS color to the closest rgb() or hsl() equivalent using this tool. If it shows two versions, you want the one marked ‚Äúgamut mapped‚Äù. Since these are properties in a JS object, and they contain hyphens, we need to wrap them in quotes, e.g. \"line-color\": \"green\", not line-color: \"green\". The exact styling is up to you. I went with a translucent green (40% opacity), and a line width of 3, which looked like this: . Step 2.4: Adding Cambridge bike lanes . Notice that our map right now only shows bike lanes from Boston. What about the numerous Cambridge ones?! . Fortunately, the City of Cambridge also provides bike lane data as a GeoJSON file. Follow a similar process as steps 2.0 - 2.3 to visualize Cambridge bike lanes as well. It should look like this: . At this point, you have likely ended up specifying your line styles twice: one in the Boston layer, and one in the Cambridge layer. This means that if we want to tweak them, we need to do it as many times as our layers. A good idea at this point (but entirely optional) is to specify the styling as a separate object that you reference in both places. ",
    "url": "/labs/lab08/#step-2-adding-bike-lanes",
    "relUrl": "/labs/lab08/#step-2-adding-bike-lanes"
  },"73": {
    "doc": "Lab 8: Geospatial Visualizations",
    "title": "Step 3: Adding bike stations",
    "content": "As you probably know, Bluebikes is a bicycle sharing program in the Boston area. They make many datasets publicly available, including real-time and historical data. The first Bluebikes dataset we will use in this lab is station information, which is a JSON file with names, IDs and coordinates (among other info) for each station. We have made a copy of this data in https://vis-society.github.io/labs/8/data/bluebikes-stations.csv. This is a CSV file where every row has the following properties: . | Number: a code like ‚ÄúL32001‚Äù | NAME: the station‚Äôs name, like ‚ÄúRailroad Lot and Minuteman Bikeway‚Äù | Lat: the station‚Äôs latitude, e.g. 42.41606457 | Long: the station‚Äôs longitude, e.g. -71.15336637 | Seasonal Status: whether the station is seasonal or not with statuses like ‚ÄúYear Round‚Äù, ‚ÄúWinter storage‚Äù etc. | Municipality: e.g. ‚ÄúCambridge‚Äù, ‚ÄúArligton‚Äù, etc. | Total Docks: the number of docks at the station as a number, e.g. 11 | . We will be using the latitude and longitude data to add markers to our map for each station. While we could use Mapbox‚Äôs addSource() and addLayer() functions to plot the stations as another layer on the map canvas (like we just did with bike lanes), we will try a different approach here so we can learn how to combine the two visualization methods we have already learned: Mapbox and D3. We will be adding an SVG layer on top of our map to hold the station markers, and use D3 to fetch and parse the data, and to draw the markers. Step 3.1: Fetching and parsing the CSV . Install d3 as we have done before: . npm install d3 . Then, in your src/routes/+page.svelte file, import d3 and fetch the CSV file using d3.csv(), as we did in the previous lab. You don‚Äôt need to download this file and include in your project, you can just fetch it directly from that URL. Let‚Äôs call the variable that will hold the station data stations. Make sure that the data is being fetched correctly by logging it to the console. That way you can also explore its structure. Step 3.2: Overlaying SVG on the map . We will start by appending an &lt;svg&gt; element on our map container: . &lt;div id=\"map\"&gt; &lt;svg&gt;&lt;/svg&gt; &lt;/div&gt; . If you preview your app right now, you won‚Äôt see anything different. However, if you right click on the map, you should be able to see the &lt;svg&gt; element we just inserted in the dev tools: . However, it doesn‚Äôt have the right size: it‚Äôs just a small rectangle in the top left corner. Worse yet, it‚Äôs actually rendered under the map, which becomes obvious if we give it a background color: . #map svg { background: yellow; opacity: 50%; } . Let‚Äôs fix all of that, by applying the following declarations: . | position: absolute and z-index: 1 so we can position it on top of the map (z-index does not work without positioning) | width: 100% and height: 100% to make it fill the map container | pointer-events: none so that we can still pan and move the map | . Make sure you‚Äôre now seeing something like this: . And then remove the background and opacity declarations ‚Äî they were only there as debugging aids, we don‚Äôt need them for the actual visualization. Step 3.3: Adding station markers . This step is similar to making the scatterplot in the previous lab: we just need to append a bunch of circles to the SVG element, each representing a station. The only tricky part here is positioning them so that they line up with the map. Fortunately, Mapbox has a great built-in function map.project(), which takes longitude and latitude values and returns the relative map coordinates in pixels. Why not just use D3 scales for this? map.project() takes into account many things: panning, zooming, even rotation. It‚Äôs certainly possible to calculate this manually, but it‚Äôs nontrivial. First, we need to move some of our variables outside the onMount() callback so that they are visible to the HTML template too. So instead of doing this: . onMount(async () =&gt; { let foo = /* calculate foo */ }); . We now want to do this: . let foo; onMount(async () =&gt; { foo = /* calculate foo */ }); . We need to do this for both stations (so we can loop over them in the HTML template), and map (so we can use map.project() to calculate coordinates). Initialize stations to [] so that you don‚Äôt get an error before the data is fetched. Now let‚Äôs define a helper function to give the circle center from latitude and longitude for every station: . function getCoords(station) { let point = new mapboxgl.LngLat(+station.Long, +station.Lat); let { x, y } = map.project(point); return { cx: x, cy: y }; } . In our template, we add an {#each} block to loop over the stations and append an SVG &lt;circle&gt; for each one, very much like we did in the previous lab. You can use any radius (r attribute) and fill/stroke color(s) you like (I used a radius of 5 and a fill of steelblue). While we could do something like this for the circle center: . &lt;circle cx={getCoords(station).cx} cy={getCoords(station).cy} r='5' fill='steelblue' /&gt; . A better way is to take advantage of a special syntax called spread attributes, which allows us to set multiple attributes at once: . &lt;circle {...getCoords(station)} r='5' fill='steelblue' /&gt; . If everything went well, you should see something like this: . Step 3.4: Adjusting station markers when map is zoomed/panned . Our map looks great when everything is stationary, but it all breaks down if we try to pan, zoom, rorate, or even resize the window: The stations are ‚Äústuck‚Äù in the same position like splatters on a window! . To fix this, we need to reposition the stations every time the map moves. Normally, Svelte‚Äôs reactivity takes care of updating state whenever needed without us having to worry about it (beyond making statements reactive). However, because our code depends on side effects, Svelte‚Äôs reactivity does not work as expected. What are side effects in this context? When you look at getCoords(station) it looks like the result depends on station ‚Äî and it does. But that‚Äôs not the full story. It also depends on things that are not visible by simply looking at the code, such as the current state of the map (zooming, panning, etc.). These are side effects. When the dependencies are not visible in the code, we need to take care of updating the state ourselves. Mapbox fires many events on map as we interact with it. Most useful in this case is the move event, which is fired whenever the map is moved (panned, zoomed, rotated, etc.). But how do we force Svelte‚Äôs to re-run getCoords() when the move event fires? . Svelte provides a {#key} block that can be used to force a re-render when a variable changes. We can easily do that by defining a variable that we increment every time the move event is fired. Let‚Äôs define our variable in the JS: . let mapViewChanged = 0; . Then we use a move event listener (using Mapbox‚Äôs own .on() function for events): . $: map?.on('move', (evt) =&gt; mapViewChanged++); . and then we wrap the code drawing the stations with: . {#key mapViewChanged} &lt;!-- render stations here --&gt; {/key} . If everything went well, you should now see the stations move around as you pan and zoom the map: . Some of you may have wondered why we needed to use {#key} at all. We could have gotten the exact same result by adding mapViewChanged as a dummy parameter in getCoords(), i.e. pass it as an argument to the function even though the function does not use it in any way. We just use {#key} because it makes our intent more clear, while the dummy parameter approach is more of a hack and could make it look like our code has a bug, rather than this being intentional. It also means it could break in the future if Svelte becomes smarter about detecting dependencies. We are currently drawing all the stations in the Bluebikes network, even though we can only actually see a few. You can explore tweaking the code to only draw stations that are currently visible on the map which should make it much faster. ",
    "url": "/labs/lab08/#step-3-adding-bike-stations",
    "relUrl": "/labs/lab08/#step-3-adding-bike-stations"
  },"74": {
    "doc": "Lab 8: Geospatial Visualizations",
    "title": "Step 4: Visualizing bike traffic",
    "content": "Marking the station position is nice, but doesn‚Äôt tell a very interesting story. What patterns could we uncover if we set the size of the circles according to the amount of traffic at each station? . A copy of the Bluebikes traffic data from March 2024 is at https://vis-society.github.io/labs/8/data/bluebikes-traffic-2024-03.csv. This is quite a large file (21 MB) containing more than 260,000 entries with the following fields: . | ride_id: A unique id of the ride | bike_type: electric or classic | started_at: the date and time the trip started in ISO 8601 format (e.g. \"2019-12-13 13:28:04.2860\") | ended_at: the date and time the trip ended in ISO 8601 format (e.g. \"2019-12-13 13:33:57.4370\") | start_station_id: the ID of the station where the trip started (e.g. A32000) | end_station_id: the ID of the station where the trip ended (e.g. A32000) | is_member: whether the rider is a member or not (1 or 0) | . This is a cut down / simplified version of the dataset that Bluebikes provides to reduce filesize. Step 4.1: Importing and parsing the traffic data . Just like the previous step, we will use d3.csv() to fetch the traffic data. You can fetch it directly from the URL, without hosting it yourself. Let‚Äôs call the variable that will hold the traffic data trips. Step 4.2: Calculating traffic at each station . Now that we have read the data into a JS object, we can use it to calculate station traffic volumes (arrivals, departures, and total traffic per station). As we have in the previous labs, we will use d3.rollup() (or d3.rollups()) to calculate arrivals and departures. First, we calculate them separately, like this: . departures = d3.rollup( trips, (v) =&gt; v.length, (d) =&gt; d.start_station_id, ); . We are calculating departures and arrivals inside onMount since we only need to calculate them once. However, you should make sure to declare the arrivals and departures variables outside onMount() so you can access them in your reactive code later! . Now, we want to add arrivals, departures, totalTraffic properties to each station, which we can do like this after both stations and trips have loaded: . stations = stations.map((station) =&gt; { let id = station.Number; station.arrivals = arrivals.get(id) ?? 0; // TODO departures // TODO totalTraffic return station; }); . You can log stations in the console after to make sure the properties have been added correctly. Step 4.3: Size markers according to traffic . Now, we can use this data structure to size the markers on the map according to the traffic at each station. Currently, all our circle radii are hardcoded. We should decide what the minimum and maximum radius should be (I went with 0 and 25), and then create a D3 scale to map our data domain [0, d3.max(stations, d =&gt; d.totalTraffic)] to this range of circle radii. However, there is a catch: if we just use a linear scale to calculate the circle‚Äôs radius, we will end up misrepresenting the data: for example, stations that have double the traffic would appear 4 times larger since the area of a circle is proportional to the square of its radius (A = œÄr¬≤). We want to use the circle area to visualize the variable, not the circle radius. To fix this, we will use a different type of scale: a square root scale. A square root scale is a type of power scale that uses the square root of the input domain value to calculate the output range value. If you did the optional step 4 in the previous lab you will be familiar with this already. Thankfully, the API is very similar to the linear scale we used before, the only thing that changes is that we use a different function name: . $: radiusScale = d3 .scaleSqrt() .domain([0, d3.max(stations, (d) =&gt; d.totalTraffic)]) .range([0, 25]); . Then, we can use this scale to calculate the radius of each circle in the SVG by passing the station traffic as a parameter to radiusScale(). If we look at our map right now, it looks like this: . Because our dots are opaque and overlapping, it‚Äôs hard to see the actual traffic patterns. Add a CSS rule for circle inside your svg rule, and experiment with different fill-opacity values and strokes to improve this. I used a steelblue fill, a fill-opacity of 60%, and a stroke of white, and this was the result: . Step 4.4: Adding a tooltip with exact traffic numbers (optional) . In addition to providing additional info, it helps us debug as well to be able to see the number of trips that each circle represents. We could add a tooltip in the same way we did in the previous lab but that‚Äôs fairly involved. Here we will do the quick and dirty way and use the default browser tooltips. To create those, all it takes is adding a &lt;title&gt; element inside each &lt;circle&gt; element with the number of trips: . &lt;circle&gt; &lt;!-- (omitting attributes for brevity) --&gt; &lt;title&gt; {station.totalTraffic} trips ({station.departures} departures, { station.arrivals} arrivals) &lt;/title&gt; &lt;/circle&gt; . We have applied pointer-events: none to the whole &lt;svg&gt;, so to be able to see our tooltips we need to override that on circles, by adding pointer-events: auto to our CSS rule for circle. If you want to go even further, you could explore adding a nicer tooltip, with more advanced information. Note that both SVG and HTML have a &lt;title&gt; element, but they are false friends, as they do different things! . ",
    "url": "/labs/lab08/#step-4-visualizing-bike-traffic",
    "relUrl": "/labs/lab08/#step-4-visualizing-bike-traffic"
  },"75": {
    "doc": "Lab 8: Geospatial Visualizations",
    "title": "Step 5: Interactive data filtering",
    "content": "Even with the styling improvements, it‚Äôs hard to make sense of all this data as currently displayed all at once. Let‚Äôs add some interactive filtering with a slider for arrival/departure time. Step 5.1: Adding the HTML and CSS for the slider . The first step is to add the HTML for our time filter, which includes the following elements: . | A slider (&lt;input type=range&gt;) with a min of -1 (no filtering) and a max of 1440 (the number of minutes in the day). | A &lt;time&gt; element to display the selected time. | An &lt;em&gt;(any time)&lt;/em&gt; element that will be shown when the slider is at -1. | A &lt;label&gt; around the slider and &lt;time&gt; element with some explanatory text (e.g. ‚ÄúFilter by time:‚Äù). | . Where you put it on the page is up to you. I added it under the &lt;h1&gt; and wrapped both with a &lt;header&gt;, to which I applied a display: flex, gap: 1em, and align-items: baseline to align them horizontally, then gave the label a margin-left: auto to push it all the way to the right. Make sure to place the &lt;time&gt; and &lt;em&gt; on their own line (e.g. via display: block) otherwise the contents of the &lt;time&gt; updating will move the slider and it will look very jarring. You would also want to style the &lt;em&gt; differently, e.g. with a lighter color and/or italic, to make it clear that it‚Äôs a different state. Here is a sample rendering of what you should have at this point: . Step 5.2: Reactivity . Now that we‚Äôve added our static HTML and CSS, let‚Äôs connect it with our code by having the slider update a variable that we can use to filter the data and outputting the currently selected time in the &lt;time&gt; element. First, let‚Äôs create a variable to hold the slider value, called timeFilter, that we initialize to -1 so that no filtering is done by default. let timeFilter = -1; . Then we can use bind:value on the slider to reactively update timeFilter as the slider is moved. Lastly, we need to display the selected time in the &lt;time&gt; element, which also serves as validation that we‚Äôve done the plumbing correctly. For that, let‚Äôs define a reactive variable that converts the number of minutes since midnight to a human-readable time string (using date.toLocaleString()): . $: timeFilterLabel = new Date(0, 0, 0, 0, timeFilter).toLocaleString('en', { timeStyle: 'short', }); . Then, all we need to do is print out timeFilterLabel via a reactive expression ({}) in the &lt;time&gt; element. It looks like this now: . Lastly, we want to display the &lt;em&gt; element only when the slider is at -1 and the &lt;time&gt; only when it is not, using a Svelte {#if} block. Step 5.3: Filtering the data . Our slider now looks like a filter, but doesn‚Äôt actually do anything. To make it work there are a few more things we need to do: . | Writing out the logic to filter the data, by creating filteredXXX versions of each of our root variables: . | A filteredTrips data structure that contains the trips that correspond to the filter. | filteredArrivals and filteredDepartures data structures that contain the arrivals and departures data after filtering. | A filteredStations data structure with stations that contain data that corresponds to the filter (i.e. filtered arrivals, departures, and total traffic). | . | Updating our HTML template to use these new data structures instead of the original ones. | . The trip data includes dates and times as strings, which are not directly comparable to the number of minutes since midnight that we have from the slider. To compare the two, we need to convert the date and time strings to a number of minutes since midnight. We will do this in two steps. First, we will replace the start and end date strings of each trip with Date objects. We only need to do this once, so we can do this in onMount(), right after trips has been fetched. Since trips is such a large dataset, we want to avoid setting it twice, so we will instead use the then() method of the Promise returned by d3.csv() to do this: . trips = await d3.csv(TRIP_DATA_URL).then(trips =&gt; { for (let trip of trips) { trip.started_at = /* ..... */ } return trips; }); . To convert each time and date string, we just do new Date(dateTimeString) (assuming dateTimeString is the date &amp; time string we are trying to convert). Now, we can define a function that takes a Date object and returns the number of minutes since midnight: . function minutesSinceMidnight(date) { return date.getHours() * 60 + date.getMinutes(); } . Then, we can use this function to filter the data to trips that started or ended within 1 hour before or after the selected time: . $: filteredTrips = timeFilter === -1 ? trips : trips.filter((trip) =&gt; { let startedMinutes = minutesSinceMidnight(trip.started_at); let endedMinutes = minutesSinceMidnight(trip.ended_at); return ( Math.abs(startedMinutes - timeFilter) &lt;= 60 || Math.abs(endedMinutes - timeFilter) &lt;= 60 ); }); . Now, we need to create new data structures that correspond to arrivals, departures, and stations but only for the filtered trips. We can call them filteredArrivals, filteredDepartures, and filteredStations. For filteredArrivals and filteredDepartures, all we need to do is copy the statements that set the original variables (arrivals and departures), convert them to reactive statements, and replace trips with filteredTrips. For filteredStations, we don‚Äôt actually need to do any filtering of the stations array (since it‚Äôs unlikely that there are stations with zero arrivals and departures for a given time), but we do need an array that contains updated data for station.arrivals, station.departures and station.totalTraffic that correspond to the filtered trips. This is where we need to be careful: if we simply do $: filteredStations = stations.map(station =&gt; {...}) and set properties on station, we will have modified our original station objects since in JS, objects are passed around by reference! To avoid this, before we set any property on these objects, we need to clone them. We can do that by doing this before we modify station: . station = { ...station }; . Last, we want to have bigger circles, since there‚Äôs fewer data. We can do that by changing the scale when a filter is applied, by making the scale conditional, i.e. instead of using a static [0, 25] as the range, we use [0, 25] when timeFilter is -1 and e.g. [3, 50] otherwise. You will find the conditional operator useful for this. The result right now should look like this: . Step 5.4: Performance optimizations (optional if you don‚Äôt have this problem) . Notice that moving the slider now does not feel as smooth as it did before we implemented the filtering. This is because every time we move the slider, we filter the trips, which is a relatively expensive operation given that we have over a quarter of a million of them! Worse, every time we do this filtering, nothing else can happen until the filtering ends, including things like the browser updating the slider position! This is commonly referred to as ‚Äúblocking the main thread‚Äù. There are many ways to improve this. Throttling and debouncing are two common techniques to limit the rate at which a certain (expensive) piece of code is called in response to user action. These are ‚Äúbrute force‚Äù in the sense that they work regardless of what the expensive operation or the user action is, but they can adversely affect the user experience, since they make the UI update less frequently. However, depending on the case, there are often ways to optimize the operation itself (e.g. by caching repetitive work), without any negative impact on the user experience. In this case, we can make the filtering a lot less expensive by presorting the trips into 1440 ‚Äúbuckets‚Äù, one for each minute of the day. Then, instead of going over 260 K trips every time the slider moves, we only need to go over the trips in the 120 buckets corresponding to the selected time. We start by defining two top-level variables to hold the departure and arrival ‚Äúbuckets‚Äù, which will be arrays with 1440 elements initially filled with empty arrays: . let departuresByMinute = Array.from({ length: 1440 }, () =&gt; []); let arrivalsByMinute = Array.from({ length: 1440 }, () =&gt; []); . Then, in onMount(), in the same callback where we converted trip.started_at and trip.ended_at to Date objects, we add: . let startedMinutes = minutesSinceMidnight(trip.started_at); departuresByMinute[startedMinutes].push(trip); // TODO: Same for arrivals . Why not use d3.group() or d3.groups()? These return different data structures and as you will see below, using an array of arrays simplifies our code a lot as we can use array.slice() to get a whole time range. Now let‚Äôs use our awesome new data structures to make our code faster! . First, we can get rid of filteredTrips, as we will be calculating filteredDepartures and filteredArrivals directly from departuresByMinute and arrivalsByMinute respectively. Let‚Äôs discuss calculating filteredDepartures and you can apply the same logic to filteredArrivals. For a first approximation, we can replace filteredTrips, with departuresByMinute.slice(timeFilter - 60, timeFilter + 60).flat(). There are two methods in this you may not have seen before: . | array.slice(start, end) returns a new array with the elements from start (inclusive) to end (exclusive). | array.flat() ‚Äúflattens‚Äù an array of arrays, so that the result is a single array with all the elements of the subarrays. | . Let‚Äôs now enjoy the fruits of our labor by moving the slider really fast ‚Äî it should now be smooth as butter! (or at least, much smoother than before) . But ‚Ä¶there is one bug. Can you spot it? Our code works great for times between 1 AM and 11 PM. However for times where the 2 hour window spans midnight, it doesn‚Äôt work so well: minMinute will be negative, or maxMinute will be greater than 1440. While array.slice() actually does accept negative numbers and numbers greater than the array length, it doesn‚Äôt do what we want in this case. In these cases, we basically want two separate array.slice() operations: one for the times before midnight and one for those after, that we then combine. Let‚Äôs create a helper function to do just that: . function filterByMinute(tripsByMinute, minute) { // Normalize both to the [0, 1439] range // % is the remainder operator: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder let minMinute = (minute - 60 + 1440) % 1440; let maxMinute = (minute + 60) % 1440; if (minMinute &gt; maxMinute) { let beforeMidnight = tripsByMinute.slice(minMinute); let afterMidnight = tripsByMinute.slice(0, maxMinute); return beforeMidnight.concat(afterMidnight).flat(); } else { return tripsByMinute.slice(minMinute, maxMinute).flat(); } } . Then, in the calculation for filteredDepartures, we use filterByMinute(departuresByMinute, timeFilter) instead of our previous filteredDepartures.slice().flat() operation. Don‚Äôt forget to do the same for filteredArrivals! . If everything goes well, it should now look like this: . Here they are side by side: . Left: original, Right: optimized ",
    "url": "/labs/lab08/#step-5-interactive-data-filtering",
    "relUrl": "/labs/lab08/#step-5-interactive-data-filtering"
  },"76": {
    "doc": "Lab 8: Geospatial Visualizations",
    "title": "Step 6: Visualizing traffic flow",
    "content": "Currently, we are visualizing traffic volume at different times of the day, but traffic direction also changes! In the morning, stations in downtown and near MIT campus tend to have a lot of arrivals, while in the evening they tend to see a lot of departures. In this step, we will use circle color to visualize traffic flow at different times of the day. Step 6.1: Make circle color depend on traffic flow . While it may seem that using a continuous color scale gives us more information, humans are very poor at associating continuous color scales with quantitative data (as we will see in the upcoming Color lecture), so using only three colors will actually make the traffic flow trends more salient. To do this, we will use a quantize scale, which is like a linear scale but with a discrete output range. We will use this scale to map a continuous number from 0 to 1 to a discrete number in the array [0, 0.5, 1]. It looks like this: . let stationFlow = d3.scaleQuantize().domain([0, 1]).range([0, 0.5, 1]); . Notice that this is not a reactive statement, since it does not depend on any variables. Then, on our circles, we calculate the ratio of departures to total traffic, map it to our discrete scale, and assign the result to a CSS variable: . &lt;!-- Other attributes ommitted for brevity --&gt; &lt;circle style=\"--departure-ratio: { stationFlow(station.departures / station.totalTraffic) }\" &gt;&lt;/circle&gt; . Then, in our CSS rule for circle we can use this variable to set the fill color: . --color-departures: steelblue; --color-arrivals: darkorange; --color: color-mix( in oklch, var(--color-departures) calc(100% * var(--departure-ratio)), var(--color-arrivals) ); fill: var(--color); . If everything went well, our current map looks like this: . Step 6.2: Adding a legend . Our visualization looks pretty cool, but it‚Äôs very hard to understand what the three colors mean. We can fix this by adding a legend to the map. Let‚Äôs first add some HTML for the legend after our map container: . &lt;div class=\"legend\"&gt; &lt;div style=\"--departure-ratio: 1\"&gt;More departures&lt;/div&gt; &lt;div style=\"--departure-ratio: 0.5\"&gt;Balanced&lt;/div&gt; &lt;div style=\"--departure-ratio: 0\"&gt;More arrivals&lt;/div&gt; &lt;/div&gt; . There are many ways to style this as a legend, but the following apply to most of them: . | Move the --color-departures, --color-arrivals, and --color variables to a new rule so that it applies to both #map circle and .legend &gt; div. | Apply flexbox to the legend container to align the items horizontally. | Apply margin-block to the legend container to give it some space from the map. | . Here are some example styles and a few pointers on how to implement them, but you‚Äôre welcome to experiment and come up with your own design: . Design 1: Blocks . One advantage of this is that it generalizes more nicely to more than 3 colors, and it‚Äôs fairly simple. | Here each child &lt;div&gt; has flex: 1 to make them take up equal space. | The gap is only 1px; just enough to prevent the colors from touching. | Note that text-align is different for each swatch. | Specify significantly more horizontal padding than vertical, otherwise they will not look even | If you have used different colors, make sure to pick the text color accordingly to ensure sufficient contrast. | . Design 2: Separate swatches &amp; labels . This is a little more advanced but looks much more like an actual legend. One downside of it is that it‚Äôs harder to generalize to more than 3 colors, as it looks like a legend for a categorical variable. | Uses a ::before pseudo-element with content: \"\" to create the swatches. | Uses an additional element for the ‚ÄúLegend:‚Äù label | Each child &lt;div&gt; also uses flexbox | Make sure the gap on child &lt;div&gt; is significantly smaller than the gap on the parent .legend to create the effect of the swatches being connected to the labels (design principle of proximity). | . Here is the final result: . ",
    "url": "/labs/lab08/#step-6-visualizing-traffic-flow",
    "relUrl": "/labs/lab08/#step-6-visualizing-traffic-flow"
  },"77": {
    "doc": "Lab 8: Geospatial Visualizations",
    "title": "Step 7: Add your new project to your list of projects!",
    "content": "Now that you have made this cool app to visualize bike traffic in the Boston area, time to claim credit for your work! Go back to your portfolio website, and add a new entry for this project, with a nice screenshot. You should also add a url field to each project, and add a link to it in the template (for projects that have a url field). ",
    "url": "/labs/lab08/#step-7-add-your-new-project-to-your-list-of-projects",
    "relUrl": "/labs/lab08/#step-7-add-your-new-project-to-your-list-of-projects"
  },"78": {
    "doc": "Lab 8: Geospatial Visualizations",
    "title": "Lab 8: Geospatial Visualizations",
    "content": " ",
    "url": "/labs/lab08/",
    "relUrl": "/labs/lab08/"
  },"79": {
    "doc": "Lab 6: Visualizing categorical data with D3",
    "title": "Lab 6: Visualizing categorical data with D3",
    "content": "In this lab, we will learn: . | What is SVG and what does it look like? | What does D3 do? | How can we use D3 to draw a pie chart? | How can we create reactive visualizations of data that is changing? | How can we make interactive visualizations that change the data displayed on the page? | How can we make interactive visualizations accessible? | . | Lab 6: Visualizing categorical data with D3 . | Check-off | Questions Doc | Slides (or lack thereof) | Step 0: Update project data and add years . | Step 0.1: Show year in each project | . | Step 1: Creating a pie chart with D3 . | Step 1.1: Create a &lt;Pie&gt; component and use it in your project page | Step 1.2: Create a circle with SVG | Step 1.3: Using a &lt;path&gt; instead of a &lt;circle&gt; | Step 1.3: Drawing our circle path with D3 | Step 1.4: Drawing a static pie chart with D3 | Step 1.5: Adding more data | . | Step 2: Adding a legend . | Step 2.1: Adding labels to our data | Step 2.2: Adding a legend . | Making the swatch look like a swatch | Applying layout on the list to make it look like a legend | . | Step 2.3: Laying out our pie chart and legend side by side | . | Step 3: Plotting our actual data . | Step 3.1: Making data a prop | Step 3.2: Passing project data via the data prop | . | Step 4: Adding a search for our projects and only visualizing visible projects . | Step 4.1: Adding a search field | Step 4.2: Basic search functionality | Step 4.3: Improving the search . | Make the search case-insensitive | Search across all project metadata, not just titles | . | Step 4.4: Visualizing only visible projects | . | Step 5: Turning the pie into filtering UI for our projects . | Step 5.1: Highlighting hovered wedge | Step 5.2: Highlighting selected wedge | Step 5.3: Filtering the projects by the selected year | Step 5.4: Fixing accessibility issues (Optional, but strongly recommended) | Step 5.5: Better selected wedge styling (Optional) | . | . | . ",
    "url": "/labs/lab06/",
    "relUrl": "/labs/lab06/"
  },"80": {
    "doc": "Lab 6: Visualizing categorical data with D3",
    "title": "Check-off",
    "content": "You need to come to TA Office Hours to get checked off for this lab (any of them, no appointment needed). Please fill in the check-off form at labs/6/checkoff before your check-off. Ideally you should fill in the form right before your check-off, but it‚Äôs ok if you fill it out in advance. Filling out the form is a necessary but not sufficient condition to get checked-off. You still need to come to office hours in person for your check-off to be processed. You could even fill it out before you finish the lab, since we won‚Äôt look at it until your check-off, but the closer to the end of the lab you fill it out, the more meaningful your feedback will be. ",
    "url": "/labs/lab06/#check-off",
    "relUrl": "/labs/lab06/#check-off"
  },"81": {
    "doc": "Lab 6: Visualizing categorical data with D3",
    "title": "Questions Doc",
    "content": "Add questions to the questions doc throughout the lecture and lab! After lab, come to office hours or ask on Discourse for futher questions! . ",
    "url": "/labs/lab06/#questions-doc",
    "relUrl": "/labs/lab06/#questions-doc"
  },"82": {
    "doc": "Lab 6: Visualizing categorical data with D3",
    "title": "Slides (or lack thereof)",
    "content": "No slides for this lab! Since the topic was covered in Monday‚Äôs lecture, it can be helpful for you to review the material from it. This lab is a little more involved than some of the previous labs, because it‚Äôs introducing the core technical material around data visualization. A robust understanding of these concepts will be invaluable as you work on your final projects, so spending time practicing them for the lab will be time will spent. ",
    "url": "/labs/lab06/#slides-or-lack-thereof",
    "relUrl": "/labs/lab06/#slides-or-lack-thereof"
  },"83": {
    "doc": "Lab 6: Visualizing categorical data with D3",
    "title": "Step 0: Update project data and add years",
    "content": "If you have not yet done Step 3 of Lab 5, you should do it now. Step 0.1: Show year in each project . Since we have the year data, we should show it in the project list. That way we can also more easily verify whether our code in the rest of the lab works correctly. Edit the &lt;Project&gt; component (in src/lib/Project.svelte) to show the year of the project. You can use any HTML you deem suitable and style it however you want. I placed it under the project description (you‚Äôll need to wrap both in the ame &lt;div&gt; otherwise they will occupy the same grid cell and overlap), and styled it like this: . In case you like the above, the font-family is Baskerville (a system font) and I‚Äôm using font-variant-numeric: oldstyle-nums to make the numbers look a bit more like they belong in the text. From this point onwards, there are only two files that we will be editing in this lab: . | src/lib/Pie.svelte (created in Step 1.1) | src/routes/projects/+page.svelte (our projects page) | . ",
    "url": "/labs/lab06/#step-0-update-project-data-and-add-years",
    "relUrl": "/labs/lab06/#step-0-update-project-data-and-add-years"
  },"84": {
    "doc": "Lab 6: Visualizing categorical data with D3",
    "title": "Step 1: Creating a pie chart with D3",
    "content": "Step 1.1: Create a &lt;Pie&gt; component and use it in your project page . To keep the code manageable, we will be creating our pie chart in a separate component, called &lt;Pie&gt;. Create a new Pie.svelte file in src/lib and add some text in it, e.g. ‚ÄúHello from Pie.svelte‚Äù. Then, in your projects page, import the &lt;Pie&gt; component: . import Pie from '$lib/Pie.svelte'; . and then use it like &lt;Pie /&gt;. Save, and make sure the text you wrote in Pie.svelte is displayed in your project page to make sure all plumbing is working. Step 1.2: Create a circle with SVG . The first step to create a pie chart with D3 is to create an &lt;svg&gt; element in the &lt;Pie&gt; component. D3 is a library that translates high level visualization concepts into low level drawing commands. The technology currently used for these drawing commands is called SVG and is a language for drawing vector graphics. This means that instead of drawing pixels on a screen, SVG draws shapes and lines using descriptions of their geometry (e.g. centerpoints, radius, start and end coordinates, etc.). It looks very much like HTML, with elements delineated by tags, tags delineated by angle brackets, and attributes within those tags. However, instead of content-focused elements like &lt;h1&gt; and &lt;p&gt;, we have drawing-focused elements like &lt;circle&gt; and &lt;path&gt;. SVG code can live either in separate files (with an .svg extension) or be embedded in HTML via the &lt;svg&gt; elements. We will give it a viewBox of -50 -50 100 100 which defines the coordinate system it will use internally. In this case, it will have a width and height of 100, and the (0, 0) point will be in the center (which is quite convenient for a pie chart!). We can use these coordinates to e.g. draw a red circle within it with a center at (0, 0) and a radius of 50 via the SVG &lt;circle&gt; element: . &lt;svg viewBox=\"-50 -50 100 100\"&gt; &lt;circle cx=\"0\" cy=\"0\" r=\"50\" fill=\"red\" /&gt; &lt;/svg&gt; . Since we have not given the graphic any explicit dimensions, by default it will occupy the entire width of its parent container and will have an aspect ratio of 1:1 (as defined by its coordinate system). It will look a bit like this: . We can add some CSS in the component‚Äôs &lt;style&gt; element to limit its size a bit and also add some spacing around it: . svg { max-width: 20em; margin-block: 2em; /* Do not clip shapes outside the viewBox */ overflow: visible; } . This will make it look like this: . Step 1.3: Using a &lt;path&gt; instead of a &lt;circle&gt; . A &lt;circle&gt; element is an easy way to draw a circle, but we can‚Äôt really go anywhere from there: it can only draw circles. If we were drawing pie charts directly in SVG, we‚Äôd need to switch to another element, that is more complicated, but also more powerful: the &lt;path&gt; element. The &lt;path&gt; element can draw any shape, but its syntax is a little unwieldy. It uses a string of commands to describe the shape, where each command is a single letter followed by a series of numbers that specify command parameters. All of this is stuffed into a single d attribute. Here is our circle as a &lt;path&gt; element: . &lt;svg viewBox=\"-50 -50 100 100\"&gt; &lt;path d=\"M -50 0 A 50 50 0 0 1 50 0 A 50 50 0 0 1 -50 0\" fill=\"red\" /&gt; &lt;/svg&gt; . This draws the circle as two arcs, each of which is defined by its start and end points, its radius, and a few flags that control its shape. Before you run away screaming, worry not, because D3 saves us from this chaos by generating the path strings for us. Let‚Äôs use it then! . Step 1.3: Drawing our circle path with D3 . Now let‚Äôs use D3 to create the same path, as a first step towards our pie chart. First, we need to add D3 to our project so we can use it in our JS code. Open the VS Code terminal and run: . npm install d3 . Ignore any warnings about peer dependencies. So now that D3 is installed how do we use it? In your Pie component, add the following import statement at the top of the &lt;script&gt; element: . import * as d3 from 'd3'; . Now let‚Äôs use the d3.arc() function from the D3 Shape module to create the path for our circle. This works with two parts: first, we create an arc generator which is a function that takes data and returns a path string. We‚Äôll configure it to produce arcs based on a radius of 50 by adding .innerRadius(0).outerRadius(50). If you instead want to create a donut chart, it‚Äôs as easy as changing the inner radius to something other than 0! . let arcGenerator = d3.arc().innerRadius(0).outerRadius(50); . We then generate an arc by providing a starting angle (0) and an ending angle in radians (2 * Math.PI) to create a full circle: . let arc = arcGenerator({ startAngle: 0, endAngle: 2 * Math.PI, }); . Did we need two statements? Not really, we only did so for readability. This would have been perfectly valid JS: . let arc = d3.arc().innerRadius(0).outerRadius(50)({ startAngle: 0, endAngle: 2 * Math.PI, }); . Now that we have our path, we can add it to our SVG: . &lt;svg viewBox=\"-50 -50 100 100\"&gt; &lt;path d=\"{arc}\" fill=\"red\" /&gt; &lt;/svg&gt; . Step 1.4: Drawing a static pie chart with D3 . ‚ÄôNuff dilly-dallying with circles, let‚Äôs cut to the chase and draw a pie chart! Let‚Äôs draw a pie chart with two slices, one for each of the numbers 1 and 2, i.e. a 33% and 66% slice. let data = [1, 2]; . We‚Äôll draw our pie chart as two &lt;path&gt; elements, one for each slice. First, we need to calculate the total, so we can then figure out what proportion of the total each slice represents: . let total = 0; for (let d of data) { total += d; } . Then, we calculate the start and end angles for each slice: . let angle = 0; let arcData = []; for (let d of data) { let endAngle = angle + (d / total) * 2 * Math.PI; arcData.push({ startAngle: angle, endAngle }); angle = endAngle; } . And now we can finally calculate the actual paths for each of these slices: . let arcs = arcData.map((d) =&gt; arcGenerator(d)); . Now let‚Äôs wrap our &lt;path&gt; element with an {#each} block since we are now generating multiple paths: . {#each arcs as arc} &lt;path d=\"{arc}\" fill=\"red\" /&gt; {/each} . If we reload at this point, all we see is ‚Ä¶the same red circle. A bit anticlimactic, isn‚Äôt it? . However, if you inspect the circle, you will see it actually consists of two &lt;path&gt; elements. We just don‚Äôt see it, because they‚Äôre both the same color! . Let‚Äôs assign different colors to our slices, by adding a colors array and using it to set the fill attribute of our paths: . let colors = ['gold', 'purple']; . Then we convert our code to use it: . {#each arcs as arc, i} &lt;path d=\"{\" arc } fill=\"{\" colors[i] } /&gt; {/each} . The result should look like this: . Phew! üòÆ‚Äçüí® Finally an actual pie chart! . While it does no harm, make sure to clean up your code by removing the arc variable we defined early on in this step, since we‚Äôre no longer using it. Now let‚Äôs clean up the code a bit. D3 actually provides a higher level primitive for what we just did: the d3.pie() function. Just like d3.arc(), d3.pie() is a function that returns another function, which we can use to generate the start and end angles for each slice in our pie chart instead of having to do it ourselves. This ‚Ä¶slice generator function takes an array of data values and returns an array of objects, each of whom represents a slice of the pie and contains the start and end angles for it. We still feed these objects to our arcGenerator to create the paths for the slices, but we don‚Äôt have to create them manually. It looks like this: . let data = [1, 2]; let sliceGenerator = d3.pie(); let arcData = sliceGenerator(data); let arcs = arcData.map((d) =&gt; arcGenerator(d)); . Step 1.5: Adding more data . Let‚Äôs tweak the data array to add some more numbers: . let data = [1, 2, 3, 4, 5, 5]; . Our pie chart did adapt, but all the new slices are black! They don‚Äôt even look like four new slices, but rather a huge black one. üò≠ . This is because we‚Äôve only specified colors for the first two slices. We could specify more colors, but this doesn‚Äôt scale. Thankfully, D3 comes with both ordinal and sequential color scales that can generate colors for us based on our data. For example to use the schemePaired color scale we use the d3.scaleOrdinal() function with that as an argument: . let colors = d3.scaleOrdinal(d3.schemeTableau10); . We also need to change colors[index] to colors(index) in our template, since colors is now a function that takes an index and returns a color. This is the result: . Success! üéâ . ",
    "url": "/labs/lab06/#step-1-creating-a-pie-chart-with-d3",
    "relUrl": "/labs/lab06/#step-1-creating-a-pie-chart-with-d3"
  },"85": {
    "doc": "Lab 6: Visualizing categorical data with D3",
    "title": "Step 2: Adding a legend",
    "content": "Our pie chart looks good, but there is no way to tell what each slice represents. Let‚Äôs fix that! . Step 2.1: Adding labels to our data . First, even our data does not know what it is ‚Äî it does not include any labels, but only random quantities. D3 allows us to specify more complex data, such as an array of objects: . let data = [ { value: 1, label: 'apples' }, { value: 2, label: 'oranges' }, { value: 3, label: 'mangos' }, { value: 4, label: 'pears' }, { value: 5, label: 'limes' }, { value: 5, label: 'cherries' }, ]; . However, to use this data, we need to change our sliceGenerator to tell it how to access the values in our data: . let sliceGenerator = d3.pie().value((d) =&gt; d.value); . If everything is set up correctly, you should now see the same pie chart as before. Step 2.2: Adding a legend . The colors D3 scales return are just regular CSS colors. We can actually create a legend with plain HTML and CSS. We can use a &lt;ul&gt; element, but a &lt;dl&gt; would have been fine too. We use the same {#each} block to create a list item for each slice, and use a CSS variable (e.g. --color) to pass the color to CSS for styling. &lt;ul class=\"legend\"&gt; {#each data as d, index} &lt;li style=\"--color: { colors(index) }\"&gt; &lt;span class=\"swatch\"&gt;&lt;/span&gt; {d.label} &lt;em&gt;({d.value})&lt;/em&gt; &lt;/li&gt; {/each} &lt;/ul&gt; . At this point, it doesn‚Äôt look like a legend very much: . We need to add some CSS to make it look like an actual legend. You can experiment with the styles to make it look the way you want, but we‚Äôre including some tips below. Making the swatch look like a swatch . You could probably want to make the swatch look like a swatch by: . | Making it a square by e.g. giving it the same width and height, or one the two plus aspect-ratio: 1 / 1 | Giving it a background color of var(--color) | You may find border-radius useful to add slight rounding to the corners or even make it into a full circle by setting it to 50%. | . Note that because &lt;span&gt; is an inline element by default, to get widths and heights to work, you need to set it to display: inline-block or inline-flex (or apply display: flex or display: grid on its parent). Applying layout on the list to make it look like a legend . I applied display: grid to the &lt;ul&gt; (via suitable CSS rules). To make the grid make best use of available space, I used an auto-fill grid template, and set the min-width of the list items to a reasonable value. grid-template-columns: repeat(auto-fill, minmax(9em, 1fr)); . This lays them all out on one line if there‚Äôs space, or multiple columns if not. I also applied display: flex on each &lt;li&gt; (via suitable CSS rules) to vertically center align the text and the swatch (align-items: center) and give it spacing via gap . Make sure the gap you specify for the &lt;li&gt;s is smaller than the gap you specify for the whole legend‚Äôs grid, to honor the design principle of Proximity. You probably also want to specify a border around the legend, as well as spacing inside it (padding) and around it (margin). The final result will vary depending on your exact CSS, but this was mine: . Step 2.3: Laying out our pie chart and legend side by side . Right now, our pie chart and legend are occupying a ton of space on our page. It‚Äôs more common to place the legend to the right of the pie chart, so let‚Äôs do that. We can do that by wrapping both the pie chart and the legend with a shared container, and using a flex layout on it. &lt;div class=\"container\"&gt; &lt;svg viewBox=\"-50 -50 100 100\"&gt; &lt;!-- ... --&gt; &lt;/svg&gt; &lt;ul class=\"legend\"&gt; &lt;!-- ... --&gt; &lt;/ul&gt; &lt;/div&gt; . You can experiment with the horizontal alignment (align-items) and spacing (gap) of the pie chart and legend, but I would recommend applying flex: 1 to the legend, so that it occupies all available width. If everything worked well, you should now see the pie chart and legend side by side and it should be responsive, i.e. adapt well to changes in the viewport width. ",
    "url": "/labs/lab06/#step-2-adding-a-legend",
    "relUrl": "/labs/lab06/#step-2-adding-a-legend"
  },"86": {
    "doc": "Lab 6: Visualizing categorical data with D3",
    "title": "Step 3: Plotting our actual data",
    "content": "So far, we‚Äôve been using meaningcless hardcoded data for our pie chart. Let‚Äôs change that and plot our actual project data, and namely projects per year. Step 3.1: Making data a prop . Hardcoding data within the pie component would give us a pie chart component that can only be used for one specific pie chart. That‚Äôs not very useful! Instead, we want to make data a prop of the component, so we can pass it to the component from the page that uses it. There are two parts to that change: First, changing our data declaration to an export (and its value to an empty array, which will be its default value): . export let data = []; . Then, we can pass the same data we‚Äôve used in step 2.1 from our projects page this time, by first assigning them to a variable: . let pieData = [ { value: 1, label: 'apples' }, { value: 2, label: 'oranges' }, { value: 3, label: 'mangos' }, { value: 4, label: 'pears' }, { value: 5, label: 'limes' }, { value: 5, label: 'cherries' }, ]; . and then passing it to the &lt;Pie&gt; component: . &lt;Pie data=\"{pieData}\" /&gt; . If everything worked well, we should now see the same pie chart (and legend) as before. Step 3.2: Passing project data via the data prop . Now that we‚Äôre passing the data from the Projects page, let‚Äôs calculate the labels and values we‚Äôll pass to the pie chart from our project data. We will be displaying a chart of projects per year, so the labels would be the years, and the values the count of projects for that year. But how to get from our project data to that array? . D3 does not only provide functions to generate visual output, but includes powerful helpers for manipulating data. In this case, we‚Äôll use the d3.rollups() function to group our projects by year and count the number of projects in each bucket: . let rolledData = d3.rollups( projects, (v) =&gt; v.length, (d) =&gt; d.year, ); . This will give us an array of arrays that looks like this: . [ ['2024', 3], ['2023', 4], ['2022', 3], ['2021', 2], ]; . We will then convert this array to the type of array we need by using array.map(). Replace your previous pieData declaration with: . let pieData = rolledData.map(([year, count]) =&gt; { return { value: count, label: year }; }); . That‚Äôs it! The result should look like this: . ",
    "url": "/labs/lab06/#step-3-plotting-our-actual-data",
    "relUrl": "/labs/lab06/#step-3-plotting-our-actual-data"
  },"87": {
    "doc": "Lab 6: Visualizing categorical data with D3",
    "title": "Step 4: Adding a search for our projects and only visualizing visible projects",
    "content": "At first glance, this step appears a little unrelated to the rest of this lab. However, it demonstrates how these visualizations don‚Äôt have to be static, but can reactively update with the data, a point we will develop further in the next lab. Step 4.1: Adding a search field . First, declare a variable that will hold the search query in the &lt;script&gt; element of your projects page: . let query = ''; . Then, add an &lt;input type=\"search\"&gt; to the HTML, and bind its value to that variable: . &lt;input type=\"search\" bind:value=\"{query}\" aria-label=\"Search projects\" placeholder=\"üîç Search projects‚Ä¶\" /&gt; . As usual, you can print out the variable in your HTML via {query} to make sure the binding works as expected. Step 4.2: Basic search functionality . This is the same regardless of whether you have implemented Step 7 of Lab 4 or not, since we‚Äôll be filtering the projects by changing the data that we are displaying. However, in Lab 4 we avoided having to change our single project template by doing . let p = info; . Since in this step we will be reactively updating the projects displayed, it‚Äôs time to actually delete that alias and edit our expressions to use the actual prop name (e.g. use info.title instead of p.title). To filter the project data, we will use the array.filter() function, which returns a new array containing only the elements that pass the test implemented by the provided function. For example, this is how we‚Äôd search in project titles: . let filteredProjects = projects.filter((project) =&gt; { if (query) { return project.title.includes(query); } return true; }); . return project.title.includes(query); by itself would have actually worked fine, since if the query is \"\", then every project title contains it anyway. However, there is no reason to do extra work if we don‚Äôt have to. For this to work, we‚Äôd need to use filteredProjects instead of projects in our template that displays the projects. If you try this out, you‚Äôll notice that no filtering is actually happening. This is because we are only executing the filtering once, when our search query is empty . For the filtering to re-run whenever the query changes, we need to make it a reactive statement by using the $: prefix: . let filteredProjects; $: filteredProjects = projects.filter((project) =&gt; { if (query) { return project.title.includes(query); } return true; }); . If you try it now, filtering should work! . Step 4.3: Improving the search . Finding projects by title is a good first step, but it could make it hard to find a project. Also, it‚Äôs case-sensitive, so e.g. searching for ‚Äúsvelte‚Äù won‚Äôt find ‚ÄúSvelte‚Äù. Let‚Äôs fix both of these! . Make the search case-insensitive . To do this, we can simply convert both the query and the title to lowercase before comparing them by using the string.toLowerCase() function: . $: filteredProjects = projects.filter((project) =&gt; { if (query) { return project.title.toLowerCase().includes(query.toLowerCase()); } return true; }); . Search across all project metadata, not just titles . For the second, we can use the Object.values() function to get an array of all the values of a project, and then join them into a single string, which we can then search in the same way: . $: filteredProjects = projects.filter((project) =&gt; { let values = Object.values(project).join('\\n').toLowerCase(); return values.includes(query.toLowerCase()); }); . Try it again. Both issues should be fixed at this point. Step 4.4: Visualizing only visible projects . As it currently stands, our pie chart and legend are not aware of the filtering we are doing. Wouldn‚Äôt it be cool if we could see stats only about the projects we are currently seeing? . There are two components to this: . | Calculate pieData based on filteredProjects instead of projects | Make it update reactively. | . The former is a simple matter of replacing the variable name used in your projects page **from projects to filteredProjects. The second does involve something we have not yet done: how do we turn something that consists of several lines into a reactive statement? So far we‚Äôve only been prepending single commands with $:! . The answer is that we can use a block statement ({}) to contain multiple commands, and then prepend that with $:: . // Make sure the variable definition is *outside* the block let pieData; $: { // Initialize to an empty object every time this runs pieData = {}; // Calculate rolledData and pieData based on filteredProjects here } . If you try the search out at this point, you will see that the legend is updating, but the pie chart is not. This is because none of the calculations in the &lt;Pie&gt; component are actually reactive. We need to make them reactive by separating the variable declarations from the value calculations and using the $: prefix on the latter. This only applies to arcData and arcs, since none of the rest needs to actually change. Once we do that, our pie chart becomes beautifully reactive as well: . ",
    "url": "/labs/lab06/#step-4-adding-a-search-for-our-projects-and-only-visualizing-visible-projects",
    "relUrl": "/labs/lab06/#step-4-adding-a-search-for-our-projects-and-only-visualizing-visible-projects"
  },"88": {
    "doc": "Lab 6: Visualizing categorical data with D3",
    "title": "Step 5: Turning the pie into filtering UI for our projects",
    "content": "Visualizations are not just output. Interactive visualizations allow you to interact with the data as well and explore it more effective ways. In this step, we will turn our pie chart into a filtering UI for our projects, so we can click on the wedge or legend entry for a given year and only see projects from that year. It will work a bit like this: . Ready? Let‚Äôs go! . Step 5.1: Highlighting hovered wedge . While there are some differences, SVG elements are still DOM elements. This means they can be styled with regular CSS, although the available properties are not all the same. Let‚Äôs start by adding a hover effect to the wedges. What about fading out all other wedges when a wedge is hovered? We can target the &lt;svg&gt; element when it contains a hovered &lt;path&gt; by using the :has() pseudo-class: . svg:has(path:hover) { path:not(:hover) { opacity: 50%; } } . This gives us something like this: . Why not just use svg:hover instead of svg:has(path:hover)? Because the &lt;svg&gt; can be covered without any of the wedges being hovered, and then all wedges would be faded out. We can even make it smooth by adding a transition property to the &lt;path&gt; elements: . path { transition: 300ms; } . Which would look like this: . Before (left) and after (right) adding the transition Step 5.2: Highlighting selected wedge . In this step, we will be able to click on a wedge and have it stay highlighted. Its color will change to indicate that it‚Äôs highlighted, and its legend item will also be highlighted. Pages using the component should be able to read what the selected wedge is, if any. Clicking on a selected wedge should deselect it. First, create a selectedIndex prop and initialize it to -1 (a convention to mean ‚Äúno index‚Äù): . export let selectedIndex = -1; . Then, add an on:click event on your &lt;path&gt; to set it to the index of the wedge that was clicked: . {#each arcs as arc, index} &lt;path d={arc} fill={ colors(index) } on:click={e =&gt; selectedIndex = index} /&gt; {/each} . Ignore the accessibility warnings for now, we will address them at the end. Right now, there is no observable difference when we click on a wedge, since we‚Äôre not doing anything with the selectedIndex. Let‚Äôs use it to conditionally apply a selected class, that we can then use in our CSS to style selected wedges differently: . {#each arcs as arc, index} &lt;path d={arc} fill={ colors(index) } class:selected={selectedIndex === index} on:click={e =&gt; selectedIndex = index} /&gt; {/each} . You can apply the exact same class:selected directive to conditionally apply a selected class to the legend items as well. Then let‚Äôs apply CSS to change the color of the selected wedge and legend item: .selected { --color: oklch(60% 45% 0) !important; &amp;:is(path) { fill: var(--color); } } . Feel free to use any color you want, as long as it‚Äôs disctinct from the actual wedge colors. Why the !important? Because we are trying to override the --color variable set via the style attribute, which has higher precedence than any selector. Lastly, we want to be able to deselect a wedge by clicking on it again. This is as simple as setting selectedIndex to -1 if it‚Äôs already the index of the selected wedge, i.e. changing the assignment to . selectedIndex = selectedIndex === index ? -1 : index; . You can improve UX by indicating that a wedge is clickable through the cursor: . path { /* ... */ cursor: pointer; } . Step 5.3: Filtering the projects by the selected year . Selecting a wedge doesn‚Äôt really do that much right now. However, the ability to select a wedge becomes truly powerful when handled by the parent page. In src/routes/projects/+page.svelte, add a variable to hold the selected index: . let selectedYearIndex = -1; . Then bind it to the &lt;Pie&gt; component‚Äôs selectedIndex prop: . &lt;Pie data=\"{pieData}\" bind:selectedIndex=\"{selectedYearIndex}\" /&gt; . Make sure that it works by printing out the selected index in an expression ({selectedYearIndex}) somewhere on the page. Now define a reactive variable to hold the selected year: . let selectedYear; $: selectedYear = selectedYearIndex &gt; -1 ? pieData[selectedYearIndex].label : null; . Similarly, print it out somewhere on the page to make sure it works before proceeding. Now that we have the selected year, we can filter the projects by it! . Our first thought might be to do this filtering by adding another conditional in our array.filter() call from Step 4: . $: filteredProjects = projects.filter((project) =&gt; { if (query) { // ... } if (selectedYear) { return project.year === selectedYear; } return true; }); . However, this will produce an error: . But even if it worked, it would make for some pretty jarring user experience: because we are using the same filteredProjects variable for the pie chart as well, it would make all other years disappear from the pie chart when a year is selected. The only way to select another year would be to deselect the current one. Instead, we should use another variable to hold the result of that filtering, e.g. filteredByYear. Then, use filteredByYear in your template where you are displaying the actual projects, but leave filteredProjects as it is for the pie chart. That‚Äôs it! It should work now. Step 5.4: Fixing accessibility issues (Optional, but strongly recommended) . Now that we got the basic functionality working, let‚Äôs address the accessibility warnings. It‚Äôs important to understand why these warnings are there. The path elements are not focusable by default, so they cannot be interacted with using the keyboard. This means that as it currently stands, people who cannot use a mouse or other pointing device cannot select a wedge. Even users who can use a mouse, often find keyboard interactions more convenient (e.g. imagine filling out a form by clicking on each field with the mouse instead of pressing Tab!). So how do we fix this? The first step is making it possible to interact with these wedges with the keyboard at all. Right now, you cannot even select a wedge by pressing the Tab key on your keyboard, because they are not focusable. We can fix this by adding a few attributes to the &lt;path&gt; elements: . | Make it focusable, by adding tabindex=\"0\" | Expose it as a button to assistive technology, by adding role=\"button\" | Adding a label via aria-label | . We‚Äôre not done yet. All that these do is to make sure users of assistive technology can actually interact with the wedge. However, because it‚Äôs not a native button or link, the click event will not be triggered when the user focuses on the wedge with the keyboard and presses Enter or Space. Instead, we need to enable that, via a separate event listener (keyup is a good candidate). To avoid duplicating code, let‚Äôs move the code that selects a wedge into a separate function: . function toggleWedge(index, event) { selectedIndex = index; } . Then replace on:click={e =&gt; selectedIndex = index} with on:click={e =&gt; toggleWedge(index, e)}. Now add a keyboard event listener: on:keyup={e =&gt; toggleWedge(index, e)}. In the toggleWedge function, we can wrap the code that selects the wedge with a conditional that checks that either event.key doesn‚Äôt exist, or if it does, that it is Enter: . function toggleWedge(index, event) { if (!event.key || event.key === 'Enter') { selectedIndex = index; } } . If you try the keyboard interaction out you will notice that it works, but even when we are interacting with it via the mouse, we get an unwieldy focus ring around the wedge which looks awful since it‚Äôs actually covered by the other wedges: . We can hide that with outline: none: . path { transition: 300ms; outline: none; } . However, now keyboard users have no way to know which wedge they have currently focused, which is a terrible user experience. Never, ever remove the browser‚Äôs default focus styles without providing alternative focus styles. Often extending :hover styles to cover :focus-visible as well is a good start. So let‚Äôs extend our previous :hover effect to keyboard users as well: . svg:has(path:hover, path:focus-visible) { path:not(:hover, :focus-visible) { opacity: 50%; } } . If you try out the keyboard interaction now, you will notice that we are getting a visible indication of focus, and that the unwieldy default focus ring is no longer visible. Yay! üéâ . Step 5.5: Better selected wedge styling (Optional) . We are currently only indicating which wedge is selected by its color, which is a little confusing (not to mention problematic for colorblind users), since that could be just another color in the pie chart. The reason we went with that is that it‚Äôs easier than pretty much any alternative, but if you want to go further, we can do it in a better way. First, it‚Äôs important to understand something about SVG: . Shapes are painted in the order they appear in the source code, and unlike in HTML, there is no way to change this order with CSS. This means that decorations like strokes or shadows will work nicely for one of the wedges and fail miserably for the others: . Yikes on bikes! So what can we do? . A common technique is to move the selected wedge to the very end with JS or make a copy, then style that. But we‚Äôll try something different: we‚Äôll move the selected slice outwards a bit, and make it a bit bigger, like taking a pizza slice from a large colorful pizza. It will look like this: . We will need the start and end angles in our CSS, so the first step is to pass them in as CSS variables: . &lt;path d={arc} style=\" --start-angle: { arcData[index]?.startAngle }rad; --end-angle: { arcData[index]?.endAngle }rad;\" . Note the rad at the end: CSS angles need a unit too. Then, in the CSS we can calculate the difference, and the angle to get to the midpoint of the arc: . path { --angle: calc(var(--end-angle) - var(--start-angle)); --mid-angle: calc(var(--start-angle) + var(--angle) / 2); } . Now comes the fun part: We will use the transform property to rotate to the midpoint of the arc (so that we move along that angle), move by 6, then rotate back to restore the original orientation: . path { --angle: calc(var(--end-angle) - var(--start-angle)); --mid-angle: calc(var(--start-angle) + var(--angle) / 2); &amp;.selected { transform: rotate(var(--mid-angle)) translateY(-6px) rotate(calc(-1 * var(--mid-angle))); } } . If you try it, it should work, even if a little rough around the edges: . To better understand what this is doing, let‚Äôs break it down, by showing the rotate, move, and rotate back one after the other The reason it‚Äôs a little janky when we click on it, is that it‚Äôs transitioning all three transforms at once. If we apply a transform on its non-selected state as well, we can fix that: . path { transform: rotate(var(--mid-angle)) translateY(0) rotate(calc(-1 * var(--mid-angle))); /* ... */ } . And let‚Äôs also make it a little bigger, by adding a scale(1.1) transform as well: . &amp;.selected { transform: rotate(var(--mid-angle)) translateY(-6px) scale(1.1) rotate( calc(-1 * var(--mid-angle)) ); } . This is the final result: . ",
    "url": "/labs/lab06/#step-5-turning-the-pie-into-filtering-ui-for-our-projects",
    "relUrl": "/labs/lab06/#step-5-turning-the-pie-into-filtering-ui-for-our-projects"
  },"89": {
    "doc": "üë©‚Äçüî¨ Programming Labs",
    "title": "üë©‚Äçüî¨ Programming Labs",
    "content": "The weekly programming labs will help you get up to speed with the fundamentals of front-end web development and then will give you more hands-on practice with the tech stack for developing dynamic web-based visualization. These materials were primarily developed by Lea Verou. ",
    "url": "/labs/",
    "relUrl": "/labs/"
  },"90": {
    "doc": "Lab 3: Introduction to JS",
    "title": "Lab 3: Introduction to JS",
    "content": "In this lab, we will learn: . | What is JS and what is it good for? | Basic programming concepts and how they relate to JS | JS and JSON data values: primitives (numbers, strings, booleans, null, undefined), objects, arrays | How to use JS to get references to elements in the DOM and manipulate them on the fly | How to use JS to create new elements on the fly and add them to the DOM | How to run JS code as a response to user actions (Events) | . | Lab 3: Introduction to JS . | Check-off | Prerequisites | Questions Doc | Slides | Step 1: Adding a JS file to all pages (In class) | Step 2: Automatic current page link . | Step 2.1: Get an array of all nav links into a variable | Step 2.2: Find the link to the current page | Step 2.3: Add the current class to the current page link | . | Step 3: Automatic navigation menu . | Step 3.1: Adding the navigation menu | Step 3.2: Highlighting the current page and opening external links in a new tab | . | Step 4: Dark mode! . | Step 4.1 Automatic dark mode. | Adjusting the border color | Fixing the hover background color (optional) | . | Step 4.2: Adding HTML for the dark mode switch | Step 4.3: Placing the switcher at the top right corner | Step 4.4: Actually making it work | Step 4.5: Saving the user‚Äôs preference | . | Step 5: Better contact form (Optional) | JS resources . | Videos | Books | . | . | . ",
    "url": "/labs/lab03/",
    "relUrl": "/labs/lab03/"
  },"91": {
    "doc": "Lab 3: Introduction to JS",
    "title": "Check-off",
    "content": "You need to come to TA Office Hours to get checked off for this lab (any of them, no appointment needed). Please fill in the check-off form at labs/3/checkoff before your check-off (right before is fine ‚Äî even preferred). Filling out the form is a necessary but not sufficient condition to get checked-off. You still need to come to office hours in person for your check-off to be processed. ",
    "url": "/labs/lab03/#check-off",
    "relUrl": "/labs/lab03/#check-off"
  },"92": {
    "doc": "Lab 3: Introduction to JS",
    "title": "Prerequisites",
    "content": "This lab assumes you have already completed Lab 1 and Lab 2, as we will use the same website as a starting point. You will need to use a local server for this lab, as some features will not work under the file: protocol (i.e. when opening the files directly in the browser). If you are using Live Preview, we recommend you switch to Live Server as Live Preview seems to have issues with newer CSS features. ",
    "url": "/labs/lab03/#prerequisites",
    "relUrl": "/labs/lab03/#prerequisites"
  },"93": {
    "doc": "Lab 3: Introduction to JS",
    "title": "Questions Doc",
    "content": "Add questions to the questions doc throughout the lecture and lab! After lab, come to office hours or ask on Discourse for futher questions! . ",
    "url": "/labs/lab03/#questions-doc",
    "relUrl": "/labs/lab03/#questions-doc"
  },"94": {
    "doc": "Lab 3: Introduction to JS",
    "title": "Slides",
    "content": "Make sure to read the notes on each slide as well! . Specific slides that may be useful while working on this lab: . | Operator cheatsheet | Element reference cheatsheet | Element manipulation cheatsheet | . ",
    "url": "/labs/lab03/#slides",
    "relUrl": "/labs/lab03/#slides"
  },"95": {
    "doc": "Lab 3: Introduction to JS",
    "title": "Step 1: Adding a JS file to all pages (In class)",
    "content": "For this lab, we will add a new file to our website: global.js. It will go in your website root, next to index.html and style.css, and should be linked from all pages (make sure to use type=\"module\"). Put the following code in global.js: . console.log('IT‚ÄôS ALIVE!'); function $$(selector, context = document) { return Array.from(context.querySelectorAll(selector)); } . Visit all your pages, open the dev tools console, and make sure you see the message printed there. ",
    "url": "/labs/lab03/#step-1-adding-a-js-file-to-all-pages-in-class",
    "relUrl": "/labs/lab03/#step-1-adding-a-js-file-to-all-pages-in-class"
  },"96": {
    "doc": "Lab 3: Introduction to JS",
    "title": "Step 2: Automatic current page link",
    "content": "Remember how in Lab 2 we added a class to the current page link? Wasn‚Äôt it tedious to do that manually? We will now use JS to automate this! . First, remove the manual current class from all your links. Step 2.1: Get an array of all nav links into a variable . We will use the $$ function we defined earlier to get an array of all our nav links. Remember that the CSS selector nav a will get all &lt;a&gt; elements inside a &lt;nav&gt; element, which is what we want. Putting it together, $$(\"nav a\") will get us an array of all our nav links, which we can assign to a variable, e.g. navLinks . Step 2.2: Find the link to the current page . To find the link to the current page, we need three pieces of information: . | The array.find() method gives us the first array element that passes a test. For example, [1, 2, 3, 4].find(n =&gt; n &gt; 2) will return 3 (try it in the console!). | The location object, which has information about the current page, such as location.host and location.pathname. | When we get references to &lt;a&gt; elements, they also include these URL properties (host, pathname, etc.). Even if the link is relative, the values of these properties will be after it has been resolved to an absolute URL, using the URL of the current page as a base. The browser needs to resolve it to an absolute URL anyway to make it work, so exposing these properties is a convenience for us. | . A link to the current page will have the same host and pathname as the current page. Putting it together, we can get the link to the current page via: . let currentLink = navLinks.find( (a) =&gt; a.host === location.host &amp;&amp; a.pathname === location.pathname, ); . Step 2.3: Add the current class to the current page link . Now that we have a reference ot the current page link, we can add the current class to it using element.classList.add(class1, class2, ...): . currentLink.classList.add('current'); . But what if no link to the current page was found? In that case, navLinks.find() will return undefined and trying to access any property on currentLink will throw an error. There are two ways to fix this problem: . The first way is to use a conditional to only add the class if currentLink is truthy: . if (currentLink) { // or if (currentLink !== undefined) currentLink.classList.add('current'); } . This is more flexible, as we can run any amount of code inside the if block, and we could even add an else block to run code when no link is found, if needed. However, if all we need is to prevent errors, we can use the optional chaining operator, i.e. ?. instead of .: . currentLink?.classList.add('current'); . ",
    "url": "/labs/lab03/#step-2-automatic-current-page-link",
    "relUrl": "/labs/lab03/#step-2-automatic-current-page-link"
  },"97": {
    "doc": "Lab 3: Introduction to JS",
    "title": "Step 3: Automatic navigation menu",
    "content": "But why stop here? Wasn‚Äôt it tedious to need to copy-pasta the navigation to all pages? And imagine the horror of adding a new page to our site: we‚Äôd have to update every single page! . We can automate this too! . Client-side JS is not the best way to handle site-wide templating, but it‚Äôs good as a temporary fix, and as a learning exercise. First, remove the navigation menu from all pages, since we‚Äôre going to be adding it with JS. Also remove your code from Step 2 (or comment it out by selecting it and pressing Cmd/Ctrl + /), since we‚Äôll now be adding the current class at the same time as we add the links. Step 3.1: Adding the navigation menu . As we saw in the slides, there are many ways to design a data structure to hold the association of URLs (relative or absolute) and page titles. Let‚Äôs go with an array of objects for now, but if you want to use a different one (and handle the code differences) you‚Äôre welcome to! . let pages = [ { url: '', title: 'Home' }, { url: 'projects/', title: 'Projects' }, // add the rest of your pages here ]; . Then, create a new &lt;nav&gt; element (via document.createElement()) and add it inside &lt;body&gt; at the beginning (via element.prepend()).: . let nav = document.createElement('nav'); document.body.prepend(nav); . Then we will use a for .. of loop to iterate over the pages on our site and add &lt;a&gt; elements in the &lt;nav&gt; for each of them. It will look like this: . for (let p of pages) { let url = p.url; let title = p.title; // TODO create link and add it to nav } . Then, to create each link and add it to the nav, you can use element.insertAdjacentHTML(): . // Create link and add it to nav nav.insertAdjacentHTML('beforeend', `&lt;a href=\"${url}\"&gt;${title}&lt;/a&gt;`); . Save and preview: you should now have a navigation menu on every page that is added automatically! . However, there is a bit of a wart. Try your menu on different pages. Oh noes, the links only work properly on the home page! That is because we had previously used different relative URls for different pages, but now we are trying to use the same one across the entire website. Let‚Äôs try to do with JS what we previously did manually (sensing a theme here?). What we previously did was that for any page that was not the home page, we added ../ to the URL, right? So what if we could detect if we‚Äôre not on the home page and add that ../ to the URL conditionally? . But how could we possibly detect if we‚Äôre on the home page in a way that works both locally and on our github.io site? Sadly, there is no way (that will not bite us in the future) to tell entirely by looking at the URL. We can however help the JS along by adding a class of home to the root element of our home page, and then using JS to check if that class is present and storing it in a variable (well, actually a constant, since that is not likely to change): . const ARE_WE_HOME = document.documentElement.classList.contains('home'); . The const keyword is similar to let, but it makes the variable immutable, i.e. it cannot be reassigned. Variables that should never change are called constants, and their names are UPPERCASE by convention. Then, when creating the links, use a conditional to add a ../ to the URL if we‚Äôre not on the home page and the URL is not absolute. We can use an if statement for that: . if (!ARE_WE_HOME &amp;&amp; !url.startsWith('http')) { url = '../' + url; } . Alternatively, we can do it more concisely with a ternary operator: . url = !ARE_WE_HOME &amp;&amp; !url.startsWith('http') ? '../' + url : url; . Step 3.2: Highlighting the current page and opening external links in a new tab . Our automatically added navigation menu works, but is missing all the bells and whistles of our original one: . | The current page is not highlighted anymore | The link to your GitHub profile does not have target=\"_blank\" to make it open in a new tab. | . How can we add those back? . Let‚Äôs switch to a different method of creating these links, that is more verbose, but gives us more flexibility. Instead of appending HTML strings, we will create element objects in JS and set their attributes in JS, via properties (or setAttribute() calls. So, this line of JS: . nav.insertAdjacentHTML('beforeend', `&lt;a href=\"${url}\"&gt;${title}&lt;/a&gt;`); . now becomes four lines: . let a = document.createElement('a'); a.href = url; a.textContent = title; nav.append(a); . Save and preview, and make sure nothing changed and that there are no errors. We can now use a conditional to add the current class, in a similar way to how we added it in step 2. We don‚Äôt need array.find() this time, because we are already iterating over the links to create them. We can just add a conditional to check if the link is to the current page using exactly the same check as Step 2.2 and add the class if so. All we need is to compare a.host and a.pathname to location.host and location.pathname and then use a.classList.add() to add the class. if (a.host === location.host &amp;&amp; a.pathname === location.pathname) { a.classList.add('current'); } . You can even use a.className.toggle() to do the checking and the class adding in one (very long) line! . a.classList.toggle( 'current', a.host === location.host &amp;&amp; a.pathname === location.pathname, ); . Similarly, we can add target=\"_blank\" to external links (such as the GitHub link) by setting a.target = \"_blank\" to those links for which a.host is not the same as location.host. Just like class names, you can either use conditionals or do the checking and the attribute setting in one step, by using element.toggleAttribute(). ",
    "url": "/labs/lab03/#step-3-automatic-navigation-menu",
    "relUrl": "/labs/lab03/#step-3-automatic-navigation-menu"
  },"98": {
    "doc": "Lab 3: Introduction to JS",
    "title": "Step 4: Dark mode!",
    "content": "Let‚Äôs add a dark mode switch to our site! . Step 4.1 Automatic dark mode. In this step we will write CSS that will automatically adapt to the OS color scheme and tweak our style so that everything looks good on dark mode. CSS provides a color-scheme property that can be used to switch between light and dark mode. | color-scheme: light dark tells the browser that the site can be rendered on either light or dark mode, depending on what the OS color scheme is. | color-scheme: light or color-scheme: dark forces a specific color scheme. | . When color-scheme is dark (or light dark and the OS is in dark mode), you will notice several changes: The default background color will be a very dark gray instead of white, and the default text color will be white instead of black. We can actually access these special colors and use them in our CSS by using the canvas and canvastext system colors. When applied to the root element (&lt;html&gt;) this property will already get your site very close to a proper dark mode. Try it now! Add it to your stylesheet so that it‚Äôs applied on every page. Adjusting the border color . While it doesn‚Äôt look too bad, in light mode we picked a border color that looked very subtle (oklch(80% 3% 200)) but in contrast to the almost-black background, it looks very harsh. This is because its lightness is fixed to 80%, which means it does not adapt to the color scheme. One way to fix that would be to make it a semi-transparent version of a darker, slightly more vibrant color (e.g. oklch(50% 10% 200)) with 40% opacity: . border-bottom-color: oklch(50% 10% 200 / 40%); . Since we‚Äôre using it in two places, you may want to define a CSS variable for it on &lt;nav&gt;: . nav { --border-color: oklch(50% 10% 200 / 40%); /* ... other styles and nested rules ... */ } . and then use that instead: . border-bottom-color: var(--border-color); . That should look about the same in light mode, and much better in dark mode. The menu border color before and after the change (animated gif). Fixing the hover background color (optional) . If you did the optional hover background color in Lab 2, you may have noticed that it looks very bad in dark mode now. That is because we defined that color with a fixed lightness (95%): . background-color: oklch(from var(--color-accent) 95% 5% h); . Just like our border color, it was very subtle in light mode, but sticks out like a sore thumb in dark mode. Worse, since the text color has changed, it is now illegible. Yikes! . We could fix that too by setting its lightness to 50% and increasing its chroma, then adding transparency. But here is another method. We can make it a mix of the background color and the special canvas color: . background-color: color-mix(in oklch, var(--color-accent), canvas 85%); . This should now look a lot better: . Step 4.2: Adding HTML for the dark mode switch . We want our switch to have three states: Automatic (the default, adapts to the OS color scheme), Light, and Dark. The heavy lifting is already done in the CSS, so all the switch needs to do is set the color-scheme property appropriately on the root element. First we need to add the form controls for selecting the color scheme. A good option is a &lt;select&gt; element (plus &lt;option&gt; elements inside it), which creates a dropdown menu. Make sure to use a &lt;label&gt; around it. You can give the &lt;label&gt; a class (I used color-scheme) so you can style it in your CSS. Why not radio buttons? Radio buttons (in a &lt;fieldset&gt; element) would have also been perfectly acceptable, but are more work to handle with JS, so we went with a dropdown to simplify the code. Also, from a usability perspective, while radio buttons can provide better efficiency for short lists of options, they also occupy a lot more screen real estate, which is not really warranted for something used as infrequently as a theme switcher. While I think nesting form controls inside the &lt;label&gt; produces cleaner code, feel free to use the for attribute with an id if you prefer. In that case, you‚Äôd need to wrap both of them with a &lt;div&gt; and give that the color-scheme class. Since this control doesn‚Äôt do anything without JS, you should create it with JS as well, similarly to what we did with the &lt;nav&gt; menu in step 3. That way, you also don‚Äôt have to add it manually on every single page. You can use something like this to add it to the start of the &lt;body&gt; element: . document.body.insertAdjacentHTML( 'afterbegin', ` &lt;label class=\"color-scheme\"&gt; Theme: &lt;select&gt; &lt;!-- TODO add &lt;option&gt; elements here --&gt; &lt;/select&gt; &lt;/label&gt;`, ); . For the value attribute of your &lt;option&gt; elements, use the actual values each option should set the color-scheme property to (light dark, light, dark), so that you don‚Äôt need to do any conversion in JS. You might wonder if it‚Äôs possible to detect the OS color scheme and somehow use that in the dropdown (e.g. instead of showing ‚ÄúAutomatic‚Äù we could show ‚ÄúAutomatic (Dark)‚Äù). It is! You can do this via matchMedia(\"(prefers-color-scheme: dark)\").matches. In fact, this is a media query and specifically the prefers-color-scheme media feature. You can use media queries in your CSS too! . Step 4.3: Placing the switcher at the top right corner . Rather than laying out with the rest of the content, we want the switcher to always be at the top right corner. We will do that via CSS absolute positioning. | First, we apply position: absolute to our switcher (the &lt;label&gt; element with the color-scheme class) Notice that this took the element out of the normal document flow, and it‚Äôs now on top of the content. | We specify offsets from the top and right edges of the document with top and right properties. I used 1rem for both but you may want to use a different value (experiment with the dev tools and see what looks good to you). | . You‚Äôd probably also want to make the font a little smaller (I used 80%) to make it less prominent and inherit the font-family from the parent, otherwise the browser applies a different font to form controls (you can just add select to your existing input, textarea, button rule about that from Lab 2) . Step 4.4: Actually making it work . We now have all the UI in place, but nothing happens when we change the theme. Here comes the fun part: making it work! . The first step is to attach an input event listener to our &lt;select&gt; element so we can run JS code when the user changes it. To do that, we first need to get a reference to the &lt;select&gt; element via document.querySelector(selector) and assign it to a variable (I called it select). Then, we‚Äôd use the addEventListener() function to add a listener for the input event: . select.addEventListener('input', function (event) { console.log('color scheme changed to', event.target.value); }); . Try it now: do you get the logged message in the console when you change the select element? . Okay, now we need to actually change the color scheme. As we‚Äôve seen earlier, we can get a reference to the root element with document.documentElement and we can set arbitrary CSS properties on any element via element.style.setProperty(property, value). Putting these together, we can set the color-scheme property on the root element via: . document.documentElement.style.setProperty('color-scheme', event.target.value); . element.style is an object that allows us to read and modify the inline style (i.e. the style attribute) of an element. Step 4.5: Saving the user‚Äôs preference . Notice that if you refresh the page, the color scheme goes back to automatic. How can we persist this across page loads? . We will use the localStorage object for this. It‚Äôs a simple object (its keys can only contain strings), but anything you put in it will persist across page loads or even browser sessions. There are two components to persisting the user‚Äôs preference: . | Adding the user‚Äôs preference to localStorage when they change it. This is as simple as localStorage.colorScheme = event.target.value in our event listener. | Reading the user‚Äôs preference from localStorage when the page loads. For that, we need a conditional that would check if localStorage includes a colorScheme key (\"colorScheme\" in localStorage), and if it does, we‚Äôd set the color scheme to that value (just like any object, we can read that value via localStorage.colorScheme). Don‚Äôt forget to update the &lt;select&gt; element to match (by setting select.value), otherwise the user experience will be very confusing! | . That should work! Try it now: change the color scheme, refresh the page, and see if it sticks. Beyond trying out the functionality, there are two ways to verify that your data has been successfully saved in the browser‚Äôs local storage: . | In the Application tab of the dev tools, under the Storage section, you can see the localStorage object and its contents. | In the Console tab, you can type localStorage and see its contents. | . To avoid repeating the code that sets the color scheme twice (once for the event listener and once on page load if the preference is saved), you could define a setColorScheme(colorScheme) function that does that and call it in both places. ",
    "url": "/labs/lab03/#step-4-dark-mode",
    "relUrl": "/labs/lab03/#step-4-dark-mode"
  },"99": {
    "doc": "Lab 3: Introduction to JS",
    "title": "Step 5: Better contact form (Optional)",
    "content": "You may have noticed that our contact form from Lab 1 did not have the best usability. While it does open an email client and prefills our email address in the To field, everything else is encoded with this weird format in the body of the email: . We could actually make it work better, but it will need a little JS. First, we‚Äôd start by removing enctype=\"text/plain\" and method=\"POST\" (or changing it to method=\"GET\"). An HTTP GET request encodes all submitted information in the URL, so our form basically helps us build (and visits) a URL like mailto:leaverou@mit.edu?subject=Hello&amp;body=Sup?. Try pasting that URL in your browser, and notice how it opens exactly the same window, you‚Äôd get by submitting your form! . Let‚Äôs also remove the ‚ÄúFrom:‚Äù field. Since this form opens a window in our mail client, and the email is sent from us anyway, it‚Äôs redundant. So far it looks like this is quite an improvement already. Why didn‚Äôt we do it this way in Lab 1 then? Because without JS, this has a fatal flaw. Try writing a longer subject and/or message that includes spaces and submit the form again: . All our spaces have been replaced by + signs! . Why did this happen? When it comes to URLs, spaces are considered special characters and are not technically allowed. There are two ways to encode them: as + or as %20. The former is older and non-standard, but still widely used. However, not all clients recognize it (e.g. our mail client doesn‚Äôt!) whereas percent encoding (% plus a two-digit hexadecimal number, 20 for a space character) is the standard way and is always recognized. Don‚Äôt see any + signs? Some mail clients (e.g. Gmail) automatically decode the + signs to spaces. However, you cannot have a form that only works in some mail clients and not others, so we need to fix this. There is no way to fix this with HTML alone, which is why we did not use this method in Lab 1. But now that we know JS, we have superpowers! We will intercept the form submission, and build the URL ourselves. To recap, our goal is to build the same URL, but with proper escaping this time. We don‚Äôt need to handle the escaping ourselves, that‚Äôs what the encodeURIComponent() function is for. First, get a reference to the &lt;form&gt; element, and add a listener to it for the submit event. Since this is code that runs on every page, and not every page has a form, to avoid errors either use a conditional to check that the reference is non-empty, or use optional chaining, i.e. form?.addEventListener() instead of form.addEventListener(). In the event handler, call preventDefault on the event object to prevent the default form submission from happening. Save and preview your work. Make sure that the form does not open your email client anymore. Then, in the event handler, we create a new FormData object from the form (let‚Äôs call it data). We can then iterate over submitted fields using a for .. of loop like this: . for (let [name, value] of data) { // TODO build URL parameters here console.log(name, value); } . Save your work and submit the form. What do you see in the console? Now replace value with encodeURIComponent(value) and submit the form again. What changed? . We progressively build the URL by concatenating form.action, \"?\" and names and encoded values (separated by =) for each field. Once we have our final URL, we can open it via: . location.href = url; . For any other URL, this would navigate to another page, but because this is a mailto: URL, it will open our email client with the prefilled fields. ",
    "url": "/labs/lab03/#step-5-better-contact-form-optional",
    "relUrl": "/labs/lab03/#step-5-better-contact-form-optional"
  },"100": {
    "doc": "Lab 3: Introduction to JS",
    "title": "JS resources",
    "content": ". | MDN: JavaScript Basics | MDN: JavaScript First Steps | MDN Tutorials on JS | JS Garden for JS quirks and gotchas | Learn JS Data, a series of Observable notebooks about the basics of manipulating data using JavaScript in the browser. | . Videos . | JavaScript in 12 Minutes | JS 1-Hour tutorial | A series of interactive JavaScript Tutorials | Udemy course | . Books . | Eloquent Javascript by Marijn Haverbeke ‚Äì free online book for programming beginners | JavaScript: The Good Parts by Douglas Crockford (See also his YUI videos) | Learning JavaScript Design Patterns by Addy Osmani | . ",
    "url": "/labs/lab03/#js-resources",
    "relUrl": "/labs/lab03/#js-resources"
  },"101": {
    "doc": "Lab 1: Introduction to the Web platform",
    "title": "Lab 1: Introduction to the Web platform",
    "content": "In this lab, we will learn: . | How does the Web work? What happens when I enter a URL in my browser and hit Enter? | What languages are used to create webpages, what is each for, and what are their differences? | How to write good HTML? | How do CSS and JS look like, and how do we include them in our HTML? | How can we create our own webpage and publish it on the Web? | . | Lab 1: Introduction to the Web platform . | Prerequisites | Part 1: Web fundamentals | Part 2: Creating our own website from scratch and publishing it on the Web . | Step 1: Setup | Step 2: Create a basic HTML page | Step 3: Publish your site on GitHub Pages | Step 4: Add a photo | Step 5: Add a CSS stylesheet | Step 6: Add more pages and a navigation menu | Step 7: Basic contact form | Step 8: Adding a CV/resume page | . | HTML resources | . | . ",
    "url": "/labs/lab01/",
    "relUrl": "/labs/lab01/"
  },"102": {
    "doc": "Lab 1: Introduction to the Web platform",
    "title": "Prerequisites",
    "content": "This lab assumes you have already gone through the setup instructions in Lab 0 (except those marked for Lab 2 or later), i.e. that you have (latest versions of, where applicable): . | Google Chrome | Visual Studio Code (and you have verified Emmet works) | Git that is set up with your name and email | A GitHub account (upgraded to Pro via the GitHub Student Developer Pack | GitHub Desktop, connected to GitHub and with VS Code set as the default editor | . ",
    "url": "/labs/lab01/#prerequisites",
    "relUrl": "/labs/lab01/#prerequisites"
  },"103": {
    "doc": "Lab 1: Introduction to the Web platform",
    "title": "Part 1: Web fundamentals",
    "content": ". | Slides | . Links we‚Äôll need for the hands-on activities: . | hello.html | first.html | errors.html | . ",
    "url": "/labs/lab01/#part-1-web-fundamentals",
    "relUrl": "/labs/lab01/#part-1-web-fundamentals"
  },"104": {
    "doc": "Lab 1: Introduction to the Web platform",
    "title": "Part 2: Creating our own website from scratch and publishing it on the Web",
    "content": "Step 1: Setup . Creating a new repostory with GitHub Desktop and publishing it to GitHub . | Create a new repository with GitHub Desktop called portfolio (or anything else you want, but the rest will assume portfolio) | Publish it on GitHub (verify that it worked by visiting https://github.com/YOUR_USERNAME/portfolio or clicking Repository &gt; View on GitHub in GitHub Desktop‚Äôs menu) | Open it on Visual Studio Code (Menu: Repository &gt; Open in Visual Studio Code) | . Step 2: Create a basic HTML page . Our initial HTML page is pretty simple. | Create a new file called index.html in the root of your repository | Type ! and hit Tab to expand the Emmet snippet into a basic HTML page | Change the page title (&lt;title&gt;) to ‚ÄúYOUR_NAME: Personal site and portfolio‚Äù | Add a &lt;h1&gt; with your name | Add a &lt;p&gt; with a short description of yourself (if you can‚Äôt think of anything, just type lorem and hit Tab to generate placeholder text; just make sure to edit it later!) | Save the file. Open the file in Chrome and verify that it works. | Commit and push your changes to GitHub | . Remember that committing and pushing your changes to GitHub is a two-step process: First, you commit your changes to your local repository: then you push your changes to your remote repository on GitHub. Step 3: Publish your site on GitHub Pages . Our simple page is now live! GitHub provides a free hosting service called GitHub Pages that is perfect for hosting static websites like the one we are creating. It gives you a URL like https://YOUR_USERNAME.github.io/YOUR_REPOSITORY_NAME that you can share with anyone to show them your site, but you can also use your own domain name if you have one. | Open your repository on GitHub (On GitHub Desktop: Repository &gt; View on GitHub) | Click Settings | Scroll down and click the section | Select ‚Äúmain‚Äù as the branch and click Save | Check ‚ÄúEnforce HTTPS‚Äù | Wait a few seconds for GitHub to publish your site, then refresh. Then click to open your site in a new tab. That‚Äôs it ‚Äî your website is now live! üéâ | . Selecting main as the branch . In the following steps, it is implied that you first test your changes locally in Chrome, then commit and push them to GitHub, and then refresh your site to verify that the changes are live (after waiting a few seconds). Step 4: Add a photo . | Create an images folder in the root of your repository | Find a photo of yourself (or anything else you want) and save it in the images folder | Add an &lt;img&gt; element to your HTML page, with the src attribute set to the path to your image file (images/your-image-file-name.jpg) | Add an alt attribute to the &lt;img&gt; element with a short description of the image as you would describe it to someone who cannot see it. | . Our page now has a photo! Step 5: Add a CSS stylesheet . | Create a new file called style.css in the root of your repository | Add the following CSS to the file: | . body { /* Set line height to 1.5 times the font size and use the OS‚Äôs UI font as the website font */ font: 100%/1.5 system-ui; } . | Link the stylesheet to your HTML page via a &lt;link&gt; element in the &lt;head&gt;. | . Step 6: Add more pages and a navigation menu . | Create two new files: projects/index.html and contact/index.html. | Set their title and add a &lt;h1&gt; with the page title in each. | Add a navigation menu in each page (using &lt;nav&gt;), with links (using &lt;a&gt;) to every page in your site, including the current one. | Add a link to your GitHub profile to the navigation menu with target=\"_blank\" to make it always open in a new tab. | . The directory structure at this point should look a bit like this: . When linking to other pages in the same site, you should use relative URLs. Why do we use index.html? In most web servers, index.html is a special name that is used as the default file to serve when the user visits a directory. This means that users can type https://YOUR_USERNAME.github.io/YOUR_REPOSITORY_NAME/contact/ instead of https://YOUR_USERNAME.github.io/YOUR_REPOSITORY_NAME/contact/index.html. Step 7: Basic contact form . In this step we will add a functional contact form to the contact page. When the user submits the form, their email client will open with a new email to you, with the subject and body prefilled with the values they entered in the form. Contact forms on the web are not made like this anymore, and for good reasons: . | This method exposes your email address to spammers. One of the primary reasons for a contact form is to not expose your email address publicly. | The message formatting is awkward and not very user-friendly. | . However, making a contact form properly would require server-side code and/or a third-party service, which is way beyond the scope of this first lab. | Create a &lt;form&gt; element in contact/index.html and set: . | Its action attribute to mailto:YOUR_EMAIL_ADDRESS (e.g. mailto:foo@example.com) | Its method attribute to POST | Its enctype attribute to text/plain | Why do we need the last two? Experiment by using the form without them and see what happens! | . | Create our contact form fields. We need at least: . | A single line text field (&lt;input&gt;) for the sender‚Äôs email address with name=\"email\" and type=\"email\" | A single line text field (&lt;input&gt;) for for the subject with name=\"subject\" (you don‚Äôt need type=\"text\" as that is the default) | A multiline text field (&lt;textarea&gt;) for the actual message with name=\"body\" | . | Wrap each field in a &lt;label&gt; with the field name as its contents | Add a submit button with &lt;button&gt; (you don‚Äôt need type=\"submit\" as that is the default) | . The directory structure at this point should look a bit like this: . While developing, you will likely need to try your form multiple times. Add default values to all fields via the HTML (using the value attribute on &lt;input&gt;s and element contents in &lt;textarea&gt;) so you don‚Äôt have to type them every time. Our contact form should now be functional albeit not very pretty (but don‚Äôt worry about that, that‚Äôs CSS‚Äô job). An example contact form for Step 7. Try submitting it and see what happens! . Don‚Äôt worry about the appearance of your contact form, we will fix that in Lab 2! While it can be tempting, do not use tables to lay your form out in a grid with the form labels next to the form fields. Remember that HTML describes content, not presentation, and tables are for tabular data, not layout. We will see how to use CSS to lay our form out in a grid in Lab 2. Step 8: Adding a CV/resume page . This is a more freeform step, with the goal of getting you to explore HTML on your own and experiment. Add a new page to your website (and link to it from the navigation menu) that contains your CV or resume. If you do not want to publish your CV on the Web for privacy reasons, you can use fake data for all or part of it. In that case, try to keep the structure as close as possible to your real CV and simply change the actual data (e.g. names, dates, places) so that you are still solving a realistic use case. Structure the different sections of content with &lt;section&gt; elements. Think of &lt;section&gt; as the units of content that you would list in a table of contents for that page (which is exactly how they are exposed to assistive technology users). You may also find &lt;article&gt; useful for structuring independent, self-contained units of content (‚Äúarticle‚Äù as in ‚Äúarticle of clothing‚Äù not ‚Äúnewspaper article‚Äù ‚Äî yes, it is confusing!). Elements you will need (excluding those outside &lt;body&gt;): . | Headings, paragraphs, lists | &lt;a&gt; for links | &lt;section&gt; and &lt;article&gt; (see above) | &lt;time&gt; for dates | . Elements you may need: . | &lt;header&gt; for &lt;section&gt; or &lt;article&gt; headers that are more than just a heading | &lt;img&gt; in case you want to include icons or logos of organizations | . Don‚Äôt forget to preview your changes locally first, then when you‚Äôre happy with them commit and push to GitHub. ",
    "url": "/labs/lab01/#part-2-creating-our-own-website-from-scratch-and-publishing-it-on-the-web",
    "relUrl": "/labs/lab01/#part-2-creating-our-own-website-from-scratch-and-publishing-it-on-the-web"
  },"105": {
    "doc": "Lab 1: Introduction to the Web platform",
    "title": "HTML resources",
    "content": "Tools . | HTML Validator: Catch many HTML mistakes early and short-circuit debugging | CodePen: quickly experiment with HTML, CSS, JS and see the results live | . Cheatsheets . | HTML Cheatsheet from the slides | HTML Cheatsheet by MDN | HTML Cheatsheet by Code Academy: All intro HTML concepts in one place for easy reference | . Tutorials . | Getting started with the Web | MDN: Structuring the web with HTML | Codeacademy: Learn HTML | . ",
    "url": "/labs/lab01/#html-resources",
    "relUrl": "/labs/lab01/#html-resources"
  },"106": {
    "doc": "Lab 4: Svelte (Templating & Control Flow)",
    "title": "Lab 4: Svelte (Templating &amp; Control Flow)",
    "content": "In this lab, we will learn: . | What is npm? | What are JS frameworks and why are they useful? | What is Svelte and how does it compare to other frameworks? | First steps with Svelte: templating and control flow | . | Lab 4: Svelte (Templating &amp; Control Flow) . | Check-off | Prerequisites | Questions Doc | Slides | What to Expect When You‚Äôre Svelting | Step 1: Setting up . | Step 1.1: Creating a new blank Svelte/SvelteKit project | Step 1.2: Creating a new repository for our new project | Step 1.3: Installing dependencies | . | Step 2: Porting your previous website to Svelte . | Step 2.0: Moving your assets | Step 2.1: Skeleton HTML | Step 2.2: Porting your pages to routes | Step 2.3: Adding titles | Step 2.4: Adjusting navigation bar URLs | . | Step 3: Publishing our new website to GitHub Pages | Step 4: Templating projects from a data file . | Step 4.1: Creating a JSON file with our project data | Step 4.2: Importing our project data into our Projects page | Step 4.3: Templating our project data | Step 4.4: Counting projects | . | Step 5: Displaying the first 3 projects on the home page . | Step 5.1: Creating a &lt;Project&gt; component | Step 5.2: Using the &lt;Project&gt; component | Step 5.3: Using the &lt;Project&gt; component on the home page | Step 5.4: Customizing heading levels | Step 5.5: Moving Project-specific CSS to the Project component | . | Step 6: Creating a layout for UI shared across pages (Optional but recommended) . | Step 6.1: Creating a layout component | Step 6.2: Adding a navigation bar to the layout | Step 6.3: Adding a class to the current page link | Step 6.4: Adding target=\"_blank\" to external links | Step 6.5: Moving CSS specific to the Navigation bar to the layout component | Step 6.6: Importing global CSS via the layout component (Optional) | . | Step 7: Creating a project list component (Optional) | To be continued‚Ä¶ | Resources | . | . ",
    "url": "/labs/lab04/#lab-4-svelte-templating--control-flow",
    "relUrl": "/labs/lab04/#lab-4-svelte-templating--control-flow"
  },"107": {
    "doc": "Lab 4: Svelte (Templating & Control Flow)",
    "title": "Check-off",
    "content": "You need to come to TA Office Hours to get checked off for this lab (any of them, no appointment needed). Please fill in the check-off form at labs/4/checkoff before your check-off (right before is fine ‚Äî even preferred). Filling out the form is a necessary but not sufficient condition to get checked-off. You still need to come to office hours in person for your check-off to be processed. ",
    "url": "/labs/lab04/#check-off",
    "relUrl": "/labs/lab04/#check-off"
  },"108": {
    "doc": "Lab 4: Svelte (Templating & Control Flow)",
    "title": "Prerequisites",
    "content": ". | You should have completed all the steps in Lab 0, i.e. that you have Node.js and npm installed. You will not need the local server from Lab 0, as SvelteKit will provide its own. | This lab assumes you have already completed Lab 1, Lab 2, Lab 3 as we will use the same website as a starting point. | . ",
    "url": "/labs/lab04/#prerequisites",
    "relUrl": "/labs/lab04/#prerequisites"
  },"109": {
    "doc": "Lab 4: Svelte (Templating & Control Flow)",
    "title": "Questions Doc",
    "content": "Add questions to the questions doc throughout the lecture and lab! After lab, come to office hours or ask on Discourse for futher questions! . ",
    "url": "/labs/lab04/#questions-doc",
    "relUrl": "/labs/lab04/#questions-doc"
  },"110": {
    "doc": "Lab 4: Svelte (Templating & Control Flow)",
    "title": "Slides",
    "content": "Make sure to read the notes on each slide as well! . ",
    "url": "/labs/lab04/#slides",
    "relUrl": "/labs/lab04/#slides"
  },"111": {
    "doc": "Lab 4: Svelte (Templating & Control Flow)",
    "title": "What to Expect When You‚Äôre Svelting",
    "content": "Unlike the previous labs, this lab will not involve dramatic changes to the end-user experience of our website. In terms of user-facing changes, we will only be adding a section of the 3 selected projects to the home page, and displaying a count of projects. However, we will be completely re-architecting its internals to make it much easier to make changes and evolve it over time. ",
    "url": "/labs/lab04/#what-to-expect-when-youre-svelting",
    "relUrl": "/labs/lab04/#what-to-expect-when-youre-svelting"
  },"112": {
    "doc": "Lab 4: Svelte (Templating & Control Flow)",
    "title": "Step 1: Setting up",
    "content": "Step 1.1: Creating a new blank Svelte/SvelteKit project . In this lab, we will be creating a new repository for our website, and then gradually importing our existing website into it. Decide on a name for your new repository (I called it my-portfolio below). Open your website folder with VS Code. Open the integrated terminal, and type cd .. to go to its parent folder. Then run the following: . npm create svelte@latest my-portfolio . The npm create command creates a new project using a template. Note that my-portfolio is the name of the new folder that will be created, so you may want to tweak it accordingly (just make sure to pick a different name than that of the folder containing your existing website!). Use the keyboard arrow keys and Enter to answer the questions shown. Make sure you tick the ‚ÄúSvelte 5 preview‚Äù box. You should now have a new folder called my-portfolio that is right next to the folder containing your old website. Step 1.2: Creating a new repository for our new project . Using GitHub Desktop, select File ‚Üí Add Local Repository‚Ä¶ create a new repository for this folder. GitHub Desktop will warn you that there is no repository in the folder and ask if you want to create one. You should say yes. Then, press ‚ÄúPublish repository‚Äù and publish it to GitHub. Step 1.3: Installing dependencies . Then open your new project in VS Code (Repository ‚Üí Open in Visual Studio Code). Open the VS Code terminal and run: . npm install &amp;&amp; npm install -D svelte@next &amp;&amp; npm install -D @sveltejs/adapter-static . This will install all the dependencies for your new Svelte project. Be patient, it can take a while! . What does this command do? Let‚Äôs break it down: &amp;&amp; separates different terminal commands, so this is actually three separate commands, each of which will be run in sequence: . | npm install reads dependencies from package.json and installs the packages listed there. | npm install -D svelte@next will replace the Svelte version already installed with the latest pre-release version (which we need for modern CSS support). | npm install -D @sveltejs/adapter-static will install the static adapter for SvelteKit, which we will use to deploy our website to GitHub Pages. | . Once npm install finishes, run: . npm run dev -- --open . This will start a local server on port 5173 and open http://localhost:5173/ in your default browser. You should see something like this: . As a bonus, we don‚Äôt need to refresh the page to see changes anymore! Vite (used by SvelteKit under the hood) implements hot reloading, i.e. it will automatically reload the page when we save a file. You could even arrange VS Code and the browser side by side and see your changes in real time! . ",
    "url": "/labs/lab04/#step-1-setting-up",
    "relUrl": "/labs/lab04/#step-1-setting-up"
  },"113": {
    "doc": "Lab 4: Svelte (Templating & Control Flow)",
    "title": "Step 2: Porting your previous website to Svelte",
    "content": "Now we will start porting the website we creted in Labs 1-3 to Svelte, piece by piece. Step 2.0: Moving your assets . First, copy your images/ folder as well as style.css and global.js to static/. Step 2.1: Skeleton HTML . Open src/app.html. This contains skeleton HTML for every page on your website. Notice some expressions in %...%. These are special variables that Svelte will replace with the actual content of your pages at build time. Do not remove them! . Edit the &lt;head&gt; in src/app.html to add: . | A default &lt;title&gt; | Your existing CSS via &lt;link rel=\"stylesheet\" href=\"%sveltekit.assets%/style.css\" /&gt; | Your existing JS via &lt;script src=\"%sveltekit.assets%/global.js\" type=\"module\"&gt;&lt;/script&gt; | . Step 2.2: Porting your pages to routes . ‚ÄúRouting‚Äù is the process of determining what content to display based on the URL. To do that, SvelteKit uses a routes directory, with +page.svelte files for each page. These are actually components, so everything you know about component syntax applies to them. However their special name tells SvelteKit that they are meant to be used as pages. Open the routes directory. You will see a single file called +page.svelte. This is your home page. Replace its contents with the contents of your homepage from your old site, i.e. the contents of the &lt;body&gt; element in your root index.html. View your website and verify this worked, then do the same for your other pages: . | projects/index.html ‚Üí routes/projects/+page.svelte | cv/index.html ‚Üí routes/cv/+page.svelte | contact/index.html ‚Üí routes/contact/+page.svelte | . Again, for each of them only copy the HTML between &lt;body&gt;‚Ä¶&lt;/body&gt;. View your website. It should largely look the same as before, but it is now a SvelteKit app! . Step 2.3: Adding titles . Notice that while our website looks largely the same, the title displayed on the browser tab is the default for every page. Svelte allows us to provide elements in a &lt;svelte:head&gt; element that will be used to insert elements into the &lt;head&gt; of the page at build time. For example in the Contact page it could look like this: . &lt;svelte:head&gt; &lt;title&gt;Contact me&lt;/title&gt; &lt;/svelte:head&gt; . Add titles to your all your pages this way. Step 2.4: Adjusting navigation bar URLs . Note that our links Just Work‚Ñ¢ without us having to handle the home page in any special way. Why is that? This has to do with how Svelte‚Äôs server works: it does not let us add / at the end of URLs (note that if you try to go to e.g. http://localhost:5173/projects/ you will be redirected to http://localhost:5173/projects) so every relative URL is interpreted as relative to the same folder. The browser doesn‚Äôt know anything about your directory structure, so it doesn‚Äôt know that projects/ is a directory. It figures out what is a file and what is a directory entirely from the URL. So when you visit something like https://username.github.io/portfolio/projects, it will just treat projects as a file in the same directory ‚Äî a file with no extension. This means that if we did want to add subpages (e.g. projects/viz/), we would have to do some work to handle this, but let‚Äôs cross that bridge when we get to it. To ensure the correct link is marked as .current, you should delete the trailing slash at the end of your relative URLs in global.js. You should also change the URL of the homepage to . or ./, as it should not be empty: an empty URL is interpreted as equal to the current page URL. While you‚Äôre at it, you may as well delete the code that checks whether we are in the home page and adjusts URLs. Why does my current page class not update when I navigate to another page? Check out Step 6: Creating a layout for UI shared across pages (Optional, but recommended) for an explanation. ",
    "url": "/labs/lab04/#step-2-porting-your-previous-website-to-svelte",
    "relUrl": "/labs/lab04/#step-2-porting-your-previous-website-to-svelte"
  },"114": {
    "doc": "Lab 4: Svelte (Templating & Control Flow)",
    "title": "Step 3: Publishing our new website to GitHub Pages",
    "content": "Now that we have a website that functions like our old one, it‚Äôs a good time to publish it to the Web. Deploying to GitHub Pages is a little more complicated than in the previous labs, because we now have a build process. As we edit our website, SvelteKit generates a bunch of files from our source code and stores them in a .svelte-kit folder. It is generally considered a bad practice to commit automatically generated files (‚Äúbuild artifacts‚Äù) to a repository, as makes every edit correspond to several other edits we didn‚Äôt make, complicating and bloating the commit history. Instead, we want to ignore these files when committing to our repo (that‚Äôs why .svelte-kit is already in our .gitignore file) and tell GitHub to generate those files again on its side. To run custom logic before our site is deployed, GitHub provides a feature called GitHub Actions, which we will use. Before you proceed, commit and push your changes, then on github.com, enable GitHub Pages on your repo selecting ‚ÄúGithub Actions‚Äù as the source (Repo settings ‚Üí Pages ‚Üí Source: GitHub Actions). SvelteKit has a detailed guide on how to deploy to GitHub Pages which we will use. Visit that page, and copy the code shown for the following files: . | .github/workflows/deploy.yml (you will need to create a .github folder ‚Äî note the dot ‚Äî and a workflows folder inside it) | svelte.config.js (this will replace the Svelte config file already in your project). | . You can also click on the file paths above to download the files, if that‚Äôs more convenient for you. Commit and push these changes to your repo. If all goes well, your app should be deployed to YOUR_USERNAME.github.io/REPO_NAME. To see our GitHub Action in action (no pun intended üôÉ), navigate to the ‚ÄúActions‚Äù tab on your GitHub repo. You‚Äôll be able to see both actions that are currently running, as well as past ones. ",
    "url": "/labs/lab04/#step-3-publishing-our-new-website-to-github-pages",
    "relUrl": "/labs/lab04/#step-3-publishing-our-new-website-to-github-pages"
  },"115": {
    "doc": "Lab 4: Svelte (Templating & Control Flow)",
    "title": "Step 4: Templating projects from a data file",
    "content": "In the previous labs, we were using a hardcoded blob of HTML to display our projects. This is not ideal: if we want to change the HTML for our projects, we have to do it N times, where N is the number of projects we have. Now, it is true that if we design our HTML well, we should be able to change its style without changing its structure, but there are many changes we may want to make that would require changing the structure of the HTML. And even the most well written HTML is no help when we want to display the same data in multiple ways. For example, what if we wanted to display our projects on the homepage as well? Or provide a data file for others to use? Or draw a visualization of them? Maintaining our data together with its presentation tends to become painful, fast. Step 4.1: Creating a JSON file with our project data . We will use the browser console to extract the data from our HTML to JSON so that if you have edited your HTML to contain your actual projects, you don‚Äôt lose your data. The following code assumes you have used the same structure for your projects as what was given in the previous labs, where the list of projects was within a &lt;div class=\"projects&gt; and each project looked like this: . &lt;article&gt; &lt;h2&gt;Project title&lt;/h2&gt; &lt;img src=\"path/to/image.png\" alt=\"\" /&gt; &lt;p&gt;Project description&lt;/p&gt; &lt;/article&gt; . Load your Projects page and open the dev tools console. Paste the following code into it and hit Enter: . $$('.projects &gt; article').map((a) =&gt; ({ title: $('h2', a).textContent, image: $('img', a).getAttribute('src'), description: $('p', a).textContent, })); . Inspect the array returned by the code and make sure it looks like what you expect. If you‚Äôre happy with it, right click on it and select ‚ÄúCopy object‚Äù. Create a new file in src/lib/ called projects.json and paste the JSON there. Having trouble? If you‚Äôre having trouble with the above steps, you can use this projects.json file as a starting point. Step 4.2: Importing our project data into our Projects page . Create a &lt;script&gt; element at the top of src/routes/projects/+page.svelte and import the JSON file: . import projects from '$lib/projects.json'; . No need for type=\"module\", Svelte processes these &lt;script&gt; elements in a special way anyway. Print it out on the page to make sure everything worked by adding &lt;pre&gt;{ JSON.stringify(projects, null, \"\\t\") }&lt;/pre&gt; anywhere outside the &lt;script&gt; element, e.g. under our heading. If it worked, you should see something like this: . Delete this debug code, and let‚Äôs use the data to display our projects in a more ‚Ä¶presentable way. Step 4.3: Templating our project data . First, delete or comment out all your &lt;article&gt; elements inside the &lt;div class=\"projects\"&gt; element except one. Then, add an {#each} block block around it to iterate over the projects. {#each projects as p} &lt;article&gt; &lt;h2&gt;Lorem ipsum dolor sit.&lt;/h2&gt; &lt;img src=\"https://vis-society.github.io/labs/2/images/empty.svg\" alt=\"\" /&gt; &lt;p&gt; Lorem ipsum dolor sit amet consectetur adipisicing elit. Magnam dolor quos, quod assumenda explicabo odio, nobis ipsa laudantium quas eum veritatis ullam sint porro minima modi molestias doloribus cumque odit. &lt;/p&gt; &lt;/article&gt; {/each} . If you view your website at this point, you should see the same project repeated as many times as there are projects in your JSON file. Now replace its title with {p.title}, its image‚Äôs src with {p.image}, and its description with {p.description} and view your website. Note that we don‚Äôt need quotes to use an expression as an attribute value in Svelte, i.e. we can do src={p.image}, we don‚Äôt need to do src=\"{p.image}\", though the latter can be helpful for combining expressions with static text, e.g. href=\"/{ p.url }\". Read Svelte‚Äôs full docs on attributes and props to learn more. ",
    "url": "/labs/lab04/#step-4-templating-projects-from-a-data-file",
    "relUrl": "/labs/lab04/#step-4-templating-projects-from-a-data-file"
  },"116": {
    "doc": "Lab 4: Svelte (Templating & Control Flow)",
    "title": "{ p.title }",
    "content": "{ p.description } . {/each} ``` --> It should look the same as before, but now your projects are templated from a JSON file! Try making an edit to your JSON file and see if it reflects on your website. Step 4.4: Counting projects . A big bonus of this approach is that we can use code to compute things from the data, and have it update automatically when the data changes. Try it: add a count of projects at the top of the page by adding { projects.length } in the &lt;h1&gt; element. ",
    "url": "/labs/lab04/",
    "relUrl": "/labs/lab04/"
  },"117": {
    "doc": "Lab 4: Svelte (Templating & Control Flow)",
    "title": "Step 5: Displaying the first 3 projects on the home page",
    "content": "We will now display the first 3 projects on the home page. We could do this by copying the project template from the Projects page and pasting it into the home page. However, this means that if we want to change it (e.g. add a date), we‚Äôd need to change it in two places. That‚Äôs precisely what components are for! . Components encapsulate an independent piece of UI, and can be reused across your app. Each component lives in a single .svelte file and consists of three parts: . | Its HTML (placed directly inside the file). As we have seen, this is not plain HTML, but it has superpowers: it can contain expressions and logic. | Its JavaScript (placed inside a &lt;script&gt; element) | Its CSS (placed inside a &lt;style&gt; element). Any CSS you write here is transformed to only apply to that component, even if you use very generic selectors. | . The +page.svelte files you created in Step 2 are also components! . Step 5.1: Creating a &lt;Project&gt; component . We will create a &lt;Project&gt; component that will take the project data as input so that we can use it anywhere we want like this: . &lt;Project data={project} /&gt; . Start by copying the &lt;article&gt; element and its contents into a Project.svelte file in src/lib. In larger projects, components are placed in a lib/components directory to distinguish them from other files in lib. However, we‚Äôll stick to a shallow directory structure for now to keep things simple. Then add a &lt;script&gt; element with: . export let data = {}; . This defines what prop name other files use to pass data to our component and what the default value is (in this case an empty object). We should now change all expressions in our template to use data instead of p (e.g. { p.title } becomes { data.title }). If you want to make sure things work as quickly as possible, you could temporarily alias data to p via: . let p = data; . This aliases data to an internal variable p so we don‚Äôt have to change anything in our template. However, you should eventually edit the expressions in your template, otherwise you‚Äôll have trouble in the following labs. Step 5.2: Using the &lt;Project&gt; component . Now that we‚Äôve created our component, let‚Äôs use it! . First, we‚Äôll use it on the Projects page. To make it available to the page, we need to import it in the &lt;script&gt; element at the top of the file: . import Project from '$lib/Project.svelte'; . Then, we can replace the &lt;article&gt; element and its contents with: . &lt;Project data={p} /&gt; . Step 5.3: Using the &lt;Project&gt; component on the home page . Now that we‚Äôve used the Project component on the Projects page, we can use it on the home page as well. Copy the &lt;script&gt; element and its contents from the Projects page and paste it at the top of the home page, since we‚Äôll need exactly the same imports: the project data and the Project component. Then to display the first 3 items we can use an {#each}...{/each} block very similar to that of the Projects page, just using projects.slice(0, 3) instead of projects. You should also add a heading of a suitable level (e.g. ‚ÄúLatest projects‚Äù) and wrap the three projects in a &lt;div class=\"projects\"&gt; element so that they get the same styling (you may want to add another class too, e.g. &lt;div class=\"projects highlights\"&gt; to style them a little differently there). Want to display selected projects rather than the first three? You can use a new array like [projects[0], projects[3], projects[7]] instead. Step 5.4: Customizing heading levels . Notice that we used an &lt;h2&gt; element for the heading of our projects on the home page, but we are also using &lt;h2&gt; for the title of each project. This works well for the projects page, but not on the home page, where it completely breaks the information hierarchy. What could we do? . One way to fix this is to add another prop to the Project component that allows us to specify the heading level. You can call it anything you want (I called it hLevel) but it‚Äôs important to give it a default value so that it only needs to be specified when it differs from the default. Just like data, we specify a prop by using export in the &lt;script&gt; element, and setting its value to our desired default value: . export let hLevel = 2; . Then, in the template, we can use an {#if}...{:else} block to conditionally render the heading level: . {#if hLevel === 1} &lt;h1&gt;{ data.title }&lt;/h1&gt; {:else if hLevel === 2} &lt;h2&gt;{ data.title }&lt;/h2&gt; &lt;!-- (and so on until 6) --&gt; {/if} . But wait! We can do better than that. There is a special element, &lt;svelte:element&gt; that is used exactly when we want to specify the type of the element conditionally. &lt;svelte:element this={'h' + hLevel}&gt;{data.title}&lt;/svelte:element&gt; . Lastly, we need to use the hLevel prop when we use the Project component on the home page: . &lt;Project data={p} hLevel=3 /&gt; . Note that we also need to adjust our CSS to account for &lt;h3&gt; elements there. Step 5.5: Moving Project-specific CSS to the Project component . The idea of component-driven design is that any code that is specific to a component should live in that component. There is code in our global CSS file that is specific to a project listing, so let‚Äôs move it there, inside a &lt;style&gt; element. Svelte automatically rewrites this CSS to ensure it never applies to anything that is not part of the component, so you can use simple selectors like article and not have to worry that you‚Äôll be styling more elements than you intend. ",
    "url": "/labs/lab04/#step-5-displaying-the-first-3-projects-on-the-home-page",
    "relUrl": "/labs/lab04/#step-5-displaying-the-first-3-projects-on-the-home-page"
  },"118": {
    "doc": "Lab 4: Svelte (Templating & Control Flow)",
    "title": "Step 6: Creating a layout for UI shared across pages (Optional but recommended)",
    "content": "Note that we are still using our code from Lab 3 to display the navigation bar. Not only would it be easier to manage this code in Svelte, it would also fix a pretty annoying bug: when you navigate to a different page, the navigation bar does not update to reflect the current page. This is because behind the scenes, Svelte is actually using JS to update the content when you navigate to another page, so the code that updates the current page link is not being run. If for some reason we wanted to keep the code that adds the navigation menu in global.js, there are ways to fix this bug that don‚Äôt involve porting it to Svelte. You can use the navigatesuccess event in your global.js to respond to navigation events and re-run the code that marks a certain link as current. There are two ways to do this We could create a Navbar component and import it and use it in every page. However, that would be quite tedious. There is actually a concept we have not yet covered called a layout component or ‚Äúlayout‚Äù for short. A layout is a component that wraps every page with the same content, so it‚Äôs very useful for things like headers, navigation bars, and footers. Svelte distinguishes layouts from other components by their file name, which is +layout.svelte. In fact, a larger website typically has multiple different layouts, many of which build on others. E.g. you could have a main layout for the whole website, and then a layout for blog posts. But don‚Äôt we already have app.html for that? Note that app.html is not a component, so it does not provide any of the conveniences of components (expressions, scoping, etc.). Step 6.1: Creating a layout component . Create a new file called +layout.svelte in the src/routes directory. Put YOLO &lt;slot /&gt; as its only content and save. &lt;slot /&gt; is a special element that is replaced with the contents of a component. In the case of a layout component, the contents are the page contents. Visit your website. Do you see the text ‚ÄúYOLO‚Äù at the top of every page? If so, great, the layout works! Now let‚Äôs do something more useful with it. Step 6.2: Adding a navigation bar to the layout . Now that we‚Äôve made sure we hooked everything up correctly. let‚Äôs start porting our navigation menu. In your +layout.svelte file, add a &lt;script&gt; element and define a variable with your pages. We‚Äôll use the same array of objects: . let pages = [ { url: './', title: 'Home' }, { url: './projects', title: 'Projects' }, // add the rest of your pages here ]; . Then add a &lt;nav&gt; element with an {#each} block inside it to iterate over the pages and create links for each: . &lt;nav&gt; {#each pages as p } &lt;!-- Link here, using {p.url} for the URL and {p.title} for the title --&gt; {/each} &lt;/nav&gt; . Save and preview. You should now see your navigation bar in all its past glory. Step 6.3: Adding a class to the current page link . While our navigation menu looks the same at first, there is no different styling for the current page (d√©j√† vu?). Let‚Äôs add that! . First, we need to import the $page Svelte data store, which contains information about the current page. To access it, add this to the top of +layout.svelte: . import { page } from '$app/stores'; . Note that even though we use $page in expressions, we import it as page (without the $). $ usually indicates reactivity in Svelte, i.e. a value that when it changes, everything that references it updates to reflect the change. Try it now: Add an expression anywhere in your +layout.svelte component to print out info about the current page as a JSON object: . { JSON.stringify($page); } . It should look like this (make sure to remove it after you‚Äôre done): . Notice that we can compare $page.route.id with the url of each page to see if it‚Äôs the current page. Because our url starts from ./ and $page.route.id starts from /, we need to add a . to the beginning of the url to compare them (\".\" + $page.route.id === p.url). But where do we put that expression? In our template, we can use the class:class-name syntax to add a class to an element if a condition is true: . &lt;a href={p.url} class:current={'.' + $page.route.id === p.url}&gt; {p.title} &lt;/a&gt; . This will add the class current to the link iff the condition is true. We could have simply used the class attribute, but the code would have been a little awkward: . &lt;a href={p.url} class={'.' + $page.route.id === p.url ? 'current' : ''}&gt; {p.title} &lt;/a&gt; . Step 6.4: Adding target=\"_blank\" to external links . Another thing that is missing in our new navigation is that external links don‚Äôt open in a new tab. We can fix that by adding a target=\"_blank\" attribute to links that start with http or https. To remove the attribute if the link is not external, we simply assign null to it: . target={ p.url.startsWith(\"http\") ? \"_blank\" : null } . Step 6.5: Moving CSS specific to the Navigation bar to the layout component . Just like with the &lt;Project&gt; component, let‚Äôs move the CSS that only applies to the navigation menu to be within our layout component (by copying it in a &lt;style&gt; element). Step 6.6: Importing global CSS via the layout component (Optional) . Another benefit that the layout gives us is that we now import our global CSS via the layout, which means that you benefit from SvelteÔ£øit‚Äôs hot reloading, i.e. the feature that updates your website when you save changes without you having to refresh anything. To make use of that, we need to move our style.css from static to src. Then, we remove the &lt;link&gt; element that points to it from src/app.html, since we‚Äôll be importing it a different way. Now, in the &lt;script&gt; element of your routes/+layout.svelte component, add: . import '../style.css'; . View your website and make sure everything works! . ",
    "url": "/labs/lab04/#step-6-creating-a-layout-for-ui-shared-across-pages-optional-but-recommended",
    "relUrl": "/labs/lab04/#step-6-creating-a-layout-for-ui-shared-across-pages-optional-but-recommended"
  },"119": {
    "doc": "Lab 4: Svelte (Templating & Control Flow)",
    "title": "Step 7: Creating a project list component (Optional)",
    "content": "Notice that there is some repetition in the way we display our projects on the home page and the Projects page. We can create a &lt;Projects&gt; component for that and encapsulate the CSS that relates to project lists within the component. Then we can use that component in both the home page and the Projects page. This component would accept the list of projects as its own data prop, and would need its own hLevel prop to pass down to &lt;Project&gt;. ",
    "url": "/labs/lab04/#step-7-creating-a-project-list-component-optional",
    "relUrl": "/labs/lab04/#step-7-creating-a-project-list-component-optional"
  },"120": {
    "doc": "Lab 4: Svelte (Templating & Control Flow)",
    "title": "To be continued‚Ä¶",
    "content": "In the next lab, we will learn about Svelte‚Äôs reactivity and how to use it to create interactive components. Among other things we will‚Ä¶ . | Port the color scheme switcher code to Svelte and greatly simplify it in the process | Load data from an API and display it on our website | . ",
    "url": "/labs/lab04/#to-be-continued",
    "relUrl": "/labs/lab04/#to-be-continued"
  },"121": {
    "doc": "Lab 4: Svelte (Templating & Control Flow)",
    "title": "Resources",
    "content": ". | Svelte | SvelteKit | . ",
    "url": "/labs/lab04/#resources",
    "relUrl": "/labs/lab04/#resources"
  },"122": {
    "doc": "Lab 4: Svelte (Templating & Control Flow)",
    "title": "Lab 4: Svelte (Templating & Control Flow)",
    "content": " ",
    "url": "/labs/lab04/",
    "relUrl": "/labs/lab04/"
  },"123": {
    "doc": "üìù Projects",
    "title": "Projects",
    "content": " ",
    "url": "/projects/#projects",
    "relUrl": "/projects/#projects"
  },"124": {
    "doc": "üìù Projects",
    "title": "üìù Projects",
    "content": " ",
    "url": "/projects/",
    "relUrl": "/projects/"
  },"125": {
    "doc": "üè† Home",
    "title": "Data Visualization",
    "content": "DSC 106, Winter 2025 at UC San Diego . Sam Lau he/him . lau@ucsd.edu . Lecture: TBD . Week 1 . Tue Jan 9 LEC 1 The Value of Visualization . Thu Jan 11 LEC 2 Data &amp; Image Models . Fri Jan 12 LAB 1 Altair . Week 2 . Tue Jan 16 LEC 3 (In)Effective Visual Encoding . Thu Jan 18 LEC 4 Perception . Fri Jan 19 LAB 2 HTML/CSS . PROJ 1 Project 1: Expository Visualization . Week 3 . Tue Jan 23 LEC 5 Color . Thu Jan 25 LEC 6 Interaction . Fri Jan 26 LAB 3 JavaScript, SVG . Week 4 . Tue Jan 30 LEC 7 Lecture Cancelled ‚Äì Sam was sick . Thu Feb 1 LEC 8 Project 2 Feedback . Fri Feb 2 LAB 4 Svelte . PROJ 2 Project 2: Deceptive Visualization . Week 5 . Tue Feb 6 LEC 9 D3.js . Code . Thu Feb 8 LEC 10 Maps . Fri Feb 9 PROJ 2 Project 2 Peer Review . LAB 5 D3 . Week 6 . Tue Feb 13 LEC 11 Visualization Tools . Thu Feb 15 LEC 12 Project 3 Peer Feedback . Fri Feb 16 PROJ 3 Project 3: Interactive Visualization . LAB 6 Mapbox.js . Week 7 . Tue Feb 20 LEC 13 Narrative Visualization . Thu Feb 22 LEC 14 JavaScript and Svelte . Code . Fri Feb 23 FINAL PROJ Final Project Proposal . LAB 7 Scrollytelling . Week 8 . Tue Feb 27 LEC 15 Animation . Code . Thu Feb 29 LEC 16 Uncertainty . Fri Mar 1 FINAL PROJ Final Project Prototype . Week 9 . Tue Mar 5 LEC 17 Evaluation &amp; Review . Thu Mar 7 LEC 18 Final Project Feedback . Fri Mar 8 FINAL PROJ Final Project Demo Video . Week 10 . Tue Mar 12 LEC 19 Final Project Showcase . Thu Mar 14 LEC 20 Final Project Office Hours . Week 11 . Sat Mar 16 FINAL PROJ Final Project . ",
    "url": "/#data-visualization",
    "relUrl": "/#data-visualization"
  },"126": {
    "doc": "üè† Home",
    "title": "üè† Home",
    "content": " ",
    "url": "/",
    "relUrl": "/"
  },"127": {
    "doc": "Project 1: Expository Visualization",
    "title": "Project 1: Expository Visualization",
    "content": "An expository article requires the author to investigate an idea, evaluate evidence, expound on the idea, and set forth an argument concerning that idea in a clear and concise manner. In this assignment, you will design an expository visualization to clearly communicate an idea based on a small data set. In addition, you must provide a rigorous rationale for your design choices. You should in theory be ready to explain the contribution of every pixel in the display towards your expository goals. You are free to use any graphics or charting tool you please - including Altair, Plotly, Tableau, and pen and paper. ",
    "url": "/projects/project1/",
    "relUrl": "/projects/project1/"
  },"128": {
    "doc": "Project 1: Expository Visualization",
    "title": "Data: Climate in Major U.S. Cities",
    "content": "The climate of a place can have a tremendous impact on people‚Äôs lived experience, ranging from personal moods to how an entire region defines itself. Here, you will examine a set of average monthly climate measurements for six major U.S. cities, roughly covering the edges of the continental United States. The dataset can be downloaded here. The data has seven columns: . | city: The name of the city. | lon: The longitude of the city. | lat: The latitude of the city. | month: The name of a month (Jan, Feb, etc.). | monthnum: The number of a month (1, 2, etc.). | sunshine: The average hours of sunshine observed during that month. | rain: The average inches of rain observed during that month. | . The climate data were collected from https://www.usclimatedata.com/. ",
    "url": "/projects/project1/#data-climate-in-major-us-cities",
    "relUrl": "/projects/project1/#data-climate-in-major-us-cities"
  },"129": {
    "doc": "Project 1: Expository Visualization",
    "title": "Task",
    "content": "Your task is to design a single static (i.e., single image) visualization that you believe effectively communicates an idea about the data, and provide a short write-up (no more than 4 paragraphs) describing your design. Start by choosing a question you‚Äôd like your visualization to answer. Design your visualization to answer that question, and use the question as the title of your graphic. While you must use the data set given, you are free to transform the data as you see fit. Such transforms may include (but are not limited to) log transformation, computing percentages or averages, grouping elements into new categories, or removing unnecessary variables or records. You are also free to incorporate additional external data. Your chart image should be interpretable without needing to reference your write-up. Do not forget to include title, axis labels, or legends as needed! . As different visualizations can emphasize different aspects of a data set, your write-up should document what aspects of the data you are attempting to most effectively communicate. In short, what story are you trying to tell? Just as important, also note which aspects of the data might be obscured due to your visualization design. Your write-up should provide a rigorous rationale for your design decisions. Document the visual encodings you used and why they are appropriate for the data and your specific question. These decisions include the choice of visualization type, size, color, scale, and other visual elements, as well as the use of sorting or other data transformations. How do these decisions facilitate effective communication? . ",
    "url": "/projects/project1/#task",
    "relUrl": "/projects/project1/#task"
  },"130": {
    "doc": "Project 1: Expository Visualization",
    "title": "Grading",
    "content": "The assignment score is out of a maximum of 10 points. The expected median score on this assignment is an 8.5, which corresponds to an A-. We will determine scores by judging both the soundness of your design and the quality of the write-up. We will also look for consideration of audience, message, and intended task. Here are examples of aspects that may lead to point deductions: . | Use of misleading, unnecessary, or unmotivated graphic elements. | Missing chart title, axis labels, or data transformation description. | Missing or incomplete design rationale in write-up. | Ineffective encodings for your stated goal (e.g., distracting colors, improper data transformation). | . Your project will get 9/10 points if you fulfill all the requirements in the project description. You‚Äôll get higher than 9 points if you go above and beyond the project requirements, up to 10 points. We‚Äôll possibly give even higher than 10 points if the work is truly exceptional (e.g. could be published in a popular news article). From our perspective, the project description tells you how to get a passing grade on the project ‚Äî if you followed the description and published your work as part of a portfolio, it would be considered good quality work by an outside reviewer (e.g. a professional data scientist), but probably wouldn‚Äôt be outstanding or memorable. Getting a 9/10 on the project grade reflects that. Projects that go ‚Äúabove and beyond‚Äù the assignment requirements to produce effective graphics may include, for example, outstanding visual design, meaningful incorporation of external data to reveal important trends, exceptional creativity, or effective annotations and other narrative devices. ",
    "url": "/projects/project1/#grading",
    "relUrl": "/projects/project1/#grading"
  },"131": {
    "doc": "Project 1: Expository Visualization",
    "title": "Submission Details",
    "content": "This is an individual assignment. You may not work in groups. Your completed assignment is due on Fri 1/19, by 11:59pm. You must submit your assignment using Gradescope. Please upload a single image file (PNG, JPG) of your visualization design using the correct file extension, such as ‚Äúa1.png‚Äù for PNG image files or ‚Äúa1.jpg‚Äù for JPEG image files. Please do not include your name or PID in the filename, and be sure your image is sized for a reasonable viewing experience! Viewers should not have to zoom or scroll in order to effectively view your submission. In addition, submit your write-up to Gradescope as a plain text file, named exactly as ‚Äúreadme.txt‚Äù, with content that follows the instructions above. Do not include your name or PID in the filename! . ",
    "url": "/projects/project1/#submission-details",
    "relUrl": "/projects/project1/#submission-details"
  },"132": {
    "doc": "Project 2: Deceptive Visualization",
    "title": "Project 2: Deceptive Visualization",
    "content": "Data visualizations are becoming a key medium for the public to understand news and information. It‚Äôs crucial to recognize how the design of a visualization can affect what people understand and remember from the data. In this task, you need to pick a dataset you find interesting and create two static visualizations using the same dataset. The first should be a truthful representation of the data. The second should be a deceptive visualization, designed to deceive the viewer. However, you should avoid clear distortions or leaving out information for this deceptive visualization. ",
    "url": "/projects/project2/",
    "relUrl": "/projects/project2/"
  },"133": {
    "doc": "Project 2: Deceptive Visualization",
    "title": "Assignment",
    "content": "Your objective is to create two static (single image) visualizations of a selected dataset. The first visualization should be designed to clearly and sincerely convey insights from the data. In contrast, the second should be crafted to intentionally mislead the viewer, causing them to make incorrect inferences. Additionally, you are required to write a brief explanation, limited to four paragraphs, outlining your design strategy for both visualizations. In this task, an earnest visualization is defined as one that: . | Is easily understandable and can be interpreted by the general public. | Uses visual encodings that are suitable and effective for the desired purpose. | Clearly and openly describes any transformations made to the data. | Transparently communicates the source of the data and any possible biases involved. | . Conversely, a deceptive visualization typically displays these characteristics: . | The graphical depiction is deliberately unsuitable or deceptive. | Headings are crafted to influence the viewer‚Äôs understanding in a biased manner. | There is intentional manipulation or selective filtering of data to deceive. | It‚Äôs not transparent about possible bias present in the data. | . For the earnest visualization, your goal is to be as clear and transparent as possible to help viewers answer your intended question. For the deceptive visualization, your goal is to trick the viewer (including the course staff!) into believing that the visualization is legitimate and earnest. It should not be immediately obvious which visualization is trying to be deceptive. Subtle ineffective choices in the design should require close and careful reading to be identified. For the deceptive visualization, misleading strategies are fine but outright lying is not. For example, sketchy, unreliable or untrustworthy input datasets are discouraged, but misleading omission, filtering, or transformation of trustworthy data records is fine. Deliberate lies in the title, axes, labels, or annotations is discouraged, but technically true/relevant but otherwise misleading text in the visualization is fine. For both visualization designs, start by choosing a question you would like to answer. Design your visualization to answer that question either correctly (for the earnest visualization) or incorrectly (for the deceptive visualization). You may choose to address a different question with each visualization. Be sure to document the question as part of the visualization design (e.g., title, subtitle, or caption) and in your assignment write-up. Your write-up should contain the following information: . | The specific question each visualization aims to answer. | A description of your design rationale and important considerations for each visualization. | . ",
    "url": "/projects/project2/#assignment",
    "relUrl": "/projects/project2/#assignment"
  },"134": {
    "doc": "Project 2: Deceptive Visualization",
    "title": "Recommended Data Sources",
    "content": "To help get you started, this assignment, we‚Äôve provided three possible datasets for you to use, although you‚Äôre welcome to select any dataset you prefer. You must use the same dataset for both visualizations, but you may transform the data differently, use additional data variables, or choose to address a different question for each design. These datasets are intentionally chosen to cover politically charged topics for the simple reason that these are typically the types of data where deceptive visualizations may proliferate. Data on Energy by Our World in Data, 1900-2022 . Our World in Data, a non-profit that gathers and analyzes data about global issues, has published data about energy usage for countries (e.g. coal consumption, hydropower consumption, etc.) around the world since 1900. You can download the data here. Education Data . Every year, the federal government releases large amounts of data on US schools, districts, and colleges. However, this information is scattered across multiple datasets. Urban Institute‚Äôs Education Data Explorer tries to fix this issue by putting together data from various sources such as the National Center for Education Statistics‚Äô Common Core of Data (CCD), the Civil Rights Data Collection (CRDC), the US Department of Education‚Äôs EDFacts, and IPUMS‚Äô National Historical Geographic Information System (NHGIS) and makes it available as an API. You can download the data by making an API call using the code available on the website or alternatively clicking on the downloads button on the website. Internet Usage Data . UNdata brings international statistical databases within easy reach of users through a single-entry point. It is maintained by the Development Data Section of the Development Data and Outreach Branch within the Statistics Division of the Department of Economic and Social Affairs (UN DESA) of the UN Secretariat. You can find the internet usage data here. Feel free to take a look at some of the other datasets made available by UNdata here. This data has the following columns: . | Region/country Code: code representing the country or region. | Region or Country Name: Field containing the country name. | Year: Field containing the year at which the data was collected. | Value: Field denoting the Percentage of individuals using the internet. | Source: Field denoting the source of the data. | . Here are some other possible sources to consider. You are also free to use data from a source different from those included here. If you have any questions on whether a dataset is appropriate, please ask the course staff ASAP! . | City of San Diego open data | U.S. Government Open Datasets | U.S. Census Bureau - Census Datasets | IPUMS.org - Integrated Census &amp; Survey Data from around the World | Federal Elections Commission - Campaign Finance &amp; Expenditures | Federal Aviation Administration - FAA Data &amp; Research | NOAA Daily Weather - NOAA Daily Global Historical Climatology Network Data | yelp.com/dataset - Yelp Open Dataset | fivethirtyeight.com - Data and Code behind the Stories and Interactives | Buzzfeed News - Open-source data from BuzzFeed‚Äôs newsroom | . ",
    "url": "/projects/project2/#recommended-data-sources",
    "relUrl": "/projects/project2/#recommended-data-sources"
  },"135": {
    "doc": "Project 2: Deceptive Visualization",
    "title": "Grading",
    "content": "The assignment score is out of a maximum of 10 points. We will determine scores by judging the soundness of your visualization designs, the duplicity of your deceptive visualization, and the quality of the write-up. Here are examples of aspects that may lead to point deductions: . | Obvious identification of the earnest and deceptive visualizations. | Ineffective visual encodings for your stated goal. | Missing indication of the main analysis question. | Missing or incomplete design rationale in write-up. | . We will reward entries that go above and beyond the assignment requirements to produce effective (and deceptive) graphics. Examples may include outstanding visual design, effective annotations and other narrative devices, exceptional creativity, or deceptive designs that require the write-up in order to properly identify the misleading design components. ",
    "url": "/projects/project2/#grading",
    "relUrl": "/projects/project2/#grading"
  },"136": {
    "doc": "Project 2: Deceptive Visualization",
    "title": "Submission Details",
    "content": "This is an individual assignment. You may not work in groups. Your completed assignment is due on Fri 2/2, by 11:59 pm. You must submit your assignment using Gradescope. Please upload two image files (PNG, JPG) of your visualization design using the correct file extension, such as ‚Äúa2_earnest.png‚Äù and ‚Äúa2_deceptive.png‚Äù for PNG image files or ‚Äúa2_earnest.jpg‚Äù or ‚Äúa2_deceptive.jpg‚Äù for JPEG image files. Please do not include your name or PID in the filename, and be sure your image is sized for a reasonable viewing experience! Viewers should not have to zoom or scroll in order to effectively view your submission. In addition, submit your write-up to Gradescope as a plain text file, named exactly as ‚Äúreadme.txt‚Äù, with content that follows the instructions above. Do not include your name or PID in the filename! . Please use the correct file names for your submissions; typos that require manual correction by the course staff may result in point deductions. Do not worry about resubmissions, feel free to resubmit as needed prior to the deadline (if you are using late days to do a resubmission, please notify the course staff). Remember, the visualization itself should not give away which design is earnest and which is deceptive; the file names will be randomized by the course staff prior to peer review. ",
    "url": "/projects/project2/#submission-details",
    "relUrl": "/projects/project2/#submission-details"
  },"137": {
    "doc": "Project 2: Deceptive Visualization - Peer Grading",
    "title": "Project 2: Deceptive Visualization - Peer Grading",
    "content": "You will review two Project 2 submissions from your classmates and share constructive feedback. This assignment is an opportunity to both (a) develop skills to effectively evaluate and critically analyze visualization designs, and (b) help guide subsequent efforts by your peers to improve project quality and visualization design across the class. An important goal for this assignment is to understand how visualization designs might aim to intentionally (or unintentionally) mislead the viewer, so as to provide you with more confidence and skepticism when interpreting visualizations in the wild. ",
    "url": "/projects/project2peer/",
    "relUrl": "/projects/project2peer/"
  },"138": {
    "doc": "Project 2: Deceptive Visualization - Peer Grading",
    "title": "Assignment",
    "content": "For each peer review, begin by critically reading the visualizations and try to determine which is the earnest design and which is the deceptive design. Note what you discover and learn about the data set, and what properties lead you to a particular conclusion. You must identify which visualization you believe to be intentionally deceptive, along with a rationale indicating which design elements led you to this conclusion. Next, author constructive critiques for each visualization design. Consider the following concerns: . | Are expressive and effective visual encodings applied? | How well does the choice of encodings they reveal the most important features or trends of the underlying data? | Is critical data easily seen, or is it somehow hidden? | Is an audience likely to understand the visualization? | How clear and transparent is the design? | Are elements appropriately titled or labeled? | Is there appropriate spacing, layout, legible type, and other forms of design styling? | Is the overall display confusing or cluttered? | Is there important information missing that is needed to interpret the visualization approapriately? | . To share critique, we will use the ‚ÄúI like / I wish / What if?‚Äù format. This involves sharing positive feedback on effective aspects, critical (but respectful!) feedback on what might be improved, and more wild (even half-baked) ideas your fellow students could explore in subsequent design iterations or future work. For each visualization, you must provide at least two statements in each of the I like / I wish / What if? categories. ",
    "url": "/projects/project2peer/#assignment",
    "relUrl": "/projects/project2peer/#assignment"
  },"139": {
    "doc": "Project 2: Deceptive Visualization - Peer Grading",
    "title": "Submission Details",
    "content": "This is an individual assignment. You may not work in groups. Your peer reviews are due Fri 02/09, 11:59pm. The links to the submissions that you are required to evaluate will be emailed to you. You must submit peer reviews for two Project 2 submissions. To submit your review, you must use gradescope. Please carefully respond to each of the questions raised. ",
    "url": "/projects/project2peer/#submission-details",
    "relUrl": "/projects/project2peer/#submission-details"
  },"140": {
    "doc": "Project 3: Interactive Visualization",
    "title": "Project 3: Interactive Visualization",
    "content": "For this assignment, you will explore the issues involved in implementing interactive visualizations. You will build a visualization that enables interactive exploration of a dataset of your choosing (we do have some suggestions as well which you can find below) and deploy it on the web. One goal of this assignment is to gain familiarity with implementing interaction techniques for visualizations. For example, the zipdecode and NameGrapher applications apply the interactive technique of dynamic queries ‚Äì as explored in the earlier HomeFinder application ‚Äì to the problem of uncovering patterns in zip codes and baby names. Similarly, treemaps were originally developed to display hierarchical file structures and were later adapted to the problem of interactively depicting a map of the stock market. We have seen many other examples of interactive visualization techniques in class. The goal of this assignment is not only for you to gain hands-on implementation experience, but also for you to think about the effectiveness of the specific techniques for your chosen data domain. One challenge is to scope the assignment so that you can finish it within two weeks. Focus on designing a limited yet compelling visualization that enables interactive exploration along a few critical dimensions. The NameGrapher application is a nice example that uses a simple but elegant interaction design to enable engaging explorations. A tightly focused, well-implemented interactive graphic is much preferred to a sprawling design that attempts too much! . ",
    "url": "/projects/project3/",
    "relUrl": "/projects/project3/"
  },"141": {
    "doc": "Project 3: Interactive Visualization",
    "title": "Team Registration",
    "content": "For this assignment, you should work in teams of 2-3 students. You might want to find project partners that you will continue to work with for the final project. As soon as you have formed a team and chosen a dataset, submit the team registration form. Your form must include the names, UCSD email addresses, and PIDs of each team member, along with a concise title for your interactive visualization. The visualization title need not be exact, just a rough title should be a good start. If you are looking for project partners, please post to Ed to find classmates with similar interests! You should submit your team registration by Mon 02/05, 11:55 pm. You will submit your interactive prototype as a webpage hosted on GitHub Pages. ",
    "url": "/projects/project3/#team-registration",
    "relUrl": "/projects/project3/#team-registration"
  },"142": {
    "doc": "Project 3: Interactive Visualization",
    "title": "Deliverables",
    "content": "Design an interactive graphic aimed at enabling understanding of a compelling question for a dataset of your choosing or you may choose any of the suggested datasets. To determine what subset of the data and which interactive options are most promising, you may want to perform additional exploratory analysis. What aspects of the data reveal the most interesting discoveries or stories? Do not feel obligated to try to convey everything about the data: focus on a compelling subset. Your graphic must include interactions that enable exploration. Possible techniques include panning, zooming, brushing, details-on-demand (e.g., tooltips), dynamic query filters, and selecting different measures to display. You are free to also consider highlights, annotations, or other narrative features intended to draw attention to particular items of interest and provide additional context. Implement your interactive graphic and deploy it to the web. You may only use only D3.js for this project. Vega-lite/Plotly/Altair/any other high-level plotting library or tool are strictly not allowed for this project. You can use other non-plotting related JavaScript libraries, e.g. Lodash, Svelte, Moment, etc. Your graphic should not require customized server-side support; you should simply load data from a static data file or public web API. Please refer to the Tech Support page for instructions on deploying a GitHub Pages website using Svelte. For deploying websites with other libraries, feel free to explore on your own. Using our template to complete this project is not mandatory. You will use GitHub pages to host your visualization from your project repository. Make sure that you make your repository ‚ÄúPublic‚Äù. We recommend keeping everything (development files and website) in your master branch: either serve your website from the root folder or the ‚Äú/docs‚Äù folder. Your repo must also contain the (unobfuscated) source code for your visualization. Your deployed web page should also include a write-up with the following components: . | A rationale for your design decisions. How did you choose your particular visual encodings and interaction techniques? What alternatives did you consider and how did you arrive at your ultimate choices? . | An overview of your development process. Describe how the work was split among the team members. Include a commentary on the development process, including answers to the following questions: Roughly how much time did you spend developing your application (in people-hours)? What aspects took the most time? . | . You can either include your write-up on the same page as your visualization or link to a separate file. ",
    "url": "/projects/project3/#deliverables",
    "relUrl": "/projects/project3/#deliverables"
  },"143": {
    "doc": "Project 3: Interactive Visualization",
    "title": "Grading Criteria",
    "content": "Projects that squarely meet the requirements for the assignment will receive a score of 9/10. Going beyond the call of duty can net additional points, for example: . | Advanced interaction techniques | Novel visualization elements | Effective multi-view coordination | Thoughtful and elegant graphic design | Insightful &amp; engaging exploration experience | . Point deductions will be made when projects suffer from: . | Errors or broken features | Ineffective visual encodings | Confusing interface design or unhelpful interactions | Lack of exploratory interaction techniques | Incomplete or insufficient write-up | . ",
    "url": "/projects/project3/#grading-criteria",
    "relUrl": "/projects/project3/#grading-criteria"
  },"144": {
    "doc": "Project 3: Interactive Visualization",
    "title": "Submission Details",
    "content": "Submit your team registration form by Mon 02/05, 11:55 PM. You must have a working prototype online by Fri 02/16, 11:59 pm. Your prototype should be accessible on GitHub pages using a publicly viewable URL. In addition, you must submit the URL on Gradescope. One submission per team is sufficient. Submissions will be reviewed as part of a subsequent peer review assignment (due Fri 02/23), so try to avoid a late submission; assignments submitted late may not be included as part of the peer review and thus not receive peer feedback. ",
    "url": "/projects/project3/#submission-details",
    "relUrl": "/projects/project3/#submission-details"
  },"145": {
    "doc": "Project 3: Interactive Visualization",
    "title": "Rubric",
    "content": "The assignment is out of 10 points possible. Submissions that squarely meet the project requirements (Satisfactory column) will get 9/10 points. | Component | Excellent | Satisfactory | Not Satisfactory | . | Visual Encodings | The visualization does not violate the expressiveness criteria and the design choices (marks and encoding channels) are clear, evocative, and effective. (+3 points) | The visualization does not violate the expressiveness criteria, but another set of design choices (marks and encoding channels) could have been more effective (e.g. using the area visual channel instead of position when possible). (+2.5 points) | The visualization violates the expressiveness criteria (e.g. heavy overplotting, encodings that imply incorrect readings, etc.), and these violations are not addressed using the available interactions (e.g. overplotting that cannot be filtered or zoomed into). (+1.5 points) | . | Data Transformations | ¬† | The visualization uses appropriate data transformations (e.g. filtering, aggregating) and clearly describes the transformations to the reader (e.g. in the subtitle of the plot). (+1.5 points) | The visualization used an inappropriate set of data transformations (e.g. filtering out important outliers), or did not clearly describe these transformations to the reader. (+1 point) | . | Interaction | The interactive elements of the plot are polished, mostly bug-free, and enable the reader to discover interesting patterns in the data. (+3.5 points) | The interactive elements of the plot are functional and enable the reader to discover interesting patterns in the data, but a static plot (perhaps with a different encoding) could have conveyed the same information just as effectively. (+3 points) | The plot would have been substantially more effective as a static plot without the interaction; or, the interaction has major bugs that preclude use. (+2 point) | . | Writeup | ¬† | The writeup clearly describes the motivation for the visualization and the rationale for its design decisions (e.g. the visual encodings, data transformations, color palette, etc.). It also contains an overview of the team‚Äôs development process. (+2 points) | One or more required elements of the writeup has major issues (e.g. rationale misses important parts of the visualization design) or is missing. (+1 points) | . | Creativity and Originality | The submission exceeds the assignment requirements, with original insights or particularly engaging visualizations. (+1 bonus point) | The submission meets the assignment requirements. (+0 points) | ¬† | . ",
    "url": "/projects/project3/#rubric",
    "relUrl": "/projects/project3/#rubric"
  },"146": {
    "doc": "Project 3: Interactive Visualization",
    "title": "Suggested Data Sources",
    "content": "To help get you started, this assignment, we‚Äôve provided three possible datasets for you to use, although you‚Äôre welcome to select any dataset you prefer. Note that these datasets are the same as the ones from Project 2. Feel free to reuse the dataset you used in Project 2 to speed up your development process. Data on Energy by Our World in Data, 1900-2022 . Our World in Data, a non-profit that gathers and analyzes data about global issues, has published data about energy usage for countries (e.g. coal consumption, hydropower consumption, etc.) around the world since 1900. You can download the data here. Education Data . Every year, the federal government releases large amounts of data on US schools, districts, and colleges. However, this information is scattered across multiple datasets. Urban Institute‚Äôs Education Data Explorer tries to fix this issue by putting together data from various sources such as the National Center for Education Statistics‚Äô Common Core of Data (CCD), the Civil Rights Data Collection (CRDC), the US Department of Education‚Äôs EDFacts, and IPUMS‚Äô National Historical Geographic Information System (NHGIS) and makes it available as an API. You can download the data by making an API call using the code available on the website or alternatively clicking on the downloads button on the website. Internet Usage Data . UNdata brings international statistical databases within easy reach of users through a single-entry point. It is maintained by the Development Data Section of the Development Data and Outreach Branch within the Statistics Division of the Department of Economic and Social Affairs (UN DESA) of the UN Secretariat. You can find the internet usage data here. Feel free to take a look at some of the other datasets made available by UNdata here. This data has the following columns: . | Region/country Code: code representing the country or region. | Region or Country Name: Field containing the country name. | Year: Field containing the year at which the data was collected. | Value: Field denoting the Percentage of individuals using the internet. | Source: Field denoting the source of the data. | . Here are some other possible sources to consider. You are also free to use data from a source different from those included here. If you have any questions on whether a dataset is appropriate, please ask the course staff ASAP! . | City of San Diego open data | U.S. Government Open Datasets | U.S. Census Bureau - Census Datasets | IPUMS.org - Integrated Census &amp; Survey Data from around the World | Federal Elections Commission - Campaign Finance &amp; Expenditures | Federal Aviation Administration - FAA Data &amp; Research | NOAA Daily Weather - NOAA Daily Global Historical Climatology Network Data | yelp.com/dataset - Yelp Open Dataset | fivethirtyeight.com - Data and Code behind the Stories and Interactives | Buzzfeed News - Open-source data from BuzzFeed‚Äôs newsroom | . ",
    "url": "/projects/project3/#suggested-data-sources",
    "relUrl": "/projects/project3/#suggested-data-sources"
  },"147": {
    "doc": "Project 3: Interactive Visualization - Peer Grading",
    "title": "Project 3: Interactive Visualization - Peer Grading",
    "content": "You will review two Project 3 submissions from your classmates and share constructive feedback. This assignment is an opportunity to both (a) develop skills to effectively evaluate and critically analyze visualization designs, and (b) help guide subsequent efforts by your peers to improve project quality and visualization design across the class. ",
    "url": "/projects/project3peer/",
    "relUrl": "/projects/project3peer/"
  },"148": {
    "doc": "Project 3: Interactive Visualization - Peer Grading",
    "title": "Assignment",
    "content": "For each peer review, begin by engaging with the prototype. Interact with the visualization and try to exhaustively cover the views and interactions that the prototype supports. Note what you discover and learn about the data set as you do so. Be sure to also read the write-ups to gain more insight into the process and design decisions behind the prototype. Next, author a constructive critique of the visualization covering at least the following concerns: . | Visual Encodings. Are expressive and effective visual encodings applied? How well do they reveal the most important features or trends of the underlying data? Is critical data easily seen, or is it unnecessarily ‚Äúhidden‚Äù and only revealed in response to interaction? Is the target audience likely to understand the visualization? | Interaction Techniques. Do the supported interaction techniques enable more effective discovery of interesting trends, patterns or outliers? Do they engage the viewer in a process of meaningful exploration or learning? Are the interactions well-implemented, without notable performance issues or usability problems? | Design Quality. Assess the overall design quality in terms of organization and presentation. Are elements appropriately titled or labeled? Is there appropriate spacing, layout, legible type, and other forms of design styling? Is it clear where to begin viewing/interacting with the design? Is the overall display confusing or cluttered? How successful is the prototype in meeting the intended goals? | . For each of the concerns listed above ‚Äì visual encodings, interaction techniques, and overall design quality ‚Äì we recommend using the ‚ÄúI like / I wish / What if?‚Äù format. Be sure to share positive feedback on effective aspects, critical (but respectful!) feedback on what might be improved, and more wild (even half-baked) ideas a team might explore in subsequent design iterations. Each peer review should contain at least a dozen such comments (average of 4 comments for each section (I Like/I wish/What if?)), often much more! . ",
    "url": "/projects/project3peer/#assignment",
    "relUrl": "/projects/project3peer/#assignment"
  },"149": {
    "doc": "Project 3: Interactive Visualization - Peer Grading",
    "title": "Submission Details",
    "content": "This is an individual assignment. You may not work in groups. Your peer reviews are due Tue 02/27, 11:59pm. The links to the submissions that you are required to evaluate will be emailed to you. You must submit peer reviews for two Project 3 submissions. To submit your review, you must use gradescope. Please carefully respond to each of the questions raised. ",
    "url": "/projects/project3peer/#submission-details",
    "relUrl": "/projects/project3peer/#submission-details"
  },"150": {
    "doc": "üìö Resources",
    "title": "üìö Resources",
    "content": " ",
    "url": "/resources/#-resources",
    "relUrl": "/resources/#-resources"
  },"151": {
    "doc": "üìö Resources",
    "title": "Table of contents",
    "content": ". | Altair | Learning D3 | Storytelling Websites | Visualization Principles | Visualization Design Ideas | Color Palettes | . ",
    "url": "/resources/#table-of-contents",
    "relUrl": "/resources/#table-of-contents"
  },"152": {
    "doc": "üìö Resources",
    "title": "Altair",
    "content": ". | Altair Visualization Curriculum | Vega-Altair User Guide | . ",
    "url": "/resources/#altair",
    "relUrl": "/resources/#altair"
  },"153": {
    "doc": "üìö Resources",
    "title": "Learning D3",
    "content": ". | D3 Gallery | D3 in Depth | Intro to D3.js | Interactive Charts with D3 | https://wattenberger.com (Contain useful blog posts by a front-end developer, especially on learning about D3.js) | https://observablehq.com/@wattenberger/prototyping-in-d3 (D3 Prototyping) | https://vallandingham.me/vis/ (other cool blog) | . ",
    "url": "/resources/#learning-d3",
    "relUrl": "/resources/#learning-d3"
  },"154": {
    "doc": "üìö Resources",
    "title": "Storytelling Websites",
    "content": ". | https://pudding.cool . | https://github.com/the-pudding (Cool storytelling website, they provide open-source code, too) . | . -‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî- . | https://distill.pub . | https://github.com/distillpub (Interactive Machine Learning) . | . -‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî- . | https://seeing-theory.brown.edu/#firstPage | https://github.com/seeingtheory/Seeing-Theory (Cool Interactive Visualization on learning probability and statistics) | . -‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî- . | https://d3gt.com/unit.html | https://github.com/mrpandey/d3graphTheory (Visualizing Graph Theory Concepts) | . ",
    "url": "/resources/#storytelling-websites",
    "relUrl": "/resources/#storytelling-websites"
  },"155": {
    "doc": "üìö Resources",
    "title": "Visualization Principles",
    "content": ". | The Visual Display of Quantitative Information by Edward Tufte | Fundamentals of Data Visualization by Claus Wilke | . ",
    "url": "/resources/#visualization-principles",
    "relUrl": "/resources/#visualization-principles"
  },"156": {
    "doc": "üìö Resources",
    "title": "Visualization Design Ideas",
    "content": ". | https://www.awwwards.com (HIGHLY RECOMMEND for design inspirations!) | https://datavizproject.com (1 dataset, 100 visualizations) | https://www.data-to-viz.com (taxonomy of visualizations) | https://www.economist.com/graphic-detail?page=1 (Data Viz examples by The Economist) | https://informationisbeautiful.net (cool data viz designs) | . ",
    "url": "/resources/#visualization-design-ideas",
    "relUrl": "/resources/#visualization-design-ideas"
  },"157": {
    "doc": "üìö Resources",
    "title": "Color Palettes",
    "content": ". | https://color.adobe.com/create/color-wheel (Adobe color palettes) | http://zhongguose.com/#danqianhong (Chinese Traditional Colors) | http://nipponcolors.com (Japanese Traditional Colors) | https://picular.co. (Find the color of anything you want) | https://webgradients.com (Different kind of linear gradients) | https://www.happyhues.co/palettes/17 (Different color palette preview on same web design) | . ",
    "url": "/resources/#color-palettes",
    "relUrl": "/resources/#color-palettes"
  },"158": {
    "doc": "üìö Resources",
    "title": "üìö Resources",
    "content": " ",
    "url": "/resources/",
    "relUrl": "/resources/"
  },"159": {
    "doc": "üë©‚Äçüè´ Staff",
    "title": "üë©‚Äçüè´ Staff",
    "content": " ",
    "url": "/staff/",
    "relUrl": "/staff/"
  },"160": {
    "doc": "üë©‚Äçüè´ Staff",
    "title": "Instructor",
    "content": "Sam Lau he/him . lau@ucsd.edu Lecture: TBD . Sam Lau is an assistant teaching professor in the Halƒ±cƒ±oƒülu Data Science Institute at UC San Diego. His research creates novel interfaces for learning and teaching data science, including the popular Pandas Tutor tool (https://pandastutor.com/) which serves over 40,000 people per year. He is the author of an introductory data science textbook called Learning Data Science, published by O‚ÄôReilly Media in 2023. ",
    "url": "/staff/#instructor",
    "relUrl": "/staff/#instructor"
  },"161": {
    "doc": "üë©‚Äçüè´ Staff",
    "title": "Staff",
    "content": " ",
    "url": "/staff/#staff",
    "relUrl": "/staff/#staff"
  },"162": {
    "doc": "üìñ Syllabus",
    "title": "üìñ Syllabus",
    "content": " ",
    "url": "/syllabus/#-syllabus",
    "relUrl": "/syllabus/#-syllabus"
  },"163": {
    "doc": "üìñ Syllabus",
    "title": "Table of contents",
    "content": ". | About üßê | Getting Started üíª . | Websites | Development Environment | . | Communication üí¨ | Course Components üçé . | Lectures | Participation | Discussions | Labs | Projects | Office Hours | Weekly Schedule | . | Policies üíØ . | Grading | Late Policy, Slip Days, and Drops | Regrade Requests | Incompletes | A note on letter grades | . | Collaboration Policy and Academic Integrity ü§ù . | Why is academic integrity important? | What counts as cheating? | How can I be sure that my actions are NOT considered cheating? | . | Support ü´Ç . | Accommodations | Diversity and Inclusion | Campus Resources | . | Acknowledgements üôè | . ",
    "url": "/syllabus/#table-of-contents",
    "relUrl": "/syllabus/#table-of-contents"
  },"164": {
    "doc": "üìñ Syllabus",
    "title": "About üßê",
    "content": "Data visualization is one of our most powerful cognitive tools to make sense of large amounts of data. Well-designed visualizations enable us to use visual processing rather than calculation, allowing to ‚Äúsee‚Äù patterns in data. DSC 106 is a project-centered course that covers fundamental principles and techniques in data visualization. By the end of the course, you will: . | Understand and apply key visualization techniques and theory. | Design, evaluate, and critique visualization designs. | Implement interactive data visualizations for the web using D3.js. | Develop a substantial visualization project. | . Prerequisites: DSC 80. ",
    "url": "/syllabus/#about-",
    "relUrl": "/syllabus/#about-"
  },"165": {
    "doc": "üìñ Syllabus",
    "title": "Getting Started üíª",
    "content": "The course website, dsc106.com, will contain links to all course content. There are also a few things you‚Äôll need to do to get set up. Websites . You‚Äôll need to make accounts or join the class on the following sites. | Ed: We‚Äôll be using Ed as our course message and discussion board. More details are in the Communication section below. If you didn‚Äôt already get an invitation to our Ed course, sign up here. | Gradescope: You‚Äôll submit all projects to Gradescope. This is where all of your grades will live as well. Most of the assignments will be coding assignments. You should have received an email invitation for Gradescope, but if not please join Gradescope using entry code: B2G6ZN. | GitHub: Like in DSC 30 and 80, you‚Äôll access all course content (lecture slides and assignments) by pulling our course GitHub repository. That repo is here: https://github.com/dsc-courses/dsc106-wi24. In most assignments, you won‚Äôt need to push anything to GitHub. | Zoom (optional): To access remote office hours, if you‚Äôd like. | . Note that we will not be using Canvas for anything this quarter. ‚ö†Ô∏èIf you enroll in the class later than 1/5, please join edsteam use this link and join Gradescope using entry code: B2G6ZN manually. Development Environment . As soon as you are able to, go follow the steps in the Tech Support page of the course website to set up your development environment for the course. ",
    "url": "/syllabus/#getting-started-",
    "relUrl": "/syllabus/#getting-started-"
  },"166": {
    "doc": "üìñ Syllabus",
    "title": "Communication üí¨",
    "content": "This quarter, we‚Äôll be using Ed as our course message board. You will be added to Ed automatically; use the invite link in the section above if you weren‚Äôt added. If you have a question about anything to do with the course ‚Äî if you‚Äôre stuck on a problem, didn‚Äôt understand something from lecture, want clarification on course logistics, or just have a general question about data science ‚Äî you can make a post on Ed. We only ask that if your question includes some or all of an answer (even if you‚Äôre not sure it‚Äôs right), please make your post private so that others cannot see it. You can also post anonymously to other students if you prefer. Course staff will regularly check Ed and try to answer any questions that you have. You‚Äôre also encouraged to answer questions asked by other students. Explaining something is a great way to solidify your understanding of it! . Please don‚Äôt email individual staff members, just make a private or public Ed post instead. ",
    "url": "/syllabus/#communication-",
    "relUrl": "/syllabus/#communication-"
  },"167": {
    "doc": "üìñ Syllabus",
    "title": "Course Components üçé",
    "content": "Lectures . Lectures will be held in-person on Tuesday and Thursday from 3:30-4:50PM in [CENTR 115] and 5:00-6:20PM in [CENTR 119]. Lecture attendance is not strictly required, but is one option for earning your participation grade (detailed below). Lectures will be podcasted, and lecture slides will be posted before class. Participation . Developing expertise in data visualization also means being able to clearly communicate, critique, and explain data visualizations to others. To develop this skill, participation in class will count for 8% of your course grade. Each week of the course will count for 1% of your grade, and the lowest two weeks will be dropped. There are 3 options for fulfilling the participation expectations for a particular week: . | Attend both lectures and participate in the lecture exercises. Participation will be tracked using an online form given during class. | Share and critique at least 1 interesting data visualization on Ed under the Critiques category that hasn‚Äôt already been shared during class, labs, or projects. To receive credit, the critique needs to have at least 3 paragraphs of around 3-4 sentences each. The three paragraphs should: . | Summarize the visualization and describe how it connects to a lecture concept from the current week or the previous week. If a dataset for the visualization is publicly available, provide a link. | Describe the strengths of this particular visualization. | Describe the weaknesses of this particular visualization. | . | Respond to 2 different visualization critiques from other students on Ed under the Critiques category. To receive credit, each response needs to have at least 2 paragraphs of around 3-4 sentences each. The paragraphs should: . | Explain what parts of the critique you agree and disagree with. | Suggest an improvement for the visualization. You can sketch out your improved visualization or write a program to generate it. | . | . ‚ö†Ô∏èIf you choose to fulfill lecture participation through option 2 or 3, you must make a public post on EdStem under the Critiques category. In the title of your post or response, clearly state that it is being used as an opportunity to fulfill lecture participation. The deadline for submitting critiques to count for the corresponding week is Sunday at 11:59 PM. Discussions . We will not be using the scheduled discussion sections for this course. We encourage you to attend office hours instead. Labs . There will be 7 lab assignments due weekly throughout the quarter. Each lab assignment is designed to be a walkthrough of practical material that you will use for your projects. Labs are meant to serve as worked examples: the solution code will be given to you as part of the lab. To receive credit for labs, you will need to complete the lab and then get checked off during office hours by a TA. The check off requirements will be clearly described at the end of each lab assignment. Each lab is worth 2% of your final grade, and the lowest lab grade will be dropped. Labs will be released on Fridays and due on the following Fridays at 11:59PM. You will access labs by pulling the course GitHub repository. Projects . There will be 4 projects due throughout the quarter. The projects are open-ended and are the primary focus of the course. As such, our standards for grading will be similar to the way portfolio pieces are evaluated for internship/research lab/job applications ‚Äî we expect your best work! The first three projects are solo projects. For the final project, you may work in pairs. Working in Pairs . You may work together on the final project (and only the final project!) with a partner. If you work with a partner, you are both required to actively contribute to all parts of the project. You must both be working on the assignment at the same time together, either physically or virtually on a Zoom call. You are encouraged to follow the pair programming model, in which you work on just a single computer and alternate who writes the code and who thinks about the problems at a high level. In particular, you cannot split up the project and each work on separate parts independently. If you work with a partner: . | Only one partner needs to submit the project on Gradescope; this partner should add the other partner to their submission. | You and your partner will receive the same score on any submissions you make together. | . If you are unhappy with your partnership (e.g., if your partner does not keep in touch, does not come prepared to work on the assignment, or does not seem to be engaged in the process), please first address your concerns to your partner, and try to agree on what should be done to make the partnership work well for both of you. If that approach is not successful, explain the issues to the instructors, who will work with you and your partner to improve the situation. Note that you may not work with partners on lab assignments, however you‚Äôre encouraged to discuss all assignments with others at a conceptual level in office hours and study groups. Office Hours . To get help on assignments and concepts, course staff will be hosting several office hours per week. The majority of our office hours are held in-person, though a few are held remotely ‚Äì if you‚Äôre able to, you‚Äôre strongly encouraged to attend in-person. See the Calendar tab of the course website for the most up-to-date schedule and instructions. Weekly Schedule . To summarize all of the events and deadlines, refer to this general weekly schedule (which is subject to change in any given week): . | Sunday | Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | . | ¬† | ¬† | Lecture | ¬† | Lecture | ¬† | ¬† | . | ¬† | ¬† | ¬† | ¬† | ¬† | Lab and Project due | ¬† | . ",
    "url": "/syllabus/#course-components-",
    "relUrl": "/syllabus/#course-components-"
  },"168": {
    "doc": "üìñ Syllabus",
    "title": "Policies üíØ",
    "content": "Grading . Here is how we‚Äôll compute your grade: . | Component | Weight | Notes | . | Participation | 8% | 1% per week, 2 lowest weeks dropped | . | Labs | 12% | 2% per lab, 1 lowest lab dropped | . | Project 1 | 10% | ¬† | . | Project 2 | 15% | 10% for submission, 5% for peer review | . | Project 3 | 15% | 10% for submission, 5% for peer review | . | Final Project | 40% | 3% for proposal, 7% prototype, 15% video, 15% final submission | . Late Policy, Slip Days, and Drops . All assignments must be submitted by 11:59PM San Diego time on the due date to be considered on time. You may turn them in as many times as you like before the deadline, and only the most recent submission will be graded, so it‚Äôs a good habit to submit early and often. If you make a submission after the deadline, your assignment will be counted as late. You have 6 ‚Äúslip days‚Äù to use throughout the quarter. A slip day extends the deadline of an assignment by 24 hours. The number of slip days you can use on an assignment depends on the kind of assignment: . | On labs, you may use up to 1 slip day. Since labs are due on Fridays and require a TA to check off, you may get checked off on the following Monday after a lab deadline to use 1 slip day. | On projects, you may use up to 2 slip days. Projects will not be accepted more than 48 hours after the deadline. Note that you will not be able to use slip days on the Final Project Deliverables due on Saturday, March 16, 2024. | . Slip days are designed to be a transparent and predictable source of leniency in deadlines. You can use a slip day if you are too busy to complete an assignment on its original due date (or if you forgot about it). But slip days are also meant for things like the internet going down at 11:58 PM just as you go to submit your assignment. Slip days are meant to be used in exceptional circumstances, so you probably should not need to use all 6, but if you have something going on in your life that is impeding your ability to do your classwork on time, please reach out to us as soon as possible so we can work something out. Slip days are applied automatically at the end of the quarter, and you don‚Äôt need to ask in order to use one. It‚Äôs your responsibility to keep track of how many you have left. If you‚Äôve run out of slip days and submit an assignment late, that assignment may still be graded, but you will receive a 0 on it when we calculate grades at the end of the quarter. However, in the event that you use all 6 days and submit another assignment late, we will allocate your slip days first to your projects (in chronological order), then to your labs (in chronological order), and then to other assignments. This is done to prevent you from receiving a 0 on, say, Project 4, if you‚Äôve used all of your slip days on labs up until that point; in such a case, you‚Äôd instead receive a 0 on an earlier lab that isn‚Äôt weighted as much in your grade. Regrade Requests . If you feel that there in an error in grading, you may submit a regrade request within two days of the grades being released. If you do not submit a regrade request within two days, your original grade will be final. To submit a regrade request for a manually graded problem, make the regrade request directly on Gradescope. Note that part of your grade is clarity, so if your answer was mostly right but unclear you may still not be eligible for full credit. Incompletes . In the unfortunate circumstance that you become sick, suffer a loss, or otherwise experience a significant setback that is outside of your control, you may be eligible for an Incomplete grade, which allows you to complete the rest of the work at a later time. If you are experiencing challenges due to circumstances outside your control, please contact me ASAP and we can discuss the best course of action. Note that an Incomplete does not allow you to re-do work that has already been completed, only to do work that hasn‚Äôt been completed, so it‚Äôs best to reach out right away. A note on letter grades . The following is adapted from CSE 160 at the University of Washington. Grading for this class is not curved in the sense that the average is set at (say) a B+ and half of the class must receive a grade lower than that. If everyone does well and shows mastery of the material, everyone can receive an A (this would be awesome!). If no one does well (this is unlikely), then everyone can receive a C. Grading for this class is curved in the sense that we do not have a pre-defined mapping from project and exam scores to a final GPA. There is no pre-determined score (e.g., 90% of all possible points) that earns an A or a B or a C or any other grade. To determine the final grade, we will ask questions like ‚ÄúDid this student master the material?‚Äù. With that said, grades will not be any stricter than the standard grading scale (where an A+ is a 97+, A is 93+, A- is 90+, etc). For instance, the threshold for an ‚ÄúA‚Äù will never be higher than 93%. Try your best not to worry about grades, and we‚Äôll reciprocate by being fair. We‚Äôre in this together üòé. ",
    "url": "/syllabus/#policies-",
    "relUrl": "/syllabus/#policies-"
  },"169": {
    "doc": "üìñ Syllabus",
    "title": "Collaboration Policy and Academic Integrity ü§ù",
    "content": "DSC 106 is known for being a rigorous but rewarding course. While you will be challenged this quarter, we will be offering you plenty of support through office hours and Ed. Make good use of these resources, and you will be able to succeed in this course. There is no excuse for cheating in this course. If you do cheat, we will enforce the UCSD Policy on Integrity of Scholarship. This means you will likely fail the course and the Dean of your college will put you on probation or suspend or dismiss you from UCSD. Students agree that by taking this course, their assignments may be submitted to third-party software to help detect plagiarism. Why is academic integrity important? . Academic integrity is an issue that is pertinent to all students on campus. When students act unethically by copying someone‚Äôs work, taking an exam for someone else, plagiarizing, etc., these students are misrepresenting their academic abilities. This makes it impossible for instructors to give grades (and for the University to give degrees) that reflect student knowledge. This devalues the worth of a UCSD degree for all students, making it imperative for the the campus as a whole to enforce that all members of this community are honest and ethical. We want your degree to be meaningful and we want you to be proud to call yourself a graduate of UCSD! . The UCSD Policy on Integrity of Scholarship and this syllabus list some of the standards by which you are expected to complete your academic work, but your good ethical judgment (or asking us for advice) is also expected as we cannot list every behavior that is unethical or not in the spirit of academic integrity. Ignorance of the rules will not excuse you from any violations. What counts as cheating? . In DSC 106, you can read books, surf the web, get inspiration from previous work or AI tools like ChatGPT, talk to your friends and the DSC 106 staff to get help understanding the concepts you need to know to complete your assignments. However, all code must be written by you (or, in the instance of projects, together with your partner). The following activities are considered cheating and are not allowed (not an exhaustive list): . | Using or submitting code acquired from other students (except from your pair programming partner during projects), the web, or any other resource not officially sanctioned by this course | Posting your code online, including on Ed, unless privately to instructors only | Having any other person complete any part of your assignment on your behalf | Completing an assignment on behalf of someone else | Providing code to any other student in the course | Splitting up project questions with your pair programming partner and each working on different questions | . The following activities are examples of appropriate collaboration and are allowed in (not an exhaustive list): . | (new) Using AI code generation tools, such as GitHub Copilot and ChatGPT, to help write your code | Discussing the general approach to solving labs or projects | Talking about problem-solving strategies or issues you ran into and how you solved them | Discussing the answers to exams with other students who have already taken the exam after the exam is complete | Using code provided in class, by the textbook or any other assigned reading or video, with attribution | Using Google to search for documentation. | Working together with other students on assignments without copying or sharing answers | Posting a question about your approach to a problem on Ed, without sharing your code | . How can I be sure that my actions are NOT considered cheating? . The best way to avoid problems is by using your best judgement and remembering to act with Honesty, Trust, Fairness, Respect, Responsibility, and Courage. Here are some suggestions for completing your work: . | Don‚Äôt look at or discuss the details of another student‚Äôs code for an assignment you are working on, and don‚Äôt let another student look at your code. | Don‚Äôt start with someone else‚Äôs code and make changes to it, or in any way share code with other students. | If you are talking to another student about an assignment, don‚Äôt take notes, and wait an hour afterward before you write any code. | . ",
    "url": "/syllabus/#collaboration-policy-and-academic-integrity-",
    "relUrl": "/syllabus/#collaboration-policy-and-academic-integrity-"
  },"170": {
    "doc": "üìñ Syllabus",
    "title": "Support ü´Ç",
    "content": "Accommodations . From the Office for Students with Disabilities (OSD): . OSD works with students with documented disabilities to review documentation and determine reasonable accommodations. Disabilities can occur in these areas: psychological, psychiatric, learning, attention, chronic health, physical, vision, hearing, and acquired brain injuries, and may occur at any time during a student‚Äôs college career. We encourage you to contact the OSD as soon as you become aware of a condition that is disabling so that we can work with you. If you already have accommodations via OSD, please make sure that we receive your Authorization for Accommodation (AFA) letter by the end of Week 1 so that we can make arrangements for accommodations. Share your AFA letter with the instructor and the Data Science OSD Liaison, who can be reached at dscstudent@ucsd.edu. Diversity and Inclusion . We are committed to an inclusive learning environment that respects our diversity of perspectives, experiences, and identities. Our goal is to create a diverse and inclusive learning environment where all students feel comfortable and can thrive. If you have any suggestions as to how we could create a more inclusive setting, please let us know. We also expect that you, as a student in this course, will honor and respect your classmates, abiding by the UCSD Principles of Community. Please understand that others‚Äô backgrounds, perspectives and experiences may be different than your own, and help us to build an environment where everyone is respected and feels comfortable. Campus Resources . If there is an issue you feel uncomfortable speaking with us or are searching for help on a specific concern, there are several campus resources available to you, including: . | UCSD Counseling and Psychological Services (CAPS) | Hub Basic Needs Center | Office for Students with Disability (OSD) | Office for Prevention of Sexual Harrassment and Discrimination | . ",
    "url": "/syllabus/#support-",
    "relUrl": "/syllabus/#support-"
  },"171": {
    "doc": "üìñ Syllabus",
    "title": "Acknowledgements üôè",
    "content": "Materials for this course have been adapted from classes taught by Soohyun Nam Liao and Jared Wilber at UCSD, Jeffrey Heer and Leilani Battle at UW, Arvind Satyanarayan at MIT, and Maneesh Agrawala and Michael Bernstein at Stanford University. The class draws heavily on materials and examples found online, and we try our best to give credit by linking to the original source. Please contact us if you find materials where credit is missing or that you would rather have removed. ",
    "url": "/syllabus/#acknowledgements-",
    "relUrl": "/syllabus/#acknowledgements-"
  },"172": {
    "doc": "üìñ Syllabus",
    "title": "üìñ Syllabus",
    "content": " ",
    "url": "/syllabus/",
    "relUrl": "/syllabus/"
  },"173": {
    "doc": "üôã‚Äç‚ôÇÔ∏è Tech Support",
    "title": "üôã‚Äç‚ôÇÔ∏è Tech Support",
    "content": "Page under construction! . ",
    "url": "/tech_support/#%EF%B8%8F-tech-support",
    "relUrl": "/tech_support/#Ô∏è-tech-support"
  },"174": {
    "doc": "üôã‚Äç‚ôÇÔ∏è Tech Support",
    "title": "Table of contents",
    "content": ". | Introduction . | Git | VS Code | Prettier | Live Preview | Svelte for VS Code | . | Node.js and npm | Generate static site using svelte SSG . | Migrate from your project | . | Any question? | . ",
    "url": "/tech_support/#table-of-contents",
    "relUrl": "/tech_support/#table-of-contents"
  },"175": {
    "doc": "üôã‚Äç‚ôÇÔ∏è Tech Support",
    "title": "Introduction",
    "content": "Labs and projects in DSC 106 are mostly coding assignments, so it‚Äôs important to make sure that your computing environment is set up properly. You will need to use DataHub for the first lab. You will need Git, VSCode, and Node to complete all other labs and projects. Git . All of our course materials, including your assignments, are hosted on GitHub in this Git repository. This means that you‚Äôll need to download and use Git to work with the course materials. Git is a version control system. In short, it is used to keep track of the history of a project. With Git, you can go back in time to any previous version of your project, or even work on two different versions (or \"branches\") in parallel and \"merge\" them together at some point in the future. We'll stick to using the basic features of Git in DSC 106. There are Git GUIs, and you can use them for this class. You can also use the command-line version of Git. To get started, you'll need to \"clone\" the course repository. The command to do this is: . git clone https://github.com/dsc-courses/dsc106-wi24 . This will copy the repository to a directory on your computer. To bring in the latest version of the repository, run git pull in your local repository. This will not overwrite your work. In fact, Git is designed to make it very difficult to lose work (although it's still possible!). Merge Conflicts . You might face issues when using git pull regarding merge issues and branches. This is caused by files being updated on your side while we are also changing the Git repository by pushing new assignments on our side. Here are some steps you can follow to resolve it: . NOTE: Whenever working with GitHub pulls, merges, etc., it‚Äôs a good idea to save your important work locally so that if you accidentally overwrite your files you still have the work saved. Save your work locally before following the steps below. | git status shows the current state of your Git working directory and staging area. It‚Äôs a good sanity check to start with. You will probably see your project and lab files that you have worked on. | git add . will add all your files to be ready to commit. | git commit -m \"some message of your choice\" will commit the files, with some description in the quotations. This can be whatever you want, it won‚Äôt matter. | . At this stage, if you git pull, it should work. You should double-check that you have new files, as well as that your old files are unchanged. If they are changed then you should be able to just copy-paste from your local backup. If this does not work then you may have merge conflicts, follow the next steps: . | git checkout --theirs [FILENAME] will tell git that whenever a conflict occurs in [FILENAME] to keep your version. Run this for each file with a conflict. | git add [FILENAME] to mark each file with a conflict as resolved. | git rebase --continue or git merge, depending on the setup. | . VS Code . To create, write, and edit our code, we are going to use a code editor. For this class, we are going to provide support for VS Code. If you want to use another code editor, feel free to do so, but keep in mind that we may not be able to recreate the problems that you may run into. You may download VS Code from here. In order to make our lives easier when we develop websites, we are going to use some VS Code extensions. Up to lab 6, it is only necessary to install the following two extensions. Come back when you need to work on lab 6; more information (related to Node installation) will be updated. Prettier . This is an extension that will help us keep our code clean and tidy. Click ‚ÄúInstall‚Äù on the webpage. It will redirect to your VSCode; then, click ‚ÄúInstall‚Äù again to install the extension. Live Preview . This will host a local server in our workspace for us to preview our web pages on. Click ‚ÄúInstall‚Äù on the webpage. It will redirect to your VSCode; then, click ‚ÄúInstall‚Äù again to install the extension. Svelte for VS Code . Starting Lab4, you are going to use Svelte. This will help you with svelte components. Click ‚ÄúInstall‚Äù on the webpage. It will redirect to your VSCode; then, click ‚ÄúInstall‚Äù again to install the extension. ",
    "url": "/tech_support/#introduction",
    "relUrl": "/tech_support/#introduction"
  },"176": {
    "doc": "üôã‚Äç‚ôÇÔ∏è Tech Support",
    "title": "Node.js and npm",
    "content": "Again, for Lab 4, we are going to need node.js and npm. Node.js is an open-source, cross-platform, JavaScript runtime environment that executes JavaScript code outside of a web browser. NPM ‚Äì or ‚ÄúNode Package Manager‚Äù ‚Äì is the default package manager for JavaScript‚Äôs runtime Node.js. You may find detailed instructions to download and install them here. To check the Node version, open a command prompt and type: . node --version . To check the npm version, type in: . npm --version . If everything is installed correctly, you should see the version number information. ",
    "url": "/tech_support/#nodejs-and-npm",
    "relUrl": "/tech_support/#nodejs-and-npm"
  },"177": {
    "doc": "üôã‚Äç‚ôÇÔ∏è Tech Support",
    "title": "Generate static site using svelte SSG",
    "content": "To assist you in creating a static webpage for GitHub Pages using Svelte, we have developed a template for you: ShaokangJiang/svelte-template (github.com). Please follow the link provided, and initiate the creation of a new repository. After GitHub completes the cloning process, navigate to the settings page. On the left panel, under the ‚ÄúPages‚Äù tab, locate the ‚ÄúSource‚Äù section and select ‚ÄúGitHub Actions‚Äù as the source. Clone this repository and proceed with your work. Upon completion, commit and push your changes. The corresponding GitHub Actions will then execute, building a static website hosted at https://your-username.github.io/your-repo-name for you. Migrate from your project . If you have started on the project and want to switch to using this template, you can copy your src folder, go to the local clone of your version of this template, then paste it. When it says the file exists, simply click replace, and you can continue working on your version of this template. ",
    "url": "/tech_support/#generate-static-site-using-svelte-ssg",
    "relUrl": "/tech_support/#generate-static-site-using-svelte-ssg"
  },"178": {
    "doc": "üôã‚Äç‚ôÇÔ∏è Tech Support",
    "title": "Any question?",
    "content": "The easiest and fastest way to reach our support for technical matters is by posting on edstem. You may also go to OHs. ",
    "url": "/tech_support/#any-question",
    "relUrl": "/tech_support/#any-question"
  },"179": {
    "doc": "üôã‚Äç‚ôÇÔ∏è Tech Support",
    "title": "üôã‚Äç‚ôÇÔ∏è Tech Support",
    "content": " ",
    "url": "/tech_support/",
    "relUrl": "/tech_support/"
  },"180": {
    "doc": "Old content, ignore",
    "title": "Old content, ignore",
    "content": "# Old content, ignore ## Step 5: Bar plot of line length and depth by line number Summary stats are nice, but it's hard to get a good picture of the distribution of the data and any potential correlations. Let‚Äôs try and figure out if there are any correlations between line number, depth, and index by visualizing them as a bar plot. ### Step 4.1: Basic bar chart of line length by line number First, let‚Äôs define a width and height for our coordinate space: ```js let width = 1000; let height = 200; ``` and an SVG to hold our chart: ```html ``` Note that we used a [`viewBox`](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox) with a minimum Y coordinate of `{-height}` so that the bottom of the SVG is Y=0, which will make plotting easier. Now, as shown in the [web-based visualization lecture](https://vis-society.github.io/lectures/intro-svelte-d3.html), we create scales to map our data to the coordinate space using the [d3-scale](https://d3js.org/d3-scale/linear) module: ```js $: xScale = d3.scaleBand() .domain(data.map(d => d.line)) .range([0, width]); $: yScale = d3.scaleLinear() .domain([0, d3.max(data, d => d.length)]) .range([0, height]); ``` This will allow us to draw bars inside our `` in a pretty straightforward way, without having to do the mapping calculations ourselves: ```html {#each data as d, i} {/each} ``` At this point our chart looks like this: ![alt text](/labs/lab07/images/length-bar-chart-black.png) Let‚Äôs add some style in a `` element: ```js svg { /* Don‚Äôt clip content outside the element */ overflow: visible; } rect { /* Flip bar vertically */ transform: scaleY(-1); /* Make bars semi-transparent to see overlap */ fill-opacity: .5; } ``` The final result looks a bit like this (the exact shape will vary based on your data): ### Step 4.2: Shifting the bars by indentation level Even though our bars overlap, the overlap does not actually convey meaningful information, because the data points do not correspond to the actual position of the code in the line. To illustrate that, let‚Äôs shift the bars up by the depth of the line. The result looks like this: ### Step 4.3: Different color per file type First, let‚Äôs reactively mutate the data to add a `type` property to each object, which will contain the file extension of the file the line is from. ```js $: { for (let d of data) { d.type = d.file.split(\".\").pop(); } } ``` Then let‚Äôs map the Tableau color scale to the file types, using `d3.scaleOrdinal()`: ```js $: colors = d3.scaleOrdinal() .domain(data.map(d => d.type)) .range(d3.schemeTableau10); ``` and change the hardcoded `fill=\"steelblue\"` with `fill={colors(d.type)}` in the `` element. If we preview at this point, we‚Äôll get something like this: ![alt text](/labs/lab07/images/bar-plot-colors-1.png) This is because colors get randomly assigned to file types based on the order they appear in our dataset. Let‚Äôs change this and apply the colors in order starting from the file types with the most lines of code. First, we need to *count* the number of lines per file type: ```js $: typeStats = Object.fromEntries(d3.rollup(data, v => v.length, d => d.type)); ``` this is a D3 [`InternMap`](https://d3js.org/d3-array/intern#InternMap), which is similar to a JS [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map). You can see what data it contains by temporarily adding this line to your HTML: ```html {JSON.stringify(typeStats, null, \"\\t\")} ``` in my case it printed: ``` { \"html\": 15, \"svelte\": 403, \"js\": 93, \"css\": 93 } ``` Now let‚Äôs sort this map by value, using the [`d3.sort()`](https://d3js.org/d3-array/sort#sort) method from `d3-array`: ```js $: typeStats = Object.fromEntries(d3.sort( d3.rollup(data, v => v.length, d => d.type), (d1, d2) => d3.descending(d1[1], d2[1]) )); ``` At this point it may be clearer to use a statement block: ```js let typeStats = {}; $: { let stats = d3.rollup(data, v => v.length, d => d.type); let sortedStats = d3.sort(stats, (d1, d2) => d3.descending(d1[1], d2[1])); typeStats = Object.fromEntries(sortedStats); }; ``` The output should have now changed. In my case it was: ``` { \"svelte\": 403, \"js\": 93, \"css\": 93, \"html\": 15 } ``` Now instead of mapping our raw data to the color scale, let‚Äôs map the keys of this map, by replacing `data.map(d => d.type)` with `Object.keys(typeStats)` in the `colors` scale definition: ```js $: colors = d3.scaleOrdinal() .domain(Object.keys(typeStats)) .range(d3.schemeTableau10); ``` We should be seeing something like this: ![](/labs/lab07/images/bar-plot-colors-2.png) ### Step 5: Adding a tooltip There‚Äôs a lot going on in our chart, and it's a little hard to process. It may be helpful to be able to see the exact data each bar represents by hovering over it and seeing the data that corresponds to the data point hovered. ",
    "url": "/labs/lab07/old/",
    "relUrl": "/labs/lab07/old/"
  },"181": {
    "doc": "For next year",
    "title": "For next year",
    "content": "# For next year - Step 0 should largely not be needed, these things should be done right from the start. ",
    "url": "/labs/lab09/todo/",
    "relUrl": "/labs/lab09/todo/"
  },"182": {
    "doc": "Playtesting Lab 2",
    "title": "Playtesting Lab 2",
    "content": "# Playtesting Lab 2 Please put your website within a directory here (`/labs/2/playtesting/`), named after your GitHub username. Please leave feedback in this issue: https://github.com/vis-society/vis-society.github.io/issues/13 Make sure to mention how long the lab took, ideally per step. ",
    "url": "/labs/lab02/playtesting/",
    "relUrl": "/labs/lab02/playtesting/"
  },"183": {
    "doc": "create-svelte",
    "title": "create-svelte",
    "content": "# create-svelte Everything you need to build a Svelte project, powered by [`create-svelte`](https://github.com/sveltejs/kit/tree/main/packages/create-svelte). ## Creating a project If you're seeing this, you've probably already done this step. Congrats! ```bash # create a new project in the current directory npm create svelte@latest # create a new project in my-app npm create svelte@latest my-app ``` ## Developing Once you've created a project and installed dependencies with `npm install` (or `pnpm install` or `yarn`), start a development server: ```bash npm run dev # or start the server and open the app in a new browser tab npm run dev -- --open ``` ## Building To create a production version of your app: ```bash npm run build ``` You can preview the production build with `npm run preview`. > To deploy your app, you may need to install an [adapter](https://kit.svelte.dev/docs/adapters) for your target environment. ",
    "url": "/labs/lab04/playtesting/",
    "relUrl": "/labs/lab04/playtesting/"
  },"184": {
    "doc": "create-svelte",
    "title": "create-svelte",
    "content": "# create-svelte Everything you need to build a Svelte project, powered by [`create-svelte`](https://github.com/sveltejs/kit/tree/main/packages/create-svelte). ## Creating a project If you're seeing this, you've probably already done this step. Congrats! ```bash # create a new project in the current directory npm create svelte@latest # create a new project in my-app npm create svelte@latest my-app ``` ## Developing Once you've created a project and installed dependencies with `npm install` (or `pnpm install` or `yarn`), start a development server: ```bash npm run dev # or start the server and open the app in a new browser tab npm run dev -- --open ``` ## Building To create a production version of your app: ```bash npm run build ``` You can preview the production build with `npm run preview`. > To deploy your app, you may need to install an [adapter](https://kit.svelte.dev/docs/adapters) for your target environment. ",
    "url": "/labs/lab04/playtesting/enrique/",
    "relUrl": "/labs/lab04/playtesting/enrique/"
  },"185": {
    "doc": "Playtesting",
    "title": "Playtesting",
    "content": "# Playtesting Please add your playtesting files here, under a directory with your username. Grace's full repo: [https://github.com/gracefh/IDVS-portfolio-svelte](https://github.com/gracefh/IDVS-portfolio-svelte) ",
    "url": "/labs/lab05/playtesting/",
    "relUrl": "/labs/lab05/playtesting/"
  },"186": {
    "doc": "Playtesting",
    "title": "Playtesting",
    "content": "# Playtesting Please add your playtesting files here, under a directory with your username. ",
    "url": "/labs/lab06/playtesting/",
    "relUrl": "/labs/lab06/playtesting/"
  },"187": {
    "doc": "Playtesting",
    "title": "Playtesting",
    "content": "# Playtesting Please add your playtesting files here, under a directory with your username. Grace's full repo: [https://github.com/gracefh/IDVS-portfolio-svelte](https://github.com/gracefh/IDVS-portfolio-svelte) ",
    "url": "/labs/lab07/playtesting/",
    "relUrl": "/labs/lab07/playtesting/"
  },"188": {
    "doc": "Playtesting",
    "title": "Playtesting",
    "content": "# Playtesting Please add your playtesting files here, under a directory with your username. ",
    "url": "/labs/lab08/playtesting/",
    "relUrl": "/labs/lab08/playtesting/"
  },"189": {
    "doc": "Playtesting",
    "title": "Playtesting",
    "content": "# Playtesting Please add your playtesting files here, under a directory with your username. ",
    "url": "/labs/lab09/playtesting/",
    "relUrl": "/labs/lab09/playtesting/"
  }
}
